extension String.UTF16View.Index : RandomAccessIndexType {

    /// *[Foundation]* Construct from an integer offset.
    init(_ offset: Int)

    /// *[Foundation]* Return the minimum number of applications of `successor` or
    /// `predecessor` required to reach `other` from `self`.
    ///
    /// Complexity: O(1).
    func distanceTo(x: String.UTF16View.Index) -> Int

    /// *[Foundation]* Return `self` offset by `n` steps.
    ///
    /// :returns: If `n > 0`, the result of applying `successor` to
    /// `self` `n` times.  If `n < 0`, the result of applying
    /// `predecessor` to `self` `-n` times. Otherwise, `self`.
    ///
    /// Complexity: O(1)
    func advancedBy(x: Int) -> String.UTF16View.Index
}

extension String {

    /// *[Foundation]* Returns an Array of the encodings string objects support
    /// in the application’s environment.
    static func availableStringEncodings() -> [NSStringEncoding]

    /// *[Foundation]* Returns the C-string encoding assumed for any method accepting
    /// a C string as an argument.
    static func defaultCStringEncoding() -> NSStringEncoding

    /// *[Foundation]* Returns a human-readable string giving the name of a given encoding.
    static func localizedNameOfStringEncoding(encoding: NSStringEncoding) -> String

    /// *[Foundation]* Returns a string created by using a given format string as a
    /// template into which the remaining argument values are substituted
    /// according to the user's default locale.
    static func localizedStringWithFormat(format: String, _ arguments: CVarArgType...) -> String

    /// *[Foundation]* Returns a string built from the strings in a given array
    /// by concatenating them with a path separator between each pair.
    static func pathWithComponents(components: [String]) -> String

    /// *[Foundation]* Produces a string created by reading data from the file at a
    /// given path interpreted using a given encoding.
    init?(contentsOfFile path: String, encoding enc: NSStringEncoding, error: NSErrorPointer = default)

    /// *[Foundation]* Produces a string created by reading data from the file at
    /// a given path and returns by reference the encoding used to
    /// interpret the file.
    init?(contentsOfFile path: String, usedEncoding: UnsafeMutablePointer<NSStringEncoding> = default, error: NSErrorPointer = default)

    /// *[Foundation]* Produces a string created by reading data from a given URL
    /// interpreted using a given encoding.  Errors are written into the
    /// inout `error` argument.
    init?(contentsOfURL url: NSURL, encoding enc: NSStringEncoding, error: NSErrorPointer = default)

    /// *[Foundation]* Produces a string created by reading data from a given URL
    /// and returns by reference the encoding used to interpret the
    /// data.  Errors are written into the inout `error` argument.
    init?(contentsOfURL url: NSURL, usedEncoding enc: UnsafeMutablePointer<NSStringEncoding> = default, error: NSErrorPointer = default)

    /// *[Foundation]* Produces a string containing the bytes in a given C array,
    /// interpreted according to a given encoding.
    init?(CString: UnsafePointer<CChar>, encoding enc: NSStringEncoding)

    /// *[Foundation]* Produces a string created by copying the data from a given
    /// C array of UTF8-encoded bytes.
    init?(UTF8String bytes: UnsafePointer<CChar>)

    /// *[Foundation]* Returns a Boolean value that indicates whether the
    /// `String` can be converted to a given encoding without loss of
    /// information.
    func canBeConvertedToEncoding(encoding: NSStringEncoding) -> Bool

    /// *[Foundation]* Produce a string with the first character from each word changed
    /// to the corresponding uppercase value.
    var capitalizedString: String { get }

    /// *[Foundation]* Returns a capitalized representation of the `String`
    /// using the specified locale.
    func capitalizedStringWithLocale(locale: NSLocale?) -> String

    /// *[Foundation]* Returns the result of invoking `compare:options:` with
    /// `NSCaseInsensitiveSearch` as the only option.
    func caseInsensitiveCompare(aString: String) -> NSComparisonResult

    /// *[Foundation]* Returns a string containing characters the `String` and a
    /// given string have in common, starting from the beginning of each
    /// up to the first characters that aren’t equivalent.
    func commonPrefixWithString(aString: String, options: NSStringCompareOptions) -> String

    /// *[Foundation]* Compares the string using the specified options and
    /// returns the lexical ordering for the range.
    func compare(aString: String, options mask: NSStringCompareOptions = default, range: Range<String.Index>? = default, locale: NSLocale? = default) -> NSComparisonResult

    /// *[Foundation]* Interprets the `String` as a path in the file system and
    /// attempts to perform filename completion, returning a numeric
    /// value that indicates whether a match was possible, and by
    /// reference the longest path that matches the `String`.
    /// Returns the actual number of matching paths.
    func completePathIntoString(_ outputName: UnsafeMutablePointer<String> = default, caseSensitive: Bool, matchesIntoArray: UnsafeMutablePointer<[String]> = default, filterTypes: [String]? = default) -> Int

    /// *[Foundation]* Returns an array containing substrings from the `String`
    /// that have been divided by characters in a given set.
    func componentsSeparatedByCharactersInSet(separator: NSCharacterSet) -> [String]

    /// *[Foundation]* Returns an array containing substrings from the `String`
    /// that have been divided by a given separator.
    func componentsSeparatedByString(separator: String) -> [String]

    /// *[Foundation]* Returns a representation of the `String` as a C string
    /// using a given encoding.
    func cStringUsingEncoding(encoding: NSStringEncoding) -> [CChar]?

    /// *[Foundation]* Returns an `NSData` object containing a representation of
    /// the `String` encoded using a given encoding.
    func dataUsingEncoding(encoding: NSStringEncoding, allowLossyConversion: Bool = default) -> NSData?

    /// *[Foundation]* Returns a string made by normalizing the `String`’s
    /// contents using Form D.
    var decomposedStringWithCanonicalMapping: String { get }

    /// *[Foundation]* Returns a string made by normalizing the `String`’s
    /// contents using Form KD.
    var decomposedStringWithCompatibilityMapping: String { get }

    /// *[Foundation]* Enumerates all the lines in a string.
    func enumerateLines(body: (line: String, inout stop: Bool) -> ())

    /// *[Foundation]* Performs linguistic analysis on the specified string by
    /// enumerating the specific range of the string, providing the
    /// Block with the located tags.
    func enumerateLinguisticTagsInRange(range: Range<String.Index>, scheme tagScheme: String, options opts: NSLinguisticTaggerOptions, orthography: NSOrthography?, _ body: (String, Range<String.Index>, Range<String.Index>, inout Bool) -> ())

    /// *[Foundation]* Enumerates the substrings of the specified type in the
    /// specified range of the string.
    func enumerateSubstringsInRange(range: Range<String.Index>, options opts: NSStringEnumerationOptions, _ body: (substring: String, substringRange: Range<String.Index>, enclosingRange: Range<String.Index>, inout Bool) -> ())

    /// *[Foundation]* Returns the fastest encoding to which the `String` may be
    /// converted without loss of information.
    var fastestEncoding: NSStringEncoding { get }

    /// *[Foundation]* Returns a file system-specific representation of the `String`.
    func fileSystemRepresentation() -> [CChar]

    /// *[Foundation]* Gets a given range of characters as bytes in a specified encoding.
    /// Note: will get a maximum of `min(buffer.count, maxLength)` bytes.
    func getBytes(inout buffer: [UInt8], maxLength: Int, usedLength: UnsafeMutablePointer<Int>, encoding: NSStringEncoding, options: NSStringEncodingConversionOptions, range: Range<String.Index>, remainingRange: UnsafeMutablePointer<Range<String.Index>>) -> Bool

    /// *[Foundation]* Converts the `String`’s content to a given encoding and
    /// stores them in a buffer. Note: will store a maximum of
    /// `min(buffer.count, maxLength)` bytes.
    func getCString(inout buffer: [CChar], maxLength: Int, encoding: NSStringEncoding) -> Bool

    /// *[Foundation]* Interprets the `String` as a system-independent path and
    /// fills a buffer with a C-string in a format and encoding suitable
    /// for use with file-system calls. Note: will store a maximum of
    /// `min(buffer.count, maxLength)` bytes.
    func getFileSystemRepresentation(inout buffer: [CChar], maxLength: Int) -> Bool

    /// *[Foundation]* Returns by reference the beginning of the first line and
    /// the end of the last line touched by the given range.
    func getLineStart(start: UnsafeMutablePointer<String.Index>, end: UnsafeMutablePointer<String.Index>, contentsEnd: UnsafeMutablePointer<String.Index>, forRange: Range<String.Index>)

    /// *[Foundation]* Returns by reference the beginning of the first paragraph
    /// and the end of the last paragraph touched by the given range.
    func getParagraphStart(start: UnsafeMutablePointer<String.Index>, end: UnsafeMutablePointer<String.Index>, contentsEnd: UnsafeMutablePointer<String.Index>, forRange: Range<String.Index>)

    /// *[Foundation]* An unsigned integer that can be used as a hash table address.
    var hash: Int { get }

    /// *[Foundation]* Produces an initialized `NSString` object equivalent to the given
    /// `bytes` interpreted in the given `encoding`.
    init?<S : SequenceType where UInt8 == UInt8>(bytes: S, encoding: NSStringEncoding)

    /// *[Foundation]* Produces an initialized `String` object that contains a
    /// given number of bytes from a given buffer of bytes interpreted
    /// in a given encoding, and optionally frees the buffer.  WARNING:
    /// this initializer is not memory-safe!
    init?(bytesNoCopy bytes: UnsafeMutablePointer<Void>, length: Int, encoding: NSStringEncoding, freeWhenDone flag: Bool)

    /// *[Foundation]* Returns an initialized `String` object that contains a
    /// given number of characters from a given array of Unicode
    /// characters.
    init(utf16CodeUnits: UnsafePointer<unichar>, count: Int)

    /// *[Foundation]* Returns an initialized `String` object that contains a given
    /// number of characters from a given array of UTF-16 Code Units
    init(utf16CodeUnitsNoCopy: UnsafePointer<unichar>, count: Int, freeWhenDone flag: Bool)

    /// *[Foundation]* Returns a `String` object initialized by using a given
    /// format string as a template into which the remaining argument
    /// values are substituted.
    init(format: String, _ arguments: CVarArgType...)

    /// *[Foundation]* Returns a `String` object initialized by using a given
    /// format string as a template into which the remaining argument
    /// values are substituted according to the user’s default locale.
    init(format: String, arguments: [CVarArgType])

    /// *[Foundation]* Returns a `String` object initialized by using a given
    /// format string as a template into which the remaining argument
    /// values are substituted according to given locale information.
    init(format: String, locale: NSLocale?, _ args: CVarArgType...)

    /// *[Foundation]* Returns a `String` object initialized by using a given
    /// format string as a template into which the remaining argument
    /// values are substituted according to given locale information.
    init(format: String, locale: NSLocale?, arguments: [CVarArgType])

    /// *[Foundation]* Returns the last path component of the `String`.
    var lastPathComponent: String { get }

    /// *[Foundation]* Returns the number of Unicode characters in the `String`.
    var utf16Count: Int { get }

    /// *[Foundation]* Returns the number of bytes required to store the
    /// `String` in a given encoding.
    func lengthOfBytesUsingEncoding(encoding: NSStringEncoding) -> Int

    /// *[Foundation]* Returns the range of characters representing the line or lines
    /// containing a given range.
    func lineRangeForRange(aRange: Range<String.Index>) -> Range<String.Index>

    /// *[Foundation]* Returns an array of linguistic tags for the specified
    /// range and requested tags within the receiving string.
    func linguisticTagsInRange(range: Range<String.Index>, scheme tagScheme: String, options opts: NSLinguisticTaggerOptions = default, orthography: NSOrthography? = default, tokenRanges: UnsafeMutablePointer<[Range<String.Index>]> = default) -> [String]

    /// *[Foundation]* Compares the string and a given string using a
    /// case-insensitive, localized, comparison.
    func localizedCaseInsensitiveCompare(aString: String) -> NSComparisonResult

    /// *[Foundation]* Compares the string and a given string using a localized
    /// comparison.
    func localizedCompare(aString: String) -> NSComparisonResult

    /// *[Foundation]* Compares strings as sorted by the Finder.
    func localizedStandardCompare(string: String) -> NSComparisonResult

    /// *[Foundation]* Returns a version of the string with all letters
    /// converted to lowercase, taking into account the specified
    /// locale.
    func lowercaseStringWithLocale(locale: NSLocale) -> String

    /// *[Foundation]* Returns the maximum number of bytes needed to store the
    /// `String` in a given encoding.
    func maximumLengthOfBytesUsingEncoding(encoding: NSStringEncoding) -> Int

    /// *[Foundation]* Returns the range of characters representing the
    /// paragraph or paragraphs containing a given range.
    func paragraphRangeForRange(aRange: Range<String.Index>) -> Range<String.Index>

    /// *[Foundation]* Returns an array of NSString objects containing, in
    /// order, each path component of the `String`.
    var pathComponents: [String] { get }

    /// *[Foundation]* Interprets the `String` as a path and returns the
    /// `String`’s extension, if any.
    var pathExtension: String { get }

    /// *[Foundation]* Returns a string made by normalizing the `String`’s
    /// contents using Form C.
    var precomposedStringWithCanonicalMapping: String { get }

    /// *[Foundation]* Returns a string made by normalizing the `String`’s
    /// contents using Form KC.
    var precomposedStringWithCompatibilityMapping: String { get }

    /// *[Foundation]* Parses the `String` as a text representation of a
    /// property list, returning an NSString, NSData, NSArray, or
    /// NSDictionary object, according to the topmost element.
    func propertyList() -> AnyObject

    /// *[Foundation]* Returns a dictionary object initialized with the keys and
    /// values found in the `String`.
    func propertyListFromStringsFileFormat() -> [String : String]

    /// *[Foundation]* Finds and returns the range in the `String` of the first
    /// character from a given character set found in a given range with
    /// given options.
    func rangeOfCharacterFromSet(aSet: NSCharacterSet, options mask: NSStringCompareOptions = default, range aRange: Range<String.Index>? = default) -> Range<String.Index>?

    /// *[Foundation]* Returns the range in the `String` of the composed
    /// character sequence located at a given index.
    func rangeOfComposedCharacterSequenceAtIndex(anIndex: String.Index) -> Range<String.Index>

    /// *[Foundation]* Returns the range in the string of the composed character
    /// sequences for a given range.
    func rangeOfComposedCharacterSequencesForRange(range: Range<String.Index>) -> Range<String.Index>

    /// *[Foundation]* Finds and returns the range of the first occurrence of a
    /// given string within a given range of the `String`, subject to
    /// given options, using the specified locale, if any.
    func rangeOfString(aString: String, options mask: NSStringCompareOptions = default, range searchRange: Range<String.Index>? = default, locale: NSLocale? = default) -> Range<String.Index>?

    /// *[Foundation]* Returns the smallest encoding to which the `String` can
    /// be converted without loss of information.
    var smallestEncoding: NSStringEncoding { get }

    /// *[Foundation]* Returns a new string that replaces the current home
    /// directory portion of the current path with a tilde (`~`)
    /// character.
    var stringByAbbreviatingWithTildeInPath: String { get }

    /// *[Foundation]* Returns a new string made from the `String` by replacing
    /// all characters not in the specified set with percent encoded
    /// characters.
    func stringByAddingPercentEncodingWithAllowedCharacters(allowedCharacters: NSCharacterSet) -> String?

    /// *[Foundation]* Returns a representation of the `String` using a given
    /// encoding to determine the percent escapes necessary to convert
    /// the `String` into a legal URL string.
    func stringByAddingPercentEscapesUsingEncoding(encoding: NSStringEncoding) -> String?

    /// *[Foundation]* Returns a string made by appending to the `String` a
    /// string constructed from a given format string and the following
    /// arguments.
    func stringByAppendingFormat(format: String, _ arguments: CVarArgType...) -> String

    /// *[Foundation]* Returns a new string made by appending to the `String` a given string.
    func stringByAppendingPathComponent(aString: String) -> String

    /// *[Foundation]* Returns a new string made by appending to the `String` an
    /// extension separator followed by a given extension.
    func stringByAppendingPathExtension(ext: String) -> String?

    /// *[Foundation]* Returns a new string made by appending a given string to
    /// the `String`.
    func stringByAppendingString(aString: String) -> String

    /// *[Foundation]* Returns a new string made by deleting the last path
    /// component from the `String`, along with any final path
    /// separator.
    var stringByDeletingLastPathComponent: String { get }

    /// *[Foundation]* Returns a new string made by deleting the extension (if
    /// any, and only the last) from the `String`.
    var stringByDeletingPathExtension: String { get }

    /// *[Foundation]* Returns a new string made by expanding the initial
    /// component of the `String` to its full path value.
    var stringByExpandingTildeInPath: String { get }

    /// *[Foundation]* Returns a string with the given character folding options
    /// applied.
    func stringByFoldingWithOptions(options: NSStringCompareOptions, locale: NSLocale) -> String

    /// *[Foundation]* Returns a new string formed from the `String` by either
    /// removing characters from the end, or by appending as many
    /// occurrences as necessary of a given pad string.
    func stringByPaddingToLength(newLength: Int, withString padString: String, startingAtIndex padIndex: Int) -> String

    /// *[Foundation]* Returns a new string made from the `String` by replacing
    /// all percent encoded sequences with the matching UTF-8
    /// characters.
    var stringByRemovingPercentEncoding: String? { get }

    /// *[Foundation]* Returns a new string in which the characters in a
    /// specified range of the `String` are replaced by a given string.
    func stringByReplacingCharactersInRange(range: Range<String.Index>, withString replacement: String) -> String

    /// *[Foundation]* Returns a new string in which all occurrences of a target
    /// string in a specified range of the `String` are replaced by
    /// another given string.
    func stringByReplacingOccurrencesOfString(target: String, withString replacement: String, options: NSStringCompareOptions = default, range searchRange: Range<String.Index>? = default) -> String

    /// *[Foundation]* Returns a new string made by replacing in the `String`
    /// all percent escapes with the matching characters as determined
    /// by a given encoding.
    func stringByReplacingPercentEscapesUsingEncoding(encoding: NSStringEncoding) -> String?

    /// *[Foundation]* Returns a new string made from the `String` by resolving
    /// all symbolic links and standardizing path.
    var stringByResolvingSymlinksInPath: String { get }

    /// *[Foundation]* Returns a new string made by removing extraneous path
    /// components from the `String`.
    var stringByStandardizingPath: String { get }

    /// *[Foundation]* Returns a new string made by removing from both ends of
    /// the `String` characters contained in a given character set.
    func stringByTrimmingCharactersInSet(set: NSCharacterSet) -> String

    /// *[Foundation]* Returns an array of strings made by separately appending
    /// to the `String` each string in in a given array.
    func stringsByAppendingPaths(paths: [String]) -> [String]

    /// *[Foundation]* Returns a new string containing the characters of the
    /// `String` from the one at a given index to the end.
    func substringFromIndex(index: String.Index) -> String

    /// *[Foundation]* Returns a new string containing the characters of the
    /// `String` up to, but not including, the one at a given index.
    func substringToIndex(index: String.Index) -> String

    /// *[Foundation]* Returns a string object containing the characters of the
    /// `String` that lie within a given range.
    func substringWithRange(aRange: Range<String.Index>) -> String

    /// *[Foundation]* Returns a version of the string with all letters
    /// converted to uppercase, taking into account the specified
    /// locale.
    func uppercaseStringWithLocale(locale: NSLocale) -> String

    /// *[Foundation]* Writes the contents of the `String` to a file at a given
    /// path using a given encoding.
    func writeToFile(path: String, atomically useAuxiliaryFile: Bool, encoding enc: NSStringEncoding, error: NSErrorPointer = default) -> Bool

    /// *[Foundation]* Writes the contents of the `String` to the URL specified
    /// by url using the specified encoding.
    func writeToURL(url: NSURL, atomically useAuxiliaryFile: Bool, encoding enc: NSStringEncoding, error: NSErrorPointer = default) -> Bool
}
