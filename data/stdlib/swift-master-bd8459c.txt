infix operator %= {
    associativity right
    precedence 90
    assignment
}

infix operator >>= {
    associativity right
    precedence 90
    assignment
}

infix operator += {
    associativity right
    precedence 90
    assignment
}

infix operator -= {
    associativity right
    precedence 90
    assignment
}

infix operator >> {
    associativity none
    precedence 160
}

infix operator ... {
    associativity none
    precedence 135
}

infix operator /= {
    associativity right
    precedence 90
    assignment
}

infix operator && {
    associativity left
    precedence 120
}

infix operator &* {
    associativity left
    precedence 150
}

infix operator | {
    associativity left
    precedence 140
}

infix operator &+ {
    associativity left
    precedence 140
}

infix operator &- {
    associativity left
    precedence 140
}

infix operator === {
    associativity none
    precedence 130
}

infix operator < {
    associativity none
    precedence 130
}

infix operator ~> {
    associativity left
    precedence 255
}

infix operator ..< {
    associativity none
    precedence 135
}

infix operator >= {
    associativity none
    precedence 130
}

infix operator == {
    associativity none
    precedence 130
}

infix operator ^= {
    associativity right
    precedence 90
    assignment
}

infix operator ?? {
    associativity right
    precedence 131
}

infix operator ^ {
    associativity left
    precedence 140
}

infix operator / {
    associativity left
    precedence 150
}

infix operator !== {
    associativity none
    precedence 130
}

infix operator ~= {
    associativity none
    precedence 130
}

infix operator &= {
    associativity right
    precedence 90
    assignment
}

infix operator % {
    associativity left
    precedence 150
}

infix operator & {
    associativity left
    precedence 150
}

infix operator <<= {
    associativity right
    precedence 90
    assignment
}

infix operator *= {
    associativity right
    precedence 90
    assignment
}

infix operator * {
    associativity left
    precedence 150
}

infix operator > {
    associativity none
    precedence 130
}

infix operator != {
    associativity none
    precedence 130
}

infix operator + {
    associativity left
    precedence 140
}

infix operator || {
    associativity left
    precedence 110
}

infix operator - {
    associativity left
    precedence 140
}

infix operator <= {
    associativity none
    precedence 130
}

infix operator |= {
    associativity right
    precedence 90
    assignment
}

infix operator << {
    associativity none
    precedence 160
}

prefix operator - {
}

prefix operator + {
}

prefix operator ~ {
}

prefix operator ++ {
}

prefix operator -- {
}

prefix operator ! {
}

postfix operator -- {
}

postfix operator ++ {
}

/// Returns the result of inverting `a`'s logic value.
prefix public func !<T : Boolean>(a: T) -> Bool

prefix public func !(a: Bool) -> Bool

/// Returns `true` if the arrays do not contain the same elements.
public func !=<Element : Equatable>(lhs: [Element], rhs: [Element]) -> Bool

public func !=(lhs: UInt64, rhs: UInt64) -> Bool

public func !=(lhs: Int64, rhs: Int64) -> Bool

public func !=(lhs: Int32, rhs: Int32) -> Bool

public func !=(lhs: UInt, rhs: UInt) -> Bool

public func !=(lhs: Int, rhs: Int) -> Bool

public func !=(lhs: Float, rhs: Float) -> Bool

public func !=(lhs: UInt32, rhs: UInt32) -> Bool

/// Returns `true` if the arrays do not contain the same elements.
public func !=<Element : Equatable>(lhs: ContiguousArray<Element>, rhs: ContiguousArray<Element>) -> Bool

/// Returns `true` if the arrays do not contain the same elements.
public func !=<Element : Equatable>(lhs: ArraySlice<Element>, rhs: ArraySlice<Element>) -> Bool

public func !=(lhs: Float80, rhs: Float80) -> Bool

/// Returns `true` iff any component of `lhs` is not equal to the corresponding
/// component of `rhs`.
public func !=<A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable, F : Equatable>(lhs: (A, B, C, D, E, F), rhs: (A, B, C, D, E, F)) -> Bool

public func !=(lhs: Int16, rhs: Int16) -> Bool

public func !=(lhs: UInt16, rhs: UInt16) -> Bool

/// Returns `true` iff any component of `lhs` is not equal to the corresponding
/// component of `rhs`.
public func !=<A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable>(lhs: (A, B, C, D, E), rhs: (A, B, C, D, E)) -> Bool

/// Returns `false` iff `t0` is identical to `t1`; i.e. if they are both
/// `nil` or they both represent the same type.
public func !=(t0: Swift.Any.Type?, t1: Swift.Any.Type?) -> Bool

/// Returns `true` iff any component of `lhs` is not equal to the corresponding
/// component of `rhs`.
public func !=<A : Equatable, B : Equatable, C : Equatable, D : Equatable>(lhs: (A, B, C, D), rhs: (A, B, C, D)) -> Bool

/// Returns `true` iff `lhs.rawValue != rhs.rawValue`.
public func !=<T : RawRepresentable where T.RawValue : Equatable>(lhs: T, rhs: T) -> Bool

public func !=(lhs: Int8, rhs: Int8) -> Bool

/// Returns `true` iff any component of `lhs` is not equal to the corresponding
/// component of `rhs`.
public func !=<A : Equatable, B : Equatable, C : Equatable>(lhs: (A, B, C), rhs: (A, B, C)) -> Bool

/// Returns `true` iff any component of `lhs` is not equal to the corresponding
/// component of `rhs`.
public func !=<A : Equatable, B : Equatable>(lhs: (A, B), rhs: (A, B)) -> Bool

public func !=(lhs: Double, rhs: Double) -> Bool

/// Returns `true` iff `lhs.rawValue != rhs.rawValue`.
public func !=<T : Equatable where T : RawRepresentable, T.RawValue : Equatable>(lhs: T, rhs: T) -> Bool

public func !=<Key : Equatable, Value : Equatable>(lhs: [Key : Value], rhs: [Key : Value]) -> Bool

public func !=<T : Equatable>(lhs: T?, rhs: T?) -> Bool

public func !=<T : Equatable>(lhs: T, rhs: T) -> Bool

public func !=<T>(lhs: _OptionalNilComparisonType, rhs: T?) -> Bool

public func !=(lhs: UInt8, rhs: UInt8) -> Bool

public func !=<T>(lhs: T?, rhs: _OptionalNilComparisonType) -> Bool

/// Returns `false` iff `lhs` and `rhs` store the same underlying collection.
public func !==<L : AnyCollectionProtocol, R : AnyCollectionProtocol>(lhs: L, rhs: R) -> Bool

public func !==(lhs: AnyObject?, rhs: AnyObject?) -> Bool

public func %(lhs: Double, rhs: Double) -> Double

public func %(lhs: UInt8, rhs: UInt8) -> UInt8

public func %(lhs: Int8, rhs: Int8) -> Int8

public func %(lhs: UInt16, rhs: UInt16) -> UInt16

public func %(lhs: Int16, rhs: Int16) -> Int16

public func %(lhs: UInt32, rhs: UInt32) -> UInt32

public func %(lhs: Int32, rhs: Int32) -> Int32

public func %(lhs: UInt64, rhs: UInt64) -> UInt64

public func %(lhs: Int64, rhs: Int64) -> Int64

public func %(lhs: UInt, rhs: UInt) -> UInt

public func %(lhs: Float80, rhs: Float80) -> Float80

/// Divides `lhs` and `rhs`, returning the remainder and trapping in case of
/// arithmetic overflow (except in -Ounchecked builds).
public func %<T : _IntegerArithmetic>(lhs: T, rhs: T) -> T

public func %(lhs: Float, rhs: Float) -> Float

public func %(lhs: Int, rhs: Int) -> Int

public func %=(lhs: inout Double, rhs: Double)

public func %=(lhs: inout Float, rhs: Float)

public func %=(lhs: inout Float80, rhs: Float80)

/// Divides `lhs` and `rhs` and stores the remainder in `lhs`, trapping in
/// case of arithmetic overflow (except in -Ounchecked builds).
public func %=<T : _IntegerArithmetic>(lhs: inout T, rhs: T)

public func &(lhs: UInt64, rhs: UInt64) -> UInt64

public func &(lhs: Int32, rhs: Int32) -> Int32

public func &(lhs: Int64, rhs: Int64) -> Int64

public func &(lhs: UInt, rhs: UInt) -> UInt

public func &(lhs: Int, rhs: Int) -> Int

public func &(lhs: UInt8, rhs: UInt8) -> UInt8

public func &(lhs: Int8, rhs: Int8) -> Int8

public func &(lhs: UInt16, rhs: UInt16) -> UInt16

public func &(lhs: Int16, rhs: Int16) -> Int16

public func &(lhs: UInt32, rhs: UInt32) -> UInt32

/// If `lhs` is `false`, return it.  Otherwise, evaluate `rhs` and
/// return its `boolValue`.
public func &&<T : Boolean, U : Boolean>(lhs: T, @autoclosure rhs: () throws -> U) rethrows -> Bool

public func &&<T : Boolean>(lhs: T, @autoclosure rhs: () throws -> Bool) rethrows -> Bool

/// Multiplies `lhs` and `rhs`, silently discarding any overflow.
public func &*<T : _IntegerArithmetic>(lhs: T, rhs: T) -> T

/// Adds `lhs` and `rhs`, silently discarding any overflow.
public func &+<T : _IntegerArithmetic>(lhs: T, rhs: T) -> T

/// Subtracts `lhs` and `rhs`, silently discarding any overflow.
public func &-<T : _IntegerArithmetic>(lhs: T, rhs: T) -> T

public func &=<T : BitwiseOperations>(lhs: inout T, rhs: T)

public func &=(lhs: inout Int, rhs: Int)

public func &=(lhs: inout UInt, rhs: UInt)

public func &=(lhs: inout Int64, rhs: Int64)

public func &=(lhs: inout UInt64, rhs: UInt64)

public func &=(lhs: inout Int32, rhs: Int32)

public func &=(lhs: inout UInt32, rhs: UInt32)

public func &=(lhs: inout Int16, rhs: Int16)

public func &=(lhs: inout UInt16, rhs: UInt16)

public func &=(lhs: inout Int8, rhs: Int8)

public func &=(lhs: inout UInt8, rhs: UInt8)

public func *(lhs: Int64, rhs: Int64) -> Int64

public func *(lhs: UInt, rhs: UInt) -> UInt

public func *(lhs: Int, rhs: Int) -> Int

public func *(lhs: Float, rhs: Float) -> Float

public func *(lhs: Double, rhs: Double) -> Double

public func *(lhs: Float80, rhs: Float80) -> Float80

/// Multiplies `lhs` and `rhs`, returning the result and trapping in case of
/// arithmetic overflow (except in -Ounchecked builds).
public func *<T : _IntegerArithmetic>(lhs: T, rhs: T) -> T

public func *(lhs: UInt64, rhs: UInt64) -> UInt64

public func *(lhs: Int32, rhs: Int32) -> Int32

public func *(lhs: UInt32, rhs: UInt32) -> UInt32

public func *(lhs: Int16, rhs: Int16) -> Int16

public func *(lhs: UInt16, rhs: UInt16) -> UInt16

public func *(lhs: Int8, rhs: Int8) -> Int8

public func *(lhs: UInt8, rhs: UInt8) -> UInt8

/// Multiplies `lhs` and `rhs` and stores the result in `lhs`, trapping in
/// case of arithmetic overflow (except in -Ounchecked builds).
public func *=<T : _IntegerArithmetic>(lhs: inout T, rhs: T)

public func *=(lhs: inout Float80, rhs: Float80)

public func *=(lhs: inout Double, rhs: Double)

public func *=(lhs: inout Float, rhs: Float)

public func *=(lhs: inout Int, rhs: Int)

public func *=(lhs: inout UInt8, rhs: UInt8)

public func *=(lhs: inout Int8, rhs: Int8)

public func *=(lhs: inout UInt16, rhs: UInt16)

public func *=(lhs: inout Int16, rhs: Int16)

public func *=(lhs: inout UInt32, rhs: UInt32)

public func *=(lhs: inout Int32, rhs: Int32)

public func *=(lhs: inout UInt64, rhs: UInt64)

public func *=(lhs: inout Int64, rhs: Int64)

public func *=(lhs: inout UInt, rhs: UInt)

public func +<Pointee>(lhs: UnsafeMutablePointer<Pointee>, rhs: Int) -> UnsafeMutablePointer<Pointee>

public func +<Pointee>(lhs: Int, rhs: UnsafeMutablePointer<Pointee>) -> UnsafeMutablePointer<Pointee>

public func +<Pointee>(lhs: UnsafePointer<Pointee>, rhs: Int) -> UnsafePointer<Pointee>

public func +<Pointee>(lhs: Int, rhs: UnsafePointer<Pointee>) -> UnsafePointer<Pointee>

public func +(lhs: Float80, rhs: Float80) -> Float80

public func +(lhs: String, rhs: String) -> String

public func +<T : UnsignedInteger>(lhs: T._DisallowMixedSignArithmetic, rhs: T) -> T

public func +<T : UnsignedInteger>(lhs: T, rhs: T._DisallowMixedSignArithmetic) -> T

public func +<T : Strideable>(lhs: T.Stride, rhs: T) -> T

public func +<T : Strideable>(lhs: T, rhs: T.Stride) -> T

public func +<RRC1 : RangeReplaceableCollection, RRC2 : RangeReplaceableCollection where RRC1.Iterator.Element == RRC2.Iterator.Element>(lhs: RRC1, rhs: RRC2) -> RRC1

public func +<C : RangeReplaceableCollection, S : Sequence where S.Iterator.Element == C.Iterator.Element>(lhs: S, rhs: C) -> C

public func +<C : RangeReplaceableCollection, S : Sequence where S.Iterator.Element == C.Iterator.Element>(lhs: C, rhs: S) -> C

prefix public func +<T : SignedNumber>(x: T) -> T

/// Adds `lhs` and `rhs`, returning the result and trapping in case of
/// arithmetic overflow (except in -Ounchecked builds).
public func +<T : _IntegerArithmetic>(lhs: T, rhs: T) -> T

public func +(lhs: UInt8, rhs: UInt8) -> UInt8

public func +(lhs: Int16, rhs: Int16) -> Int16

public func +(lhs: UInt16, rhs: UInt16) -> UInt16

public func +(lhs: Int8, rhs: Int8) -> Int8

public func +(lhs: Int32, rhs: Int32) -> Int32

public func +(lhs: UInt64, rhs: UInt64) -> UInt64

public func +(lhs: Int64, rhs: Int64) -> Int64

public func +(lhs: UInt, rhs: UInt) -> UInt

public func +(lhs: Int, rhs: Int) -> Int

prefix public func +(x: Float) -> Float

public func +(lhs: Float, rhs: Float) -> Float

prefix public func +(x: Double) -> Double

public func +(lhs: Double, rhs: Double) -> Double

prefix public func +(x: Float80) -> Float80

public func +(lhs: UInt32, rhs: UInt32) -> UInt32

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func ++(x: inout Int64) -> Int64

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func ++(x: inout Int64) -> Int64

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func ++(x: inout UInt) -> UInt

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func ++(x: inout UInt) -> UInt

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func ++(x: inout Int) -> Int

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func ++(x: inout Int) -> Int

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func ++(rhs: inout Float) -> Float

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func ++(lhs: inout Float) -> Float

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func ++(rhs: inout Double) -> Double

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func ++(lhs: inout Double) -> Double

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func ++(rhs: inout Float80) -> Float80

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func ++(lhs: inout Float80) -> Float80

/// Replace `i` with its `successor()` and return the updated value of
/// `i`.
@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func ++<T : _Incrementable>(i: inout T) -> T

/// Replace `i` with its `successor()` and return the original
/// value of `i`.
@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func ++<T : _Incrementable>(i: inout T) -> T

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func ++(x: inout UInt64) -> UInt64

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func ++(x: inout Int32) -> Int32

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func ++(x: inout Int32) -> Int32

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func ++(x: inout UInt32) -> UInt32

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func ++(x: inout UInt32) -> UInt32

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func ++(x: inout Int16) -> Int16

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func ++(x: inout Int16) -> Int16

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func ++(x: inout UInt16) -> UInt16

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func ++(x: inout UInt16) -> UInt16

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func ++(x: inout Int8) -> Int8

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func ++(x: inout Int8) -> Int8

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func ++(x: inout UInt8) -> UInt8

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func ++(x: inout UInt8) -> UInt8

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func ++(x: inout UInt64) -> UInt64

/// Append the contents of `rhs` to `lhs`.
public func +=<Element, S : Sequence where S.Iterator.Element == Element>(lhs: inout [Element], rhs: S)

/// Append the contents of `rhs` to `lhs`.
public func +=<Element, C : Collection where C.Iterator.Element == Element>(lhs: inout [Element], rhs: C)

/// Append the elements of `rhs` to `lhs`.
public func +=<Element, C : Collection where C.Iterator.Element == Element>(lhs: inout _ContiguousArrayBuffer<Element>, rhs: C)

public func +=(lhs: inout UInt8, rhs: UInt8)

public func +=(lhs: inout Int8, rhs: Int8)

public func +=(lhs: inout UInt16, rhs: UInt16)

public func +=(lhs: inout Int16, rhs: Int16)

public func +=(lhs: inout UInt32, rhs: UInt32)

public func +=(lhs: inout Int32, rhs: Int32)

public func +=(lhs: inout UInt64, rhs: UInt64)

public func +=(lhs: inout Int64, rhs: Int64)

public func +=(lhs: inout UInt, rhs: UInt)

public func +=(lhs: inout Int, rhs: Int)

public func +=(lhs: inout Float, rhs: Float)

public func +=(lhs: inout Double, rhs: Double)

public func +=(lhs: inout Float80, rhs: Float80)

/// Adds `lhs` and `rhs` and stores the result in `lhs`, trapping in
/// case of arithmetic overflow (except in -Ounchecked builds).
public func +=<T : _IntegerArithmetic>(lhs: inout T, rhs: T)

public func +=<T : Strideable>(lhs: inout T, rhs: T.Stride)

public func +=<T : UnsignedInteger>(lhs: inout T, rhs: T._DisallowMixedSignArithmetic)

public func +=(lhs: inout String, rhs: String)

public func +=<Pointee>(lhs: inout UnsafeMutablePointer<Pointee>, rhs: Int)

public func +=<Pointee>(lhs: inout UnsafePointer<Pointee>, rhs: Int)

/// Append the contents of `rhs` to `lhs`.
public func +=<Element, C : Collection where C.Iterator.Element == Element>(lhs: inout ArraySlice<Element>, rhs: C)

/// Append the contents of `rhs` to `lhs`.
public func +=<Element, S : Sequence where S.Iterator.Element == Element>(lhs: inout ArraySlice<Element>, rhs: S)

/// Append the contents of `rhs` to `lhs`.
public func +=<Element, S : Sequence where S.Iterator.Element == Element>(lhs: inout ContiguousArray<Element>, rhs: S)

/// Append the contents of `rhs` to `lhs`.
public func +=<Element, C : Collection where C.Iterator.Element == Element>(lhs: inout ContiguousArray<Element>, rhs: C)

public func -(lhs: UInt32, rhs: UInt32) -> UInt32

public func -(lhs: Int16, rhs: Int16) -> Int16

public func -(lhs: UInt16, rhs: UInt16) -> UInt16

public func -(lhs: Int8, rhs: Int8) -> Int8

public func -(lhs: Int32, rhs: Int32) -> Int32

public func -(lhs: UInt8, rhs: UInt8) -> UInt8

public func -(lhs: Int64, rhs: Int64) -> Int64

public func -(lhs: UInt, rhs: UInt) -> UInt

public func -(lhs: Int, rhs: Int) -> Int

prefix public func -(x: Float) -> Float

public func -(lhs: Float, rhs: Float) -> Float

prefix public func -(x: Double) -> Double

public func -(lhs: Double, rhs: Double) -> Double

prefix public func -(x: Float80) -> Float80

public func -(lhs: Float80, rhs: Float80) -> Float80

/// Subtracts `lhs` and `rhs`, returning the result and trapping in case of
/// arithmetic overflow (except in -Ounchecked builds).
public func -<T : _IntegerArithmetic>(lhs: T, rhs: T) -> T

prefix public func -<T : SignedNumber>(x: T) -> T

public func -<T : Strideable>(lhs: T, rhs: T.Stride) -> T

public func -<T : Strideable>(lhs: T, rhs: T) -> T.Stride

public func -<T : _DisallowMixedSignArithmetic>(lhs: T, rhs: T._DisallowMixedSignArithmetic) -> T

public func -<T : _DisallowMixedSignArithmetic>(lhs: T, rhs: T) -> T._DisallowMixedSignArithmetic

public func -<Pointee>(lhs: UnsafeMutablePointer<Pointee>, rhs: Int) -> UnsafeMutablePointer<Pointee>

public func -<Pointee>(lhs: UnsafeMutablePointer<Pointee>, rhs: UnsafeMutablePointer<Pointee>) -> Int

public func -<Pointee>(lhs: UnsafePointer<Pointee>, rhs: Int) -> UnsafePointer<Pointee>

public func -<Pointee>(lhs: UnsafePointer<Pointee>, rhs: UnsafePointer<Pointee>) -> Int

public func -(lhs: UInt64, rhs: UInt64) -> UInt64

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func --(x: inout Int8) -> Int8

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func --(x: inout Int8) -> Int8

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func --(x: inout UInt16) -> UInt16

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func --(x: inout UInt16) -> UInt16

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func --(x: inout Int16) -> Int16

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func --(x: inout Int16) -> Int16

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func --(x: inout UInt32) -> UInt32

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func --(x: inout UInt32) -> UInt32

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func --(x: inout Int32) -> Int32

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func --(x: inout Int32) -> Int32

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func --(x: inout UInt64) -> UInt64

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func --(x: inout UInt64) -> UInt64

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func --(x: inout Int64) -> Int64

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func --(x: inout Int64) -> Int64

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func --(x: inout UInt) -> UInt

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func --(x: inout UInt) -> UInt

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func --(x: inout Int) -> Int

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func --(x: inout Int) -> Int

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func --(rhs: inout Float) -> Float

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func --(lhs: inout Float) -> Float

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func --(rhs: inout Double) -> Double

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func --(x: inout UInt8) -> UInt8

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func --(rhs: inout Float80) -> Float80

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func --(lhs: inout Float80) -> Float80

/// Replace `i` with its `predecessor()` and return the updated value
/// of `i`.
@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func --<T : BidirectionalIndex>(i: inout T) -> T

/// Replace `i` with its `predecessor()` and return the original
/// value of `i`.
@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func --<T : BidirectionalIndex>(i: inout T) -> T

@available(*, deprecated, message: "it will be removed in Swift 3")
prefix public func --(x: inout UInt8) -> UInt8

@available(*, deprecated, message: "it will be removed in Swift 3")
postfix public func --(lhs: inout Double) -> Double

public func -=(lhs: inout Int8, rhs: Int8)

public func -=<T : UnsignedInteger>(lhs: inout T, rhs: T._DisallowMixedSignArithmetic)

public func -=<Pointee>(lhs: inout UnsafePointer<Pointee>, rhs: Int)

public func -=(lhs: inout UInt8, rhs: UInt8)

public func -=<Pointee>(lhs: inout UnsafeMutablePointer<Pointee>, rhs: Int)

public func -=(lhs: inout UInt16, rhs: UInt16)

public func -=(lhs: inout Int16, rhs: Int16)

public func -=(lhs: inout UInt32, rhs: UInt32)

public func -=(lhs: inout Int32, rhs: Int32)

public func -=(lhs: inout UInt64, rhs: UInt64)

public func -=(lhs: inout Int64, rhs: Int64)

public func -=(lhs: inout UInt, rhs: UInt)

public func -=(lhs: inout Int, rhs: Int)

public func -=(lhs: inout Float, rhs: Float)

public func -=(lhs: inout Double, rhs: Double)

public func -=(lhs: inout Float80, rhs: Float80)

/// Subtracts `lhs` and `rhs` and stores the result in `lhs`, trapping in
/// case of arithmetic overflow (except in -Ounchecked builds).
public func -=<T : _IntegerArithmetic>(lhs: inout T, rhs: T)

public func -=<T : Strideable>(lhs: inout T, rhs: T.Stride)

/// Forms a closed range that contains both `start` and `end`.
/// - Precondition: `start <= end`.
public func ...<Pos : ForwardIndex where Pos : Comparable>(start: Pos, end: Pos) -> Range<Pos>

/// Forms a closed range that contains both `minimum` and `maximum`.
public func ...<Pos : ForwardIndex>(minimum: Pos, maximum: Pos) -> Range<Pos>

/// Returns a closed interval from `start` through `end`.
public func ...<Bound : Comparable>(start: Bound, end: Bound) -> ClosedInterval<Bound>

/// Returns a half-open interval from `start` to `end`.
public func ..<<Bound : Comparable>(start: Bound, end: Bound) -> HalfOpenInterval<Bound>

/// Forms a half-open range that contains `minimum`, but not
/// `maximum`.
public func ..<<Pos : ForwardIndex>(minimum: Pos, maximum: Pos) -> Range<Pos>

/// Forms a half-open range that contains `start`, but not `end`.
///
/// - Precondition: `start <= end`.
public func ..<<Pos : ForwardIndex where Pos : Comparable>(start: Pos, end: Pos) -> Range<Pos>

public func /(lhs: UInt8, rhs: UInt8) -> UInt8

public func /(lhs: Int8, rhs: Int8) -> Int8

public func /(lhs: UInt16, rhs: UInt16) -> UInt16

public func /(lhs: Int16, rhs: Int16) -> Int16

public func /(lhs: UInt32, rhs: UInt32) -> UInt32

public func /(lhs: Int32, rhs: Int32) -> Int32

public func /(lhs: UInt64, rhs: UInt64) -> UInt64

public func /(lhs: Int64, rhs: Int64) -> Int64

public func /(lhs: UInt, rhs: UInt) -> UInt

public func /(lhs: Int, rhs: Int) -> Int

public func /(lhs: Float, rhs: Float) -> Float

public func /(lhs: Double, rhs: Double) -> Double

public func /(lhs: Float80, rhs: Float80) -> Float80

/// Divides `lhs` and `rhs`, returning the result and trapping in case of
/// arithmetic overflow (except in -Ounchecked builds).
public func /<T : _IntegerArithmetic>(lhs: T, rhs: T) -> T

/// Divides `lhs` and `rhs` and stores the result in `lhs`, trapping in
/// case of arithmetic overflow (except in -Ounchecked builds).
public func /=<T : _IntegerArithmetic>(lhs: inout T, rhs: T)

public func /=(lhs: inout Float80, rhs: Float80)

public func /=(lhs: inout Double, rhs: Double)

public func /=(lhs: inout Float, rhs: Float)

public func <(lhs: UInt32, rhs: UInt32) -> Bool

public func <(lhs: Int16, rhs: Int16) -> Bool

public func <(lhs: UInt16, rhs: UInt16) -> Bool

public func <(lhs: Int8, rhs: Int8) -> Bool

public func <(lhs: UInt8, rhs: UInt8) -> Bool

public func <(lhs: Character, rhs: Character) -> Bool

public func <(lhs: Int32, rhs: Int32) -> Bool

public func <(lhs: UInt64, rhs: UInt64) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `<` the second tuple iff `a1 < b1` or
/// (`a1 == b1` and `(a2, ..., aN) < (b2, ..., bN)`).
public func <<A : Comparable, B : Comparable, C : Comparable, D : Comparable, E : Comparable, F : Comparable>(lhs: (A, B, C, D, E, F), rhs: (A, B, C, D, E, F)) -> Bool

public func <(lhs: Int64, rhs: Int64) -> Bool

public func <(lhs: UInt, rhs: UInt) -> Bool

public func <(lhs: Int, rhs: Int) -> Bool

public func <(lhs: Float, rhs: Float) -> Bool

public func <(lhs: Double, rhs: Double) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `<` the second tuple iff `a1 < b1` or
/// (`a1 == b1` and `(a2, ..., aN) < (b2, ..., bN)`).
public func <<A : Comparable, B : Comparable, C : Comparable, D : Comparable, E : Comparable>(lhs: (A, B, C, D, E), rhs: (A, B, C, D, E)) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `<` the second tuple iff `a1 < b1` or
/// (`a1 == b1` and `(a2, ..., aN) < (b2, ..., bN)`).
public func <<A : Comparable, B : Comparable, C : Comparable, D : Comparable>(lhs: (A, B, C, D), rhs: (A, B, C, D)) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `<` the second tuple iff `a1 < b1` or
/// (`a1 == b1` and `(a2, ..., aN) < (b2, ..., bN)`).
public func <<A : Comparable, B : Comparable, C : Comparable>(lhs: (A, B, C), rhs: (A, B, C)) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `<` the second tuple iff `a1 < b1` or
/// (`a1 == b1` and `(a2, ..., aN) < (b2, ..., bN)`).
public func <<A : Comparable, B : Comparable>(lhs: (A, B), rhs: (A, B)) -> Bool

/// Lexicographic comparison of version components.
public func <(lhs: _SwiftNSOperatingSystemVersion, rhs: _SwiftNSOperatingSystemVersion) -> Bool

public func <<Pointee>(lhs: UnsafePointer<Pointee>, rhs: UnsafePointer<Pointee>) -> Bool

public func <<Pointee>(lhs: UnsafeMutablePointer<Pointee>, rhs: UnsafeMutablePointer<Pointee>) -> Bool

public func <(lhs: UnicodeScalar, rhs: UnicodeScalar) -> Bool

public func <(lhs: Float80, rhs: Float80) -> Bool

public func <<Element : Hashable>(lhs: SetIndex<Element>, rhs: SetIndex<Element>) -> Bool

public func <(lhs: String.UTF16View.Index, rhs: String.UTF16View.Index) -> Bool

public func <(lhs: String.UnicodeScalarView.Index, rhs: String.UnicodeScalarView.Index) -> Bool

public func <<Key : Hashable, Value>(lhs: DictionaryIndex<Key, Value>, rhs: DictionaryIndex<Key, Value>) -> Bool

public func <<T : Comparable>(lhs: T?, rhs: T?) -> Bool

public func <(lhs: ObjectIdentifier, rhs: ObjectIdentifier) -> Bool

/// Compare two `Strideable`s.
public func <<T : Strideable>(x: T, y: T) -> Bool

public func <(lhs: String, rhs: String) -> Bool

public func <(lhs: Index, rhs: Index) -> Bool

public func <<(lhs: Int8, rhs: Int8) -> Int8

public func <<(lhs: UInt64, rhs: UInt64) -> UInt64

public func <<(lhs: UInt8, rhs: UInt8) -> UInt8

public func <<(lhs: UInt16, rhs: UInt16) -> UInt16

public func <<(lhs: Int16, rhs: Int16) -> Int16

public func <<(lhs: UInt32, rhs: UInt32) -> UInt32

public func <<(lhs: Int, rhs: Int) -> Int

public func <<(lhs: UInt, rhs: UInt) -> UInt

public func <<(lhs: Int64, rhs: Int64) -> Int64

public func <<(lhs: Int32, rhs: Int32) -> Int32

public func <<=(lhs: inout UInt8, rhs: UInt8)

public func <<=(lhs: inout Int8, rhs: Int8)

public func <<=(lhs: inout UInt16, rhs: UInt16)

public func <<=(lhs: inout Int16, rhs: Int16)

public func <<=(lhs: inout UInt32, rhs: UInt32)

public func <<=(lhs: inout Int32, rhs: Int32)

public func <<=(lhs: inout UInt64, rhs: UInt64)

public func <<=(lhs: inout Int64, rhs: Int64)

public func <<=(lhs: inout UInt, rhs: UInt)

public func <<=(lhs: inout Int, rhs: Int)

public func <=(lhs: Int32, rhs: Int32) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `<=` the second tuple iff `a1 < b1` or
/// (`a1 == b1` and `(a2, ..., aN) <= (b2, ..., bN)`).
public func <=<A : Comparable, B : Comparable, C : Comparable, D : Comparable>(lhs: (A, B, C, D), rhs: (A, B, C, D)) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `<=` the second tuple iff `a1 < b1` or
/// (`a1 == b1` and `(a2, ..., aN) <= (b2, ..., bN)`).
public func <=<A : Comparable, B : Comparable, C : Comparable, D : Comparable, E : Comparable>(lhs: (A, B, C, D, E), rhs: (A, B, C, D, E)) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `<=` the second tuple iff `a1 < b1` or
/// (`a1 == b1` and `(a2, ..., aN) <= (b2, ..., bN)`).
public func <=<A : Comparable, B : Comparable, C : Comparable>(lhs: (A, B, C), rhs: (A, B, C)) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `<=` the second tuple iff `a1 < b1` or
/// (`a1 == b1` and `(a2, ..., aN) <= (b2, ..., bN)`).
public func <=<A : Comparable, B : Comparable, C : Comparable, D : Comparable, E : Comparable, F : Comparable>(lhs: (A, B, C, D, E, F), rhs: (A, B, C, D, E, F)) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `<=` the second tuple iff `a1 < b1` or
/// (`a1 == b1` and `(a2, ..., aN) <= (b2, ..., bN)`).
public func <=<A : Comparable, B : Comparable>(lhs: (A, B), rhs: (A, B)) -> Bool

public func <=<T : Comparable>(lhs: T, rhs: T) -> Bool

public func <=<T : Comparable>(lhs: T?, rhs: T?) -> Bool

public func <=(lhs: Float80, rhs: Float80) -> Bool

public func <=(lhs: Double, rhs: Double) -> Bool

public func <=(lhs: Float, rhs: Float) -> Bool

public func <=(lhs: UInt8, rhs: UInt8) -> Bool

public func <=(lhs: Int, rhs: Int) -> Bool

public func <=(lhs: Int8, rhs: Int8) -> Bool

public func <=(lhs: UInt16, rhs: UInt16) -> Bool

public func <=(lhs: Int16, rhs: Int16) -> Bool

public func <=(lhs: UInt64, rhs: UInt64) -> Bool

public func <=(lhs: Int64, rhs: Int64) -> Bool

public func <=(lhs: UInt32, rhs: UInt32) -> Bool

public func <=(lhs: UInt, rhs: UInt) -> Bool

public func ==<T : Equatable>(lhs: T?, rhs: T?) -> Bool

/// Two `HalfOpenInterval`s are equal if their `start` and `end` are equal.
public func ==<Bound : Comparable>(lhs: HalfOpenInterval<Bound>, rhs: HalfOpenInterval<Bound>) -> Bool

public func ==(lhs: UInt64, rhs: UInt64) -> Bool

public func ==(lhs: Int32, rhs: Int32) -> Bool

public func ==<T>(lhs: T?, rhs: _OptionalNilComparisonType) -> Bool

public func ==(lhs: UInt32, rhs: UInt32) -> Bool

public func ==(lhs: Int64, rhs: Int64) -> Bool

public func ==<T>(lhs: _OptionalNilComparisonType, rhs: T?) -> Bool

public func ==(lhs: UInt, rhs: UInt) -> Bool

public func ==<Value, Element>(lhs: _HeapBuffer<Value, Element>, rhs: _HeapBuffer<Value, Element>) -> Bool

public func ==<Key : Hashable, Value>(lhs: DictionaryIndex<Key, Value>, rhs: DictionaryIndex<Key, Value>) -> Bool

public func ==(lhs: Int16, rhs: Int16) -> Bool

public func ==<Element>(lhs: Range<Element>, rhs: Range<Element>) -> Bool

public func ==(x: ObjectIdentifier, y: ObjectIdentifier) -> Bool

public func ==(lhs: Int, rhs: Int) -> Bool

public func ==(lhs: UInt16, rhs: UInt16) -> Bool

public func ==(lhs: Int8, rhs: Int8) -> Bool

public func ==(lhs: UInt8, rhs: UInt8) -> Bool

/// Returns `true` iff `lhs` is identical to `rhs`.
public func ==<Base : Collection>(lhs: LazyFilterIndex<Base>, rhs: LazyFilterIndex<Base>) -> Bool

public func ==(lhs: OpaquePointer, rhs: OpaquePointer) -> Bool

public func ==<Element : Hashable>(lhs: SetIndex<Element>, rhs: SetIndex<Element>) -> Bool

/// Returns `true` iff each component of `lhs` is equal to the corresponding
/// component of `rhs`.
public func ==<A : Equatable, B : Equatable, C : Equatable, D : Equatable>(lhs: (A, B, C, D), rhs: (A, B, C, D)) -> Bool

/// Returns `true` iff each component of `lhs` is equal to the corresponding
/// component of `rhs`.
public func ==<A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable>(lhs: (A, B, C, D, E), rhs: (A, B, C, D, E)) -> Bool

/// Returns `true` iff `lhs.rawValue == rhs.rawValue`.
public func ==<T : RawRepresentable where T.RawValue : Equatable>(lhs: T, rhs: T) -> Bool

public func ==<Key : Equatable, Value : Equatable>(lhs: [Key : Value], rhs: [Key : Value]) -> Bool

public func ==(lhs: Character, rhs: Character) -> Bool

public func ==<Base>(lhs: ReverseIndex<Base>, rhs: ReverseIndex<Base>) -> Bool

/// Returns `true` iff `t0` is identical to `t1`; i.e. if they are both
/// `nil` or they both represent the same type.
public func ==(t0: Swift.Any.Type?, t1: Swift.Any.Type?) -> Bool

/// Returns `true` iff each component of `lhs` is equal to the corresponding
/// component of `rhs`.
public func ==<A : Equatable, B : Equatable, C : Equatable>(lhs: (A, B, C), rhs: (A, B, C)) -> Bool

/// Returns `true` iff each component of `lhs` is equal to the corresponding
/// component of `rhs`.
public func ==<A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable, F : Equatable>(lhs: (A, B, C, D, E, F), rhs: (A, B, C, D, E, F)) -> Bool

public func ==<T : Strideable>(x: T, y: T) -> Bool

public func ==(lhs: String, rhs: String) -> Bool

public func ==<Element : Hashable>(lhs: Set<Element>, rhs: Set<Element>) -> Bool

public func ==(lhs: Index, rhs: Index) -> Bool

public func ==(lhs: Float80, rhs: Float80) -> Bool

public func ==(lhs: String.UnicodeScalarView.Index, rhs: String.UnicodeScalarView.Index) -> Bool

public func ==(lhs: String.UTF16View.Index, rhs: String.UTF16View.Index) -> Bool

public func ==(lhs: String.UTF8View.Index, rhs: String.UTF8View.Index) -> Bool

/// Two `ClosedInterval`s are equal if their `start` and `end` are equal.
public func ==<Bound : Comparable>(lhs: ClosedInterval<Bound>, rhs: ClosedInterval<Bound>) -> Bool

public func ==<Value, Element>(lhs: ManagedBufferPointer<Value, Element>, rhs: ManagedBufferPointer<Value, Element>) -> Bool

public func ==(lhs: UnicodeDecodingResult, rhs: UnicodeDecodingResult) -> Bool

public func ==(lhs: UnicodeScalar, rhs: UnicodeScalar) -> Bool

public func ==<Pointee>(lhs: UnsafeMutablePointer<Pointee>, rhs: UnsafeMutablePointer<Pointee>) -> Bool

public func ==<Pointee>(lhs: UnsafePointer<Pointee>, rhs: UnsafePointer<Pointee>) -> Bool

public func ==(lhs: Double, rhs: Double) -> Bool

public func ==(lhs: _SwiftNSOperatingSystemVersion, rhs: _SwiftNSOperatingSystemVersion) -> Bool

public func ==(lhs: Float, rhs: Float) -> Bool

/// Returns `true` iff `lhs` and `rhs` wrap equal underlying
/// `AnyForwardIndex`s.
///
/// - Precondition: The types of indices wrapped by `lhs` and `rhs` are
///   identical.
public func ==(lhs: AnyForwardIndex, rhs: AnyForwardIndex) -> Bool

/// Returns `true` iff `lhs` and `rhs` wrap equal underlying
/// `AnyBidirectionalIndex`s.
///
/// - Precondition: The types of indices wrapped by `lhs` and `rhs` are
///   identical.
public func ==(lhs: AnyBidirectionalIndex, rhs: AnyBidirectionalIndex) -> Bool

public func ==<BaseElements>(lhs: FlattenBidirectionalCollectionIndex<BaseElements>, rhs: FlattenBidirectionalCollectionIndex<BaseElements>) -> Bool

public func ==<Pointee>(lhs: AutoreleasingUnsafeMutablePointer<Pointee>, rhs: AutoreleasingUnsafeMutablePointer<Pointee>) -> Bool

/// Returns `true` if these arrays contain the same elements.
public func ==<Element : Equatable>(lhs: ContiguousArray<Element>, rhs: ContiguousArray<Element>) -> Bool

/// Returns `true` iff `lhs` and `rhs` wrap equal underlying
/// `AnyRandomAccessIndex`s.
///
/// - Precondition: The types of indices wrapped by `lhs` and `rhs` are
///   identical.
public func ==(lhs: AnyRandomAccessIndex, rhs: AnyRandomAccessIndex) -> Bool

/// Returns `true` if these arrays contain the same elements.
public func ==<Element : Equatable>(lhs: ArraySlice<Element>, rhs: ArraySlice<Element>) -> Bool

/// Returns `true` if these arrays contain the same elements.
public func ==<Element : Equatable>(lhs: [Element], rhs: [Element]) -> Bool

public func ==(lhs: Bool, rhs: Bool) -> Bool

public func ==<BaseElements>(lhs: FlattenCollectionIndex<BaseElements>, rhs: FlattenCollectionIndex<BaseElements>) -> Bool

/// Returns `true` iff each component of `lhs` is equal to the corresponding
/// component of `rhs`.
public func ==<A : Equatable, B : Equatable>(lhs: (A, B), rhs: (A, B)) -> Bool

/// Returns `true` iff `lhs` and `rhs` store the same underlying collection.
public func ===<L : AnyCollectionProtocol, R : AnyCollectionProtocol>(lhs: L, rhs: R) -> Bool

/// Returns `true` iff `lhs` and `rhs` are references to the same object
/// instance (in other words, are identical pointers).
///
/// - SeeAlso: `Equatable`, `==`
public func ===(lhs: AnyObject?, rhs: AnyObject?) -> Bool

public func >(lhs: UInt8, rhs: UInt8) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `>` the second tuple iff `a1 > b1` or
/// (`a1 == b1` and `(a2, ..., aN) > (b2, ..., bN)`).
public func ><A : Comparable, B : Comparable, C : Comparable, D : Comparable, E : Comparable, F : Comparable>(lhs: (A, B, C, D, E, F), rhs: (A, B, C, D, E, F)) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `>` the second tuple iff `a1 > b1` or
/// (`a1 == b1` and `(a2, ..., aN) > (b2, ..., bN)`).
public func ><A : Comparable, B : Comparable, C : Comparable, D : Comparable, E : Comparable>(lhs: (A, B, C, D, E), rhs: (A, B, C, D, E)) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `>` the second tuple iff `a1 > b1` or
/// (`a1 == b1` and `(a2, ..., aN) > (b2, ..., bN)`).
public func ><A : Comparable, B : Comparable, C : Comparable, D : Comparable>(lhs: (A, B, C, D), rhs: (A, B, C, D)) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `>` the second tuple iff `a1 > b1` or
/// (`a1 == b1` and `(a2, ..., aN) > (b2, ..., bN)`).
public func ><A : Comparable, B : Comparable, C : Comparable>(lhs: (A, B, C), rhs: (A, B, C)) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `>` the second tuple iff `a1 > b1` or
/// (`a1 == b1` and `(a2, ..., aN) > (b2, ..., bN)`).
public func ><A : Comparable, B : Comparable>(lhs: (A, B), rhs: (A, B)) -> Bool

public func ><T : Comparable>(lhs: T, rhs: T) -> Bool

public func ><T : Comparable>(lhs: T?, rhs: T?) -> Bool

public func >(lhs: Float80, rhs: Float80) -> Bool

public func >(lhs: Double, rhs: Double) -> Bool

public func >(lhs: Float, rhs: Float) -> Bool

public func >(lhs: Int, rhs: Int) -> Bool

public func >(lhs: UInt, rhs: UInt) -> Bool

public func >(lhs: Int64, rhs: Int64) -> Bool

public func >(lhs: UInt64, rhs: UInt64) -> Bool

public func >(lhs: Int32, rhs: Int32) -> Bool

public func >(lhs: UInt32, rhs: UInt32) -> Bool

public func >(lhs: Int16, rhs: Int16) -> Bool

public func >(lhs: UInt16, rhs: UInt16) -> Bool

public func >(lhs: Int8, rhs: Int8) -> Bool

public func >=(lhs: UInt16, rhs: UInt16) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `>=` the second tuple iff `a1 > b1` or
/// (`a1 == b1` and `(a2, ..., aN) >= (b2, ..., bN)`).
public func >=<A : Comparable, B : Comparable>(lhs: (A, B), rhs: (A, B)) -> Bool

public func >=(lhs: UInt32, rhs: UInt32) -> Bool

public func >=(lhs: Int16, rhs: Int16) -> Bool

public func >=(lhs: Int32, rhs: Int32) -> Bool

public func >=(lhs: Int8, rhs: Int8) -> Bool

public func >=(lhs: UInt8, rhs: UInt8) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `>=` the second tuple iff `a1 > b1` or
/// (`a1 == b1` and `(a2, ..., aN) >= (b2, ..., bN)`).
public func >=<A : Comparable, B : Comparable, C : Comparable, D : Comparable, E : Comparable, F : Comparable>(lhs: (A, B, C, D, E, F), rhs: (A, B, C, D, E, F)) -> Bool

public func >=(lhs: UInt64, rhs: UInt64) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `>=` the second tuple iff `a1 > b1` or
/// (`a1 == b1` and `(a2, ..., aN) >= (b2, ..., bN)`).
public func >=<A : Comparable, B : Comparable, C : Comparable, D : Comparable, E : Comparable>(lhs: (A, B, C, D, E), rhs: (A, B, C, D, E)) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `>=` the second tuple iff `a1 > b1` or
/// (`a1 == b1` and `(a2, ..., aN) >= (b2, ..., bN)`).
public func >=<A : Comparable, B : Comparable, C : Comparable, D : Comparable>(lhs: (A, B, C, D), rhs: (A, B, C, D)) -> Bool

/// A [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order)
/// over tuples of `Comparable` elements.
///
/// Given two tuples `(a1, a2, ..., aN)` and `(b1, b2, ..., bN)`, the
/// first tuple is `>=` the second tuple iff `a1 > b1` or
/// (`a1 == b1` and `(a2, ..., aN) >= (b2, ..., bN)`).
public func >=<A : Comparable, B : Comparable, C : Comparable>(lhs: (A, B, C), rhs: (A, B, C)) -> Bool

public func >=(lhs: _SwiftNSOperatingSystemVersion, rhs: _SwiftNSOperatingSystemVersion) -> Bool

public func >=<T : Comparable>(lhs: T?, rhs: T?) -> Bool

public func >=<T : Comparable>(lhs: T, rhs: T) -> Bool

public func >=(lhs: Float80, rhs: Float80) -> Bool

public func >=(lhs: Double, rhs: Double) -> Bool

public func >=(lhs: Float, rhs: Float) -> Bool

public func >=(lhs: Int, rhs: Int) -> Bool

public func >=(lhs: Int64, rhs: Int64) -> Bool

public func >=(lhs: UInt, rhs: UInt) -> Bool

public func >>(lhs: Int, rhs: Int) -> Int

public func >>(lhs: UInt, rhs: UInt) -> UInt

public func >>(lhs: Int64, rhs: Int64) -> Int64

public func >>(lhs: UInt64, rhs: UInt64) -> UInt64

public func >>(lhs: Int32, rhs: Int32) -> Int32

public func >>(lhs: UInt8, rhs: UInt8) -> UInt8

public func >>(lhs: UInt32, rhs: UInt32) -> UInt32

public func >>(lhs: Int16, rhs: Int16) -> Int16

public func >>(lhs: UInt16, rhs: UInt16) -> UInt16

public func >>(lhs: Int8, rhs: Int8) -> Int8

public func >>=(lhs: inout UInt8, rhs: UInt8)

public func >>=(lhs: inout UInt, rhs: UInt)

public func >>=(lhs: inout Int64, rhs: Int64)

public func >>=(lhs: inout UInt64, rhs: UInt64)

public func >>=(lhs: inout Int32, rhs: Int32)

public func >>=(lhs: inout UInt32, rhs: UInt32)

public func >>=(lhs: inout Int, rhs: Int)

public func >>=(lhs: inout Int16, rhs: Int16)

public func >>=(lhs: inout UInt16, rhs: UInt16)

public func >>=(lhs: inout Int8, rhs: Int8)

public func ??<T>(optional: T?, @autoclosure defaultValue: () throws -> T) rethrows -> T

public func ??<T>(optional: T?, @autoclosure defaultValue: () throws -> T?) rethrows -> T?

/// A type that supports an "absolute value" function.
public protocol AbsoluteValuable : SignedNumber {

    /// Returns the absolute value of `x`.
    public static func abs(x: Self) -> Self
}

/// The protocol to which all types implicitly conform.
public typealias Any = protocol<>

/// A type-erased wrapper over any collection with indices that
/// support bidirectional traversal.
///
/// Forwards operations to an arbitrary underlying collection having the
/// same `Element` type, hiding the specifics of the underlying
/// `Collection`.
///
/// - SeeAlso: `AnyRandomAccessType`, `AnyForwardType`
public struct AnyBidirectionalCollection<Element> : AnyCollectionProtocol {

    /// Create an `AnyBidirectionalCollection` that stores `base` as its
    /// underlying collection.
    ///
    /// - Complexity: O(1).
    public init<C : Collection where C.Index : BidirectionalIndex, C.Iterator.Element == Element>(_ base: C)

    /// Create an `AnyBidirectionalCollection` having the same underlying
    /// collection as `other`.
    ///
    /// - Postcondition: The result is `===` to `other`.
    ///
    /// - Complexity: O(1).
    public init(_ other: AnyBidirectionalCollection<Element>)

    /// Create an `AnyBidirectionalCollection` that stores `base` as its
    /// underlying collection.
    ///
    /// - Complexity: O(1).
    public init<C : Collection where C.Index : RandomAccessIndex, C.Iterator.Element == Element>(_ base: C)

    /// Create an `AnyBidirectionalCollection` having the same underlying
    /// collection as `other`.
    ///
    /// - Postcondition: The result is `===` to `other`.
    ///
    /// - Complexity: O(1).
    public init(_ other: AnyRandomAccessCollection<Element>)

    /// If the indices of the underlying collection stored by `other`
    /// satisfy `BidirectionalIndex`, create an
    /// `AnyBidirectionalCollection` having the same underlying
    /// collection as `other`.  Otherwise, the result is `nil`.
    ///
    /// - Complexity: O(1).
    public init?(_ other: AnyForwardCollection<Element>)

    /// Returns an iterator over the elements of this collection.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> AnyIterator<Element>

    /// The position of the first element in a non-empty collection.
    ///
    /// In an empty collection, `startIndex == endIndex`.
    public var startIndex: AnyBidirectionalIndex { get }

    /// The collection's "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    public var endIndex: AnyBidirectionalIndex { get }

    /// Access the element indicated by `position`.
    ///
    /// - Precondition: `position` indicates a valid position in `self` and
    ///   `position != endIndex`.
    public subscript(position: AnyBidirectionalIndex) -> Element { get }

    /// The number of elements.
    ///
    /// - Complexity: O(N).
    public var count: IntMax { get }
}

extension AnyBidirectionalCollection {

    /// Returns a value less than or equal to the number of elements in
    /// `self`, **nondestructively**.
    ///
    /// - Complexity: O(N).
    public var underestimatedCount: Int { get }
}

extension AnyBidirectionalCollection {
}

/// A wrapper over an underlying `BidirectionalIndex` that hides
/// the specific underlying type.
///
/// - SeeAlso: `AnyBidirectionalCollection`
public struct AnyBidirectionalIndex : BidirectionalIndex {

    /// A type that can represent the number of steps between pairs of
    /// `Self` values where one value is reachable from the other.
    ///
    /// Reachability is defined by the ability to produce one value from
    /// the other via zero or more applications of `successor`.
    public typealias Distance = IntMax

    /// Wrap and forward operations to `base`.
    public init<BaseIndex : BidirectionalIndex>(_ base: BaseIndex)

    /// Returns the next consecutive value in a discrete sequence of
    /// `AnyBidirectionalIndex` values.
    ///
    /// - Precondition: `self` has a well-defined successor.
    public func successor() -> AnyBidirectionalIndex

    /// Returns the previous consecutive value in a discrete sequence of
    /// `AnyBidirectionalIndex` values.
    ///
    /// - Precondition: `self` has a well-defined predecessor.
    public func predecessor() -> AnyBidirectionalIndex
}

/// The protocol to which all class types implicitly conform.
///
/// When used as a concrete type, all known `@objc` `class` methods and
/// properties are available, as implicitly-unwrapped-optional methods
/// and properties respectively, on each instance of `AnyClass`. For
/// example:
///
///     class C {
///       @objc class var cValue: Int { return 42 }
///     }
///
///     // If x has an @objc cValue: Int, return its value.
///     // Otherwise, return `nil`.
///     func getCValue(x: AnyClass) -> Int? {
///       return x.cValue // <===
///     }
///
/// - SeeAlso: `AnyObject`
public typealias AnyClass = AnyObject.Type

/// A protocol for `AnyForwardCollection<Element>`,
/// `AnyBidirectionalCollection<Element>`, and
/// `AnyRandomAccessCollection<Element>`.
///
/// This protocol can be considered an implementation detail of the
/// `===` and `!==` implementations for these types.
public protocol AnyCollectionProtocol : Collection {
}

/// A type-erased wrapper over any collection with indices that
/// support forward traversal.
///
/// Forwards operations to an arbitrary underlying collection having the
/// same `Element` type, hiding the specifics of the underlying
/// `Collection`.
///
/// - SeeAlso: `AnyBidirectionalType`, `AnyRandomAccessType`
public struct AnyForwardCollection<Element> : AnyCollectionProtocol {

    /// Create an `AnyForwardCollection` that stores `base` as its
    /// underlying collection.
    ///
    /// - Complexity: O(1).
    public init<C : Collection where C.Index : ForwardIndex, C.Iterator.Element == Element>(_ base: C)

    /// Create an `AnyForwardCollection` having the same underlying
    /// collection as `other`.
    ///
    /// - Postcondition: The result is `===` to `other`.
    ///
    /// - Complexity: O(1).
    public init(_ other: AnyForwardCollection<Element>)

    /// Create an `AnyForwardCollection` that stores `base` as its
    /// underlying collection.
    ///
    /// - Complexity: O(1).
    public init<C : Collection where C.Index : BidirectionalIndex, C.Iterator.Element == Element>(_ base: C)

    /// Create an `AnyForwardCollection` having the same underlying
    /// collection as `other`.
    ///
    /// - Postcondition: The result is `===` to `other`.
    ///
    /// - Complexity: O(1).
    public init(_ other: AnyBidirectionalCollection<Element>)

    /// Create an `AnyForwardCollection` that stores `base` as its
    /// underlying collection.
    ///
    /// - Complexity: O(1).
    public init<C : Collection where C.Index : RandomAccessIndex, C.Iterator.Element == Element>(_ base: C)

    /// Create an `AnyForwardCollection` having the same underlying
    /// collection as `other`.
    ///
    /// - Postcondition: The result is `===` to `other`.
    ///
    /// - Complexity: O(1).
    public init(_ other: AnyRandomAccessCollection<Element>)

    /// Returns an iterator over the elements of this collection.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> AnyIterator<Element>

    /// The position of the first element in a non-empty collection.
    ///
    /// In an empty collection, `startIndex == endIndex`.
    public var startIndex: AnyForwardIndex { get }

    /// The collection's "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    public var endIndex: AnyForwardIndex { get }

    /// Access the element indicated by `position`.
    ///
    /// - Precondition: `position` indicates a valid position in `self` and
    ///   `position != endIndex`.
    public subscript(position: AnyForwardIndex) -> Element { get }

    /// The number of elements.
    ///
    /// - Complexity: O(N).
    public var count: IntMax { get }
}

extension AnyForwardCollection {

    /// Returns a value less than or equal to the number of elements in
    /// `self`, **nondestructively**.
    ///
    /// - Complexity: O(N).
    public var underestimatedCount: Int { get }
}

extension AnyForwardCollection {
}

/// A wrapper over an underlying `ForwardIndex` that hides
/// the specific underlying type.
///
/// - SeeAlso: `AnyForwardCollection`
public struct AnyForwardIndex : ForwardIndex {

    /// A type that can represent the number of steps between pairs of
    /// `Self` values where one value is reachable from the other.
    ///
    /// Reachability is defined by the ability to produce one value from
    /// the other via zero or more applications of `successor`.
    public typealias Distance = IntMax

    /// Wrap and forward operations to `base`.
    public init<BaseIndex : ForwardIndex>(_ base: BaseIndex)

    /// Returns the next consecutive value in a discrete sequence of
    /// `AnyForwardIndex` values.
    ///
    /// - Precondition: `self` has a well-defined successor.
    public func successor() -> AnyForwardIndex
}

/// A type-erased iterator of `Element`.
///
/// This iterator forwards its `next()` method to an arbitrary underlying
/// iterator having the same `Element` type, hiding the specifics of the
/// underlying `IteratorProtocol`.
///
/// - seealso:
///   - `struct AnySequence<S : Sequence>`
public struct AnyIterator<Element> : IteratorProtocol {

    /// Create a `IteratorProtocol` instance that wraps `base` but whose type
    /// depends only on the type of `I.Element`.
    ///
    /// Example:
    ///
    ///     func digits() -> AnyIterator<String> {
    ///       let lazyStrings = (0..<10).lazy.map { String($0) }
    ///
    ///       // This is a really complicated type of no interest to our
    ///       // clients.
    ///       let iterator: MapSequenceIterator<RangeIterator<Int>, String>
    ///         = lazyStrings.makeIterator()
    ///       return AnyIterator(iterator)
    ///     }
    public init<I : IteratorProtocol where I.Element == Element>(_ base: I)

    /// Create a `IteratorProtocol` instance whose `next` method invokes
    /// `body` and returns the result.
    ///
    /// Example:
    ///
    ///     var x = 7
    ///     let iterator = AnyIterator { x < 15 ? x++ : nil }
    ///     let a = Array(iterator) // [ 7, 8, 9, 10, 11, 12, 13, 14 ]
    public init(body: () -> Element?)

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    public func next() -> Element?
}

/// Every `IteratorProtocol` can also be a `Sequence`.  Note that
/// traversing the sequence consumes the iterator.
extension AnyIterator : Sequence {
}

/// The protocol to which all classes implicitly conform.
///
/// When used as a concrete type, all known `@objc` methods and
/// properties are available, as implicitly-unwrapped-optional methods
/// and properties respectively, on each instance of `AnyObject`.  For
/// example:
///
///     class C {
///       @objc func getCValue() -> Int { return 42 }
///     }
///
///     // If x has a method @objc getValue() -> Int, call it and
///     // return the result.  Otherwise, return `nil`.
///     func getCValue1(x: AnyObject) -> Int? {
///       if let f: () -> Int = x.getCValue { // <===
///         return f()
///       }
///       return nil
///     }
///
///     // A more idiomatic implementation using "optional chaining"
///     func getCValue2(x: AnyObject) -> Int? {
///       return x.getCValue?() // <===
///     }
///
///     // An implementation that assumes the required method is present
///     func getCValue3(x: AnyObject) -> Int { // <===
///       return x.getCValue() // x.getCValue is implicitly unwrapped. // <===
///     }
///
/// - SeeAlso: `AnyClass`
@objc public protocol AnyObject {
}

/// A type-erased wrapper over any collection with indices that
/// support random access traversal.
///
/// Forwards operations to an arbitrary underlying collection having the
/// same `Element` type, hiding the specifics of the underlying
/// `Collection`.
///
/// - SeeAlso: `AnyForwardType`, `AnyBidirectionalType`
public struct AnyRandomAccessCollection<Element> : AnyCollectionProtocol {

    /// Create an `AnyRandomAccessCollection` that stores `base` as its
    /// underlying collection.
    ///
    /// - Complexity: O(1).
    public init<C : Collection where C.Index : RandomAccessIndex, C.Iterator.Element == Element>(_ base: C)

    /// Create an `AnyRandomAccessCollection` having the same underlying
    /// collection as `other`.
    ///
    /// - Postcondition: The result is `===` to `other`.
    ///
    /// - Complexity: O(1).
    public init(_ other: AnyRandomAccessCollection<Element>)

    /// If the indices of the underlying collection stored by `other`
    /// satisfy `RandomAccessIndex`, create an
    /// `AnyRandomAccessCollection` having the same underlying
    /// collection as `other`.  Otherwise, the result is `nil`.
    ///
    /// - Complexity: O(1).
    public init?(_ other: AnyForwardCollection<Element>)

    /// If the indices of the underlying collection stored by `other`
    /// satisfy `RandomAccessIndex`, create an
    /// `AnyRandomAccessCollection` having the same underlying
    /// collection as `other`.  Otherwise, the result is `nil`.
    ///
    /// - Complexity: O(1).
    public init?(_ other: AnyBidirectionalCollection<Element>)

    /// Returns an iterator over the elements of this collection.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> AnyIterator<Element>

    /// The position of the first element in a non-empty collection.
    ///
    /// In an empty collection, `startIndex == endIndex`.
    public var startIndex: AnyRandomAccessIndex { get }

    /// The collection's "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    public var endIndex: AnyRandomAccessIndex { get }

    /// Access the element indicated by `position`.
    ///
    /// - Precondition: `position` indicates a valid position in `self` and
    ///   `position != endIndex`.
    public subscript(position: AnyRandomAccessIndex) -> Element { get }

    /// The number of elements.
    ///
    /// - Complexity: O(1).
    public var count: IntMax { get }
}

extension AnyRandomAccessCollection {

    /// Returns a value less than or equal to the number of elements in
    /// `self`, **nondestructively**.
    ///
    /// - Complexity: O(N).
    public var underestimatedCount: Int { get }
}

extension AnyRandomAccessCollection {
}

/// A wrapper over an underlying `RandomAccessIndex` that hides
/// the specific underlying type.
///
/// - SeeAlso: `AnyRandomAccessCollection`
public struct AnyRandomAccessIndex : RandomAccessIndex {

    /// A type that can represent the number of steps between pairs of
    /// `Self` values where one value is reachable from the other.
    ///
    /// Reachability is defined by the ability to produce one value from
    /// the other via zero or more applications of `successor`.
    public typealias Distance = IntMax

    /// Wrap and forward operations to `base`.
    public init<BaseIndex : RandomAccessIndex>(_ base: BaseIndex)

    /// Returns the next consecutive value in a discrete sequence of
    /// `AnyRandomAccessIndex` values.
    ///
    /// - Precondition: `self` has a well-defined successor.
    public func successor() -> AnyRandomAccessIndex

    /// Returns the previous consecutive value in a discrete sequence of
    /// `AnyRandomAccessIndex` values.
    ///
    /// - Precondition: `self` has a well-defined predecessor.
    public func predecessor() -> AnyRandomAccessIndex

    /// Measure the distance between `self` and `end`.
    ///
    /// - Precondition:
    ///   - `start` and `end` are part of the same sequence when conforming to
    ///     `RandomAccessIndex`.
    ///   - `end` is reachable from `self` by incrementation otherwise.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`n`) otherwise, where `n` is the function's result.
    public func distance(to other: AnyRandomAccessIndex) -> Distance

    /// Returns the result of advancing `self` by `n` positions.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by amount: Distance) -> AnyRandomAccessIndex

    /// Returns the result of advancing `self` by `n` positions, or until it
    /// equals `limit`.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times
    ///     but not past `limit`.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times
    ///     but not past `limit`.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by amount: Distance, limit: AnyRandomAccessIndex) -> AnyRandomAccessIndex
}

/// A type-erased sequence.
///
/// Forwards operations to an arbitrary underlying sequence having the
/// same `Element` type, hiding the specifics of the underlying
/// `Sequence`.
///
/// - SeeAlso: `AnyIterator<Element>`.
public struct AnySequence<Element> : Sequence {

    /// Wrap and forward operations to `base`.
    public init<S : Sequence where S.Iterator.Element == Element, S.SubSequence : Sequence, S.SubSequence.Iterator.Element == Element, S.SubSequence.SubSequence == S.SubSequence>(_ base: S)

    /// Create a sequence whose `makeIterator()` method forwards to
    /// `makeUnderlyingIterator`.
    public init<I : IteratorProtocol where I.Element == Element>(_ makeUnderlyingIterator: () -> I)

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> AnyIterator<Element>
}

extension AnySequence {

    /// Returns a subsequence containing all but the first `n` elements.
    ///
    /// - Precondition: `n >= 0`
    /// - Complexity: O(`n`)
    public func dropFirst(n: Int) -> AnySequence<Element>

    /// Returns a subsequence, up to `maxLength` in length, containing the
    /// initial elements.
    ///
    /// If `maxLength` exceeds `self.count`, the result contains all
    /// the elements of `self`.
    ///
    /// - Precondition: `maxLength >= 0`
    public func prefix(maxLength: Int) -> AnySequence<Element>
}

extension AnySequence {

    /// Returns a value less than or equal to the number of elements in
    /// `self`, **nondestructively**.
    ///
    /// - Complexity: O(N).
    public var underestimatedCount: Int { get }
}

extension AnySequence {
}

/// `Array` is an efficient, tail-growable random-access
/// collection of arbitrary elements.
///
/// Common Properties of Array Types
/// ================================
///
/// The information in this section applies to all three of Swift's
/// array types, `Array<Element>`, `ContiguousArray<Element>`, and
/// `ArraySlice<Element>`.  When you read the word "array" here in
/// a normal typeface, it applies to all three of them.
///
/// Value Semantics
/// ---------------
///
/// Each array variable, `let` binding, or stored property has an
/// independent value that includes the values of all of its elements.
/// Therefore, mutations to the array are not observable through its
/// copies:
///
///     var a = [1, 2, 3]
///     var b = a
///     b[0] = 4
///     print("a=\(a), b=\(b)")     // a=[1, 2, 3], b=[4, 2, 3]
///
/// (Of course, if the array stores `class` references, the objects
/// are shared; only the values of the references are independent.)
///
/// Arrays use Copy-on-Write so that their storage and elements are
/// only copied lazily, upon mutation, when more than one array
/// instance is using the same buffer.  Therefore, the first in any
/// sequence of mutating operations may cost `O(N)` time and space,
/// where `N` is the length of the array.
///
/// Growth and Capacity
/// -------------------
///
/// When an array's contiguous storage fills up, new storage must be
/// allocated and elements must be moved to the new storage.  `Array`,
/// `ContiguousArray`, and `ArraySlice` share an exponential growth
/// strategy that makes `append` a constant time operation *when
/// amortized over many invocations*.  In addition to a `count`
/// property, these array types have a `capacity` that reflects their
/// potential to store elements without reallocation, and when you
/// know how many elements you'll store, you can call
/// `reserveCapacity` to preemptively reallocate and prevent
/// intermediate reallocations.
///
/// Objective-C Bridge
/// ==================
///
/// The main distinction between `Array` and the other array types is
/// that it interoperates seamlessly and efficiently with Objective-C.
///
/// `Array<Element>` is considered bridged to Objective-C iff `Element`
/// is bridged to Objective-C.
///
/// When `Element` is a `class` or `@objc` protocol type, `Array` may
/// store its elements in an `NSArray`.  Since any arbitrary subclass
/// of `NSArray` can become an `Array`, there are no guarantees about
/// representation or efficiency in this case (see also
/// `ContiguousArray`).  Since `NSArray` is immutable, it is just as
/// though the storage was shared by some copy: the first in any
/// sequence of mutating operations causes elements to be copied into
/// unique, contiguous storage which may cost `O(N)` time and space,
/// where `N` is the length of the array (or more, if the underlying
/// `NSArray` has unusual performance characteristics).
///
/// Bridging to Objective-C
/// -----------------------
///
/// Any bridged `Array` can be implicitly converted to an `NSArray`.
/// When `Element` is a `class` or `@objc` protocol, bridging takes O(1)
/// time and O(1) space.  Other `Array`s must be bridged
/// element-by-element, allocating a new object for each element, at a
/// cost of at least O(`count`) time and space.
///
/// Bridging from Objective-C
/// -------------------------
///
/// An `NSArray` can be implicitly or explicitly converted to any
/// bridged `Array<Element>`.  This conversion calls `copy(with:)`
/// on the `NSArray`, to ensure it won't be modified, and stores the
/// result in the `Array`.  Type-checking, to ensure the `NSArray`'s
/// elements match or can be bridged to `Element`, is deferred until the
/// first element access.
public struct Array<Element> : Collection, MutableCollection {

    /// Always zero, which is the index of the first element when non-empty.
    public var startIndex: Int { get }

    /// A "past-the-end" element index; the successor of the last valid
    /// subscript argument.
    public var endIndex: Int { get }

    /// Access the `index`th element. Reading is O(1).  Writing is
    /// O(1) unless `self`'s storage is shared with another live array; O(`count`) if `self` does not wrap a bridged `NSArray`; otherwise the efficiency is unspecified..
    public subscript(index: Int) -> Element

    /// Access the contiguous subrange of elements enclosed by `bounds`.
    ///
    /// - Complexity: O(1).
    public subscript(bounds: Range<Int>) -> ArraySlice<Element>
}

extension Array : ArrayLiteralConvertible {

    /// Create an instance containing `elements`.
    public init(arrayLiteral elements: Element...)
}

extension Array : RangeReplaceableCollection {

    /// Construct an empty Array.
    public init()

    /// Construct from an arbitrary sequence of `Element`s.
    public init<S : Sequence where S.Iterator.Element == Element>(_ s: S)

    /// Construct a Array of `count` elements, each initialized to
    /// `repeatedValue`.
    public init(repeating repeatedValue: Element, count: Int)

    /// The number of elements the Array stores.
    public var count: Int { get }

    /// The number of elements the `Array` can store without reallocation.
    public var capacity: Int { get }

    /// Reserve enough space to store `minimumCapacity` elements.
    ///
    /// - Postcondition: `capacity >= minimumCapacity` and the array has
    ///   contiguous storage whose elements can be replaced in O(1).
    ///
    /// - Complexity: O(`self.count`).
    public mutating func reserveCapacity(minimumCapacity: Int)

    /// Append `newElement` to the Array.
    ///
    /// - Complexity: Amortized O(1) unless `self`'s storage is shared with another live array; O(`count`) if `self` does not wrap a bridged `NSArray`; otherwise the efficiency is unspecified..
    public mutating func append(newElement: Element)

    /// Append the elements of `newElements` to `self`.
    ///
    /// - Complexity: O(*length of result*).
    public mutating func append<S : Sequence where S.Iterator.Element == Element>(contentsOf newElements: S)

    /// Append the elements of `newElements` to `self`.
    ///
    /// - Complexity: O(*length of result*).
    public mutating func append<C : Collection where C.Iterator.Element == Element>(contentsOf newElements: C)

    /// Remove and return the last element in O(1).
    ///
    /// - Precondition: `!isEmpty`.
    public mutating func removeLast() -> Element

    /// Insert `newElement` at index `i`.
    ///
    /// - Precondition: `i <= count`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func insert(newElement: Element, at i: Int)

    /// Remove and return the element at index `i`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func remove(at index: Int) -> Element

    /// Remove all elements.
    ///
    /// - Postcondition: `capacity == 0` iff `keepCapacity` is `false`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func removeAll(keepingCapacity keepCapacity: Bool = default)
}

extension Array : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension Array : CustomStringConvertible, CustomDebugStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension Array {

    /// Call `body(p)`, where `p` is a pointer to the `Array`'s
    /// contiguous storage. If no such storage exists, it is first created.
    ///
    /// Often, the optimizer can eliminate bounds checks within an
    /// array algorithm, but when that fails, invoking the
    /// same algorithm on `body`'s argument lets you trade safety for
    /// speed.
    public func withUnsafeBufferPointer<R>(@noescape body: (UnsafeBufferPointer<Element>) throws -> R) rethrows -> R

    /// Call `body(p)`, where `p` is a pointer to the `Array`'s
    /// mutable contiguous storage. If no such storage exists, it is first created.
    ///
    /// Often, the optimizer can eliminate bounds- and uniqueness-checks
    /// within an array algorithm, but when that fails, invoking the
    /// same algorithm on `body`'s argument lets you trade safety for
    /// speed.
    ///
    /// - Warning: Do not rely on anything about `self` (the `Array`
    ///   that is the target of this method) during the execution of
    ///   `body`: it may not appear to have its correct value.  Instead,
    ///   use only the `UnsafeMutableBufferPointer` argument to `body`.
    public mutating func withUnsafeMutableBufferPointer<R>(@noescape body: (inout UnsafeMutableBufferPointer<Element>) throws -> R) rethrows -> R
}

extension Array {

    /// Replace the elements within `bounds` with `newElements`.
    ///
    /// - Complexity: O(`subRange.count`) if `subRange.endIndex
    ///   == self.endIndex` and `newElements.isEmpty`, O(`count`) otherwise.
    public mutating func replaceSubrange<C : Collection where C.Iterator.Element == _Buffer.Element>(subRange: Range<Int>, with newElements: C)
}

extension Array {

    /// If `!self.isEmpty`, remove the last element and return it, otherwise
    /// return `nil`.
    ///
    /// - Complexity: O(`self.count`) if the array is bridged,
    ///   otherwise O(1).
    public mutating func popLast() -> Element?
}

/// Conforming types can be initialized with array literals.
public protocol ArrayLiteralConvertible {

    associatedtype Element

    /// Create an instance initialized with `elements`.
    public init(arrayLiteral elements: Self.Element...)
}

/// The `Array`-like type that represents a sub-sequence of any
/// `Array`, `ContiguousArray`, or other `ArraySlice`.
///
/// `ArraySlice` always uses contiguous storage and does not bridge to
/// Objective-C.
///
/// - Warning: Long-term storage of `ArraySlice` instances is discouraged.
///
/// Because a `ArraySlice` presents a *view* onto the storage of some
/// larger array even after the original array's lifetime ends,
/// storing the slice may prolong the lifetime of elements that are
/// no longer accessible, which can manifest as apparent memory and
/// object leakage.  To prevent this effect, use `ArraySlice` only for
/// transient computation.
public struct ArraySlice<Element> : Collection, MutableCollection {

    /// The position of the first element in a non-empty collection.
    ///
    /// In an empty collection, `startIndex == endIndex`.
    public var startIndex: Int { get }

    /// A "past-the-end" element index; the successor of the last valid
    /// subscript argument.
    public var endIndex: Int { get }

    /// Access the `index`th element. Reading is O(1).  Writing is
    /// O(1) unless `self`'s storage is shared with another live array; O(`count`) otherwise..
    public subscript(index: Int) -> Element

    /// Access the contiguous subrange of elements enclosed by `bounds`.
    ///
    /// - Complexity: O(1).
    public subscript(bounds: Range<Int>) -> ArraySlice<Element>
}

extension ArraySlice : ArrayLiteralConvertible {

    /// Create an instance containing `elements`.
    public init(arrayLiteral elements: Element...)
}

extension ArraySlice : RangeReplaceableCollection {

    /// Construct an empty ArraySlice.
    public init()

    /// Construct from an arbitrary sequence of `Element`s.
    public init<S : Sequence where S.Iterator.Element == Element>(_ s: S)

    /// Construct a ArraySlice of `count` elements, each initialized to
    /// `repeatedValue`.
    public init(repeating repeatedValue: Element, count: Int)

    /// The number of elements the ArraySlice stores.
    public var count: Int { get }

    /// The number of elements the `ArraySlice` can store without reallocation.
    public var capacity: Int { get }

    /// Reserve enough space to store `minimumCapacity` elements.
    ///
    /// - Postcondition: `capacity >= minimumCapacity` and the array has
    ///   contiguous storage whose elements can be replaced in O(1).
    ///
    /// - Complexity: O(`self.count`).
    public mutating func reserveCapacity(minimumCapacity: Int)

    /// Append `newElement` to the ArraySlice.
    ///
    /// - Complexity: Amortized O(1) unless `self`'s storage is shared with another live array; O(`count`) otherwise..
    public mutating func append(newElement: Element)

    /// Append the elements of `newElements` to `self`.
    ///
    /// - Complexity: O(*length of result*).
    public mutating func append<S : Sequence where S.Iterator.Element == Element>(contentsOf newElements: S)

    /// Append the elements of `newElements` to `self`.
    ///
    /// - Complexity: O(*length of result*).
    public mutating func append<C : Collection where C.Iterator.Element == Element>(contentsOf newElements: C)

    /// Remove and return the last element in O(1).
    ///
    /// - Precondition: `!isEmpty`.
    public mutating func removeLast() -> Element

    /// Insert `newElement` at index `i`.
    ///
    /// - Precondition: `i <= count`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func insert(newElement: Element, at i: Int)

    /// Remove and return the element at index `i`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func remove(at index: Int) -> Element

    /// Remove all elements.
    ///
    /// - Postcondition: `capacity == 0` iff `keepCapacity` is `false`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func removeAll(keepingCapacity keepCapacity: Bool = default)
}

extension ArraySlice : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension ArraySlice : CustomStringConvertible, CustomDebugStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension ArraySlice {

    /// Call `body(p)`, where `p` is a pointer to the `ArraySlice`'s
    /// contiguous storage.
    ///
    /// Often, the optimizer can eliminate bounds checks within an
    /// array algorithm, but when that fails, invoking the
    /// same algorithm on `body`'s argument lets you trade safety for
    /// speed.
    public func withUnsafeBufferPointer<R>(@noescape body: (UnsafeBufferPointer<Element>) throws -> R) rethrows -> R

    /// Call `body(p)`, where `p` is a pointer to the `ArraySlice`'s
    /// mutable contiguous storage.
    ///
    /// Often, the optimizer can eliminate bounds- and uniqueness-checks
    /// within an array algorithm, but when that fails, invoking the
    /// same algorithm on `body`'s argument lets you trade safety for
    /// speed.
    ///
    /// - Warning: Do not rely on anything about `self` (the `ArraySlice`
    ///   that is the target of this method) during the execution of
    ///   `body`: it may not appear to have its correct value.  Instead,
    ///   use only the `UnsafeMutableBufferPointer` argument to `body`.
    public mutating func withUnsafeMutableBufferPointer<R>(@noescape body: (inout UnsafeMutableBufferPointer<Element>) throws -> R) rethrows -> R
}

extension ArraySlice {

    /// Replace the elements within `bounds` with `newElements`.
    ///
    /// - Complexity: O(`subRange.count`) if `subRange.endIndex
    ///   == self.endIndex` and `newElements.isEmpty`, O(`count`) otherwise.
    public mutating func replaceSubrange<C : Collection where C.Iterator.Element == _Buffer.Element>(subRange: Range<Int>, with newElements: C)
}

/// A mutable pointer-to-ObjC-pointer argument.
///
/// This type has implicit conversions to allow passing any of the following
/// to a C or ObjC API:
///
/// - `nil`, which gets passed as a null pointer,
/// - an inout argument of the referenced type, which gets passed as a pointer
///   to a writeback temporary with autoreleasing ownership semantics,
/// - an `UnsafeMutablePointer<Pointee>`, which is passed as-is.
///
/// Passing pointers to mutable arrays of ObjC class pointers is not
/// directly supported. Unlike `UnsafeMutablePointer<Pointee>`,
/// `AutoreleasingUnsafeMutablePointer<Pointee>` must reference storage that
/// does not own a reference count to the referenced
/// value. UnsafeMutablePointer's operations, by contrast, assume that
/// the referenced storage owns values loaded from or stored to it.
///
/// This type does not carry an owner pointer unlike the other C*Pointer types
/// because it only needs to reference the results of inout conversions, which
/// already have writeback-scoped lifetime.
public struct AutoreleasingUnsafeMutablePointer<Pointee> : Equatable, NilLiteralConvertible {

    /// Access the `Pointee` instance referenced by `self`.
    ///
    /// - Precondition: the pointee has been initialized with an instance of type
    ///   `Pointee`.
    public var pointee: Pointee { get nonmutating set }

    /// Access the `i`th element of the raw array pointed to by
    /// `self`.
    ///
    /// - Precondition: `self != nil`.
    public subscript(i: Int) -> Pointee { get }

    /// Create an instance initialized with `nil`.
    public init(nilLiteral: ())

    /// Explicit construction from an UnsafeMutablePointer.
    ///
    /// This is inherently unsafe; UnsafeMutablePointer assumes the
    /// referenced memory has +1 strong ownership semantics, whereas
    /// AutoreleasingUnsafeMutablePointer implies +0 semantics.
    public init<U>(_ ptr: UnsafeMutablePointer<U>)
}

extension AutoreleasingUnsafeMutablePointer : CustomDebugStringConvertible {

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension AutoreleasingUnsafeMutablePointer {
}

extension AutoreleasingUnsafeMutablePointer : CVarArg {
}

/// An index that can step backwards via application of its
/// `predecessor()` method.
public protocol BidirectionalIndex : ForwardIndex {

    /// Returns the previous consecutive value in a discrete sequence.
    ///
    /// If `self` has a well-defined successor,
    /// `self.successor().predecessor() == self`.  If `self` has a
    /// well-defined predecessor, `self.predecessor().successor() ==
    /// self`.
    ///
    /// - Precondition: `self` has a well-defined predecessor.
    public func predecessor() -> Self
}

extension BidirectionalIndex {

    public func advanced(by n: Self.Distance) -> Self

    public func advanced(by n: Self.Distance, limit: Self) -> Self
}

extension BidirectionalIndex where Self : ReverseIndexProtocol {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> Self

    /// Returns the previous consecutive value before `self`.
    ///
    /// - Precondition: The previous value is representable.
    public func predecessor() -> Self
}

/// A set type with O(1) standard bitwise operators.
///
/// Each instance is a subset of `~Self.allZeros`.
///
/// **Axioms**, where `x` is an instance of `Self`:
///
/// -  `x | Self.allZeros == x`
/// -  `x ^ Self.allZeros == x`
/// -  `x & Self.allZeros == .allZeros`
/// -  `x & ~Self.allZeros == x`
/// -  `~x == x ^ ~Self.allZeros`
public protocol BitwiseOperations {

    /// Returns the intersection of bits set in `lhs` and `rhs`.
    ///
    /// - Complexity: O(1).
    public func &(lhs: Self, rhs: Self) -> Self

    /// Returns the union of bits set in `lhs` and `rhs`.
    ///
    /// - Complexity: O(1).
    public func |(lhs: Self, rhs: Self) -> Self

    /// Returns the bits that are set in exactly one of `lhs` and `rhs`.
    ///
    /// - Complexity: O(1).
    public func ^(lhs: Self, rhs: Self) -> Self

    /// Returns `x ^ ~Self.allZeros`.
    ///
    /// - Complexity: O(1).
    prefix public func ~(x: Self) -> Self

    /// The empty bitset.
    ///
    /// Also the [identity element](http://en.wikipedia.org/wiki/Identity_element) for `|` and
    /// `^`, and the [fixed point](http://en.wikipedia.org/wiki/Fixed_point_(mathematics)) for
    /// `&`.
    public static var allZeros: Self { get }
}

/// A value type whose instances are either `true` or `false`.
public struct Bool {

    /// Default-initialize Boolean value to `false`.
    public init()
}

extension Bool : BooleanLiteralConvertible {

    public init(_builtinBooleanLiteral value: Builtin.Int1)

    /// Create an instance initialized to `value`.
    public init(booleanLiteral value: Bool)
}

extension Bool : Boolean {

    /// Identical to `self`.
    public var boolValue: Bool { get }

    /// Construct an instance representing the same logical value as
    /// `value`.
    public init<T : Boolean>(_ value: T)
}

extension Bool : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension Bool : Equatable, Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: the hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension Bool : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension Bool : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

/// A type that represents a Boolean value.
///
/// Types that conform to the `Boolean` protocol can be used as
/// the condition in control statements (`if`, `while`, C-style `for`)
/// and other logical value contexts (e.g., `case` statement guards).
///
/// Only three types provided by Swift, `Bool`, `DarwinBoolean`, and `ObjCBool`,
/// conform to `Boolean`. Expanding this set to include types that
/// represent more than simple boolean values is discouraged.
public protocol Boolean {

    /// The value of `self`, expressed as a `Bool`.
    public var boolValue: Bool { get }
}

/// Conforming types can be initialized with the Boolean literals
/// `true` and `false`.
public protocol BooleanLiteralConvertible {

    associatedtype BooleanLiteralType

    /// Create an instance initialized to `value`.
    public init(booleanLiteral value: Self.BooleanLiteralType)
}

/// The default type for an otherwise-unconstrained Boolean literal.
public typealias BooleanLiteralType = Bool

/// The C '_Bool' and C++ 'bool' type.
public typealias CBool = Bool

/// The C 'char' type.
///
/// This will be the same as either `CSignedChar` (in the common
/// case) or `CUnsignedChar`, depending on the platform.
public typealias CChar = Int8

/// The C++11 'char16_t' type, which has UTF-16 encoding.
public typealias CChar16 = UInt16

/// The C++11 'char32_t' type, which has UTF-32 encoding.
public typealias CChar32 = UnicodeScalar

/// The C 'double' type.
public typealias CDouble = Double

/// The C 'float' type.
public typealias CFloat = Float

/// The C 'int' type.
public typealias CInt = Int32

/// The C 'long' type.
public typealias CLong = Int

/// The C 'long long' type.
public typealias CLongLong = Int64

/// The C 'short' type.
public typealias CShort = Int16

/// The C 'signed char' type.
public typealias CSignedChar = Int8

/// The C 'unsigned char' type.
public typealias CUnsignedChar = UInt8

/// The C 'unsigned int' type.
public typealias CUnsignedInt = UInt32

/// The C 'unsigned long' type.
public typealias CUnsignedLong = UInt

/// The C 'unsigned long long' type.
public typealias CUnsignedLongLong = UInt64

/// The C 'unsigned short' type.
public typealias CUnsignedShort = UInt16

/// The corresponding Swift type to `va_list` in imported C APIs.
public struct CVaListPointer {

    public init(_fromUnsafeMutablePointer from: UnsafeMutablePointer<Swift.Void>)
}

extension CVaListPointer : CustomDebugStringConvertible {

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

/// Instances of conforming types can be encoded, and appropriately
/// passed, as elements of a C `va_list`.
///
/// This protocol is useful in presenting C "varargs" APIs natively in
/// Swift.  It only works for APIs that have a `va_list` variant, so
/// for example, it isn't much use if all you have is:
///
/// ~~~ c
/// int c_api(int n, ...)
/// ~~~
///
/// Given a version like this, though,
///
/// ~~~ c
/// int c_api(int, va_list arguments)
/// ~~~
///
/// you can write:
///
///     func swiftAPI(x: Int, arguments: CVarArg...) -> Int {
///       return withVaList(arguments) { c_api(x, $0) }
///     }
public protocol CVarArg {
}

/// The C++ 'wchar_t' type.
public typealias CWideChar = UnicodeScalar

/// `Character` represents some Unicode grapheme cluster as
/// defined by a canonical, localized, or otherwise tailored
/// segmentation algorithm.
public struct Character : ExtendedGraphemeClusterLiteralConvertible, Equatable, Hashable, Comparable {

    /// Construct a `Character` containing just the given `scalar`.
    public init(_ scalar: UnicodeScalar)

    public init(_builtinUnicodeScalarLiteral value: Builtin.Int32)

    /// Create an instance initialized to `value`.
    public init(unicodeScalarLiteral value: Character)

    public init(_builtinExtendedGraphemeClusterLiteral start: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1)

    /// Create an instance initialized to `value`.
    public init(extendedGraphemeClusterLiteral value: Character)

    /// Create an instance from a single-character `String`.
    ///
    /// - Precondition: `s` contains exactly one extended grapheme cluster.
    public init(_ s: String)

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension Character : CustomDebugStringConvertible {

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension Character : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension Character : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension Character : Streamable {

    /// Write a textual representation of `self` into `target`.
    public func write<Target : OutputStream>(to target: inout Target)
}

/// A closed `Interval`, which contains both its `start` and its
/// `end`.  Cannot represent an empty interval.
///
/// - parameter Bound: The type of the endpoints.
public struct ClosedInterval<Bound : Comparable> : Interval, Equatable, CustomStringConvertible, CustomDebugStringConvertible, CustomReflectable, CustomPlaygroundQuickLookable {

    /// Construct a copy of `x`.
    public init(_ x: ClosedInterval<Bound>)

    /// The `Interval`'s lower bound.
    ///
    /// Invariant: `start` <= `end`.
    public var start: Bound { get }

    /// The `Interval`'s upper bound.
    ///
    /// Invariant: `start` <= `end`.
    public var end: Bound { get }

    /// A textual representation of `self`.
    public var description: String { get }

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }

    /// Returns `true` iff the `Interval` contains `x`.
    public func contains(x: Bound) -> Bool

    /// Returns `intervalToClamp` clamped to `self`.
    ///
    /// The bounds of the result, even if it is empty, are always limited to the bounds of
    /// `self`.
    public func clamp(intervalToClamp: ClosedInterval<Bound>) -> ClosedInterval<Bound>

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension ClosedInterval {

    /// `true` iff the `Interval` is empty.  In the case of
    /// `ClosedInterval`, always returns `false`.
    public var isEmpty: Bool { get }
}

/// A multi-pass sequence with addressable positions.
///
/// Positions are represented by an associated `Index` type.  Whereas
/// an arbitrary sequence may be consumed as it is traversed, a
/// collection is multi-pass: any element may be revisited merely by
/// saving its index.
///
/// The sequence view of the elements is identical to the collection
/// view.  In other words, the following code binds the same series of
/// values to `x` as does `for x in self {}`:
///
///     for i in startIndex..<endIndex {
///       let x = self[i]
///     }
public protocol Collection : Indexable, Sequence {

    /// A type that provides the sequence's iteration interface and
    /// encapsulates its iteration state.
    ///
    /// By default, a `Collection` satisfies `Sequence` by
    /// supplying a `IndexingIterator` as its associated `Iterator`
    /// type.
    associatedtype Iterator : IteratorProtocol = IndexingIterator<Self>

    public func makeIterator() -> Self.Iterator

    /// A `Sequence` that can represent a contiguous subrange of `self`'s
    /// elements.
    ///
    /// - Note: This associated type appears as a requirement in
    ///   `Sequence`, but is restated here with stricter
    ///   constraints: in a `Collection`, the `SubSequence` should
    ///   also be a `Collection`.
    associatedtype SubSequence : Indexable, Sequence = Slice<Self>

    /// Returns the element at the given `position`.
    public subscript(position: Self.Index) -> Self.Iterator.Element { get }

    /// Returns a collection representing a contiguous sub-range of
    /// `self`'s elements.
    ///
    /// - Complexity: O(1)
    public subscript(bounds: Range<Self.Index>) -> Self.SubSequence { get }

    /// Returns `self[startIndex..<end]`
    ///
    /// - Complexity: O(1)
    public func prefix(upTo end: Self.Index) -> Self.SubSequence

    /// Returns `self[start..<endIndex]`
    ///
    /// - Complexity: O(1)
    public func suffix(from start: Self.Index) -> Self.SubSequence

    /// Returns `prefix(upTo: position.successor())`
    ///
    /// - Complexity: O(1)
    public func prefix(through position: Self.Index) -> Self.SubSequence

    /// Returns `true` iff `self` is empty.
    public var isEmpty: Bool { get }

    /// Returns the number of elements.
    ///
    /// - Complexity: O(1) if `Index` conforms to `RandomAccessIndex`;
    ///   O(N) otherwise.
    public var count: Self.Index.Distance { get }

    /// Returns the first element of `self`, or `nil` if `self` is empty.
    public var first: Self.Iterator.Element? { get }
}

/// Supply the default `makeIterator()` method for `Collection` models
/// that accept the default associated `Iterator`,
/// `IndexingIterator<Self>`.
extension Collection where Iterator == IndexingIterator<Self> {

    public func makeIterator() -> IndexingIterator<Self>
}

/// Supply the default "slicing" `subscript`  for `Collection` models
/// that accept the default associated `SubSequence`, `Slice<Self>`.
extension Collection where SubSequence == Slice<Self> {

    public subscript(bounds: Range<Self.Index>) -> Slice<Self> { get }
}

extension Collection where SubSequence == Self {

    /// If `!self.isEmpty`, remove the first element and return it, otherwise
    /// return `nil`.
    ///
    /// - Complexity: O(1)
    public mutating func popFirst() -> Self.Iterator.Element?
}

extension Collection where SubSequence == Self, Index : BidirectionalIndex {

    /// If `!self.isEmpty`, remove the last element and return it, otherwise
    /// return `nil`.
    ///
    /// - Complexity: O(1)
    public mutating func popLast() -> Self.Iterator.Element?
}

/// Default implementations of core requirements
extension Collection {

    /// Returns `true` iff `self` is empty.
    ///
    /// - Complexity: O(1)
    public var isEmpty: Bool { get }

    /// Returns the first element of `self`, or `nil` if `self` is empty.
    ///
    /// - Complexity: O(1)
    public var first: Self.Iterator.Element? { get }

    /// Returns a value less than or equal to the number of elements in
    /// `self`, *nondestructively*.
    ///
    /// - Complexity: O(`count`).
    public var underestimatedCount: Int { get }

    /// Returns the number of elements.
    ///
    /// - Complexity: O(1) if `Index` conforms to `RandomAccessIndex`;
    ///   O(N) otherwise.
    public var count: Self.Index.Distance { get }
}

extension Collection {

    /// Returns an `Array` containing the results of mapping `transform`
    /// over `self`.
    ///
    /// - Complexity: O(N).
    public func map<T>(@noescape transform: (Self.Iterator.Element) throws -> T) rethrows -> [T]

    /// Returns a subsequence containing all but the first `n` elements.
    ///
    /// - Precondition: `n >= 0`
    /// - Complexity: O(`n`)
    public func dropFirst(n: Int) -> Self.SubSequence

    /// Returns a subsequence containing all but the last `n` elements.
    ///
    /// - Precondition: `n >= 0`
    /// - Complexity: O(`self.count`)
    public func dropLast(n: Int) -> Self.SubSequence

    /// Returns a subsequence, up to `maxLength` in length, containing the
    /// initial elements.
    ///
    /// If `maxLength` exceeds `self.count`, the result contains all
    /// the elements of `self`.
    ///
    /// - Precondition: `maxLength >= 0`
    /// - Complexity: O(`maxLength`)
    public func prefix(maxLength: Int) -> Self.SubSequence

    /// Returns a slice, up to `maxLength` in length, containing the
    /// final elements of `self`.
    ///
    /// If `maxLength` exceeds `s.count`, the result contains all
    /// the elements of `self`.
    ///
    /// - Precondition: `maxLength >= 0`
    /// - Complexity: O(`self.count`)
    public func suffix(maxLength: Int) -> Self.SubSequence

    /// Returns `self[startIndex..<end]`
    ///
    /// - Complexity: O(1)
    public func prefix(upTo end: Self.Index) -> Self.SubSequence

    /// Returns `self[start..<endIndex]`
    ///
    /// - Complexity: O(1)
    public func suffix(from start: Self.Index) -> Self.SubSequence

    /// Returns `prefix(upTo: position.successor())`
    ///
    /// - Complexity: O(1)
    public func prefix(through position: Self.Index) -> Self.SubSequence

    /// Returns the maximal `SubSequence`s of `self`, in order, that
    /// don't contain elements satisfying the predicate `isSeparator`.
    ///
    /// - Parameter maxSplits: The maximum number of `SubSequence`s to
    ///   return, minus 1.
    ///   If `maxSplits + 1` `SubSequence`s are returned, the last one is
    ///   a suffix of `self` containing *all* the elements of `self` following the
    ///   last split point.
    ///   The default value is `Int.max`.
    ///
    /// - Parameter omittingEmptySubsequences: If `false`, an empty `SubSequence`
    ///   is produced in the result for each pair of consecutive elements
    ///   satisfying `isSeparator`.
    ///   The default value is `true`.
    ///
    /// - Precondition: `maxSplits >= 0`
    public func split(maxSplits maxSplits: Int = default, omittingEmptySubsequences: Bool = default, @noescape isSeparator: (Self.Iterator.Element) throws -> Bool) rethrows -> [Self.SubSequence]
}

extension Collection where Iterator.Element : Equatable {

    /// Returns the maximal `SubSequence`s of `self`, in order, around a
    /// `separator` element.
    ///
    /// - Parameter maxSplits: The maximum number of `SubSequence`s to
    ///   return, minus 1.
    ///   If `maxSplits + 1` `SubSequence`s are returned, the last one is
    ///   a suffix of `self` containing *all* the elements of `self` following the
    ///   last split point.
    ///   The default value is `Int.max`.
    ///
    /// - Parameter omittingEmptySubsequences: If `false`, an empty `SubSequence`
    ///   is produced in the result for each pair of consecutive elements
    ///   equal to `separator`.
    ///   The default value is `true`.
    ///
    /// - Precondition: `maxSplits >= 0`
    public func split(separator separator: Self.Iterator.Element, maxSplits: Int = default, omittingEmptySubsequences: Bool = default) -> [Self.SubSequence]
}

extension Collection where Index : BidirectionalIndex {

    /// Returns a subsequence containing all but the last `n` elements.
    ///
    /// - Precondition: `n >= 0`
    /// - Complexity: O(`n`)
    public func dropLast(n: Int) -> Self.SubSequence

    /// Returns a slice, up to `maxLength` in length, containing the
    /// final elements of `self`.
    ///
    /// If `maxLength` exceeds `s.count`, the result contains all
    /// the elements of `self`.
    ///
    /// - Precondition: `maxLength >= 0`
    /// - Complexity: O(`maxLength`)
    public func suffix(maxLength: Int) -> Self.SubSequence
}

extension Collection where SubSequence == Self {

    /// Remove the element at `startIndex` and return it.
    ///
    /// - Complexity: O(1)
    /// - Precondition: `!self.isEmpty`.
    public mutating func removeFirst() -> Self.Iterator.Element

    /// Remove the first `n` elements.
    ///
    /// - Complexity:
    ///   - O(1) if `Index` conforms to `RandomAccessIndex`
    ///   - O(n) otherwise
    /// - Precondition: `n >= 0 && self.count >= n`.
    public mutating func removeFirst(n: Int)
}

extension Collection where SubSequence == Self, Index : BidirectionalIndex {

    /// Remove an element from the end.
    ///
    /// - Complexity: O(1)
    /// - Precondition: `!self.isEmpty`
    public mutating func removeLast() -> Self.Iterator.Element

    /// Remove the last `n` elements.
    ///
    /// - Complexity:
    ///   - O(1) if `Index` conforms to `RandomAccessIndex`
    ///   - O(n) otherwise
    /// - Precondition: `n >= 0 && self.count >= n`.
    public mutating func removeLast(n: Int)
}

extension Collection where Index : BidirectionalIndex {

    public var last: Self.Iterator.Element? { get }
}

extension Collection where Iterator.Element : Equatable {

    /// Returns the first index where `value` appears in `self` or `nil` if
    /// `value` is not found.
    ///
    /// - Complexity: O(`self.count`).
    public func index(of element: Self.Iterator.Element) -> Self.Index?
}

extension Collection {

    /// Returns the first index where `predicate` returns `true` for the
    /// corresponding value, or `nil` if such value is not found.
    ///
    /// - Complexity: O(`self.count`).
    public func index(@noescape where predicate: (Self.Iterator.Element) throws -> Bool) rethrows -> Self.Index?
}

extension Collection {

    /// Returns the range of valid index values.
    ///
    /// The result's `endIndex` is the same as that of `self`.  Because
    /// `Range` is half-open, iterating the values of the result produces
    /// all valid subscript arguments for `self`, omitting its `endIndex`.
    public var indices: Range<Self.Index> { get }
}

extension Collection where Iterator.Element : Collection {

    /// A concatenation of the elements of `self`.
    public func flatten() -> FlattenCollection<Self>
}

extension Collection where Iterator.Element : Collection, Index : BidirectionalIndex, Iterator.Element.Index : BidirectionalIndex {

    /// A concatenation of the elements of `self`.
    public func flatten() -> FlattenBidirectionalCollection<Self>
}

/// Augment `self` with lazy methods such as `map`, `filter`, etc.
extension Collection {

    /// A collection with contents identical to `self`, but on which
    /// normally-eager operations such as `map` and `filter` are
    /// implemented lazily.
    ///
    /// - See Also: `LazySequenceProtocol`, `LazyCollectionProtocol`.
    public var lazy: LazyCollection<Self> { get }
}

extension Collection where Self : _ReverseCollection, Self.Base.Index : RandomAccessIndex {

    public var startIndex: ReverseRandomAccessIndex<Self.Base.Index> { get }
}

extension Collection where Index : BidirectionalIndex {

    /// Returns the elements of `self` in reverse order.
    ///
    /// - Complexity: O(1)
    public func reversed() -> ReverseCollection<Self>
}

extension Collection where Index : RandomAccessIndex {

    /// Returns the elements of `self` in reverse order.
    ///
    /// - Complexity: O(1)
    public func reversed() -> ReverseRandomAccessCollection<Self>
}

/// A collection containing a single element of type `Element`.
public struct CollectionOfOne<Element> : Collection {

    /// Construct an instance containing just `element`.
    public init(_ element: Element)

    /// The position of the first element.
    public var startIndex: Int { get }

    /// The "past the end" position; always identical to
    /// `startIndex.successor()`.
    ///
    /// - Note: `endIndex` is not a valid argument to `subscript`.
    public var endIndex: Int { get }

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> IteratorOverOne<Element>

    /// Access the element at `position`.
    ///
    /// - Precondition: `position == 0`.
    public subscript(position: Int) -> Element { get }

    /// The number of elements (always one).
    public var count: Int { get }
}

extension CollectionOfOne : CustomReflectable {

    /// The `Mirror` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `Mirror` should be
    ///   unaffected by subsequent mutations of `self`.
    public var customMirror: Mirror { get }
}

/// Instances of conforming types can be compared using relational
/// operators, which define a [strict total order](http://en.wikipedia.org/wiki/Total_order#Strict_total_order).
///
/// A type conforming to `Comparable` need only supply the `<` and
/// `==` operators; default implementations of `<=`, `>`, `>=`, and
/// `!=` are supplied by the standard library:
///
///     struct Singular : Comparable {}
///     func ==(x: Singular, y: Singular) -> Bool { return true }
///     func <(x: Singular, y: Singular) -> Bool { return false }
///
/// **Axioms**, in addition to those of `Equatable`:
///
/// - `x == y` implies `x <= y`, `x >= y`, `!(x < y)`, and `!(x > y)`
/// - `x < y` implies `x <= y` and `y > x`
/// - `x > y` implies `x >= y` and `y < x`
/// - `x <= y` implies `y >= x`
/// - `x >= y` implies `y <= x`
public protocol Comparable : Equatable {

    /// A [strict total order](http://en.wikipedia.org/wiki/Total_order#Strict_total_order)
    /// over instances of `Self`.
    public func <(lhs: Self, rhs: Self) -> Bool

    public func <=(lhs: Self, rhs: Self) -> Bool

    public func >=(lhs: Self, rhs: Self) -> Bool

    public func >(lhs: Self, rhs: Self) -> Bool
}

/// A fast, contiguously-stored array of `Element`.
///
/// Efficiency is equivalent to that of `Array`, unless `Element` is a
/// `class` or `@objc` `protocol` type, in which case using
/// `ContiguousArray` may be more efficient.  Note, however, that
/// `ContiguousArray` does not bridge to Objective-C.  See `Array`,
/// with which `ContiguousArray` shares most properties, for more
/// detail.
public struct ContiguousArray<Element> : Collection, MutableCollection {

    /// Always zero, which is the index of the first element when non-empty.
    public var startIndex: Int { get }

    /// A "past-the-end" element index; the successor of the last valid
    /// subscript argument.
    public var endIndex: Int { get }

    /// Access the `index`th element. Reading is O(1).  Writing is
    /// O(1) unless `self`'s storage is shared with another live array; O(`count`) otherwise..
    public subscript(index: Int) -> Element

    /// Access the contiguous subrange of elements enclosed by `bounds`.
    ///
    /// - Complexity: O(1).
    public subscript(bounds: Range<Int>) -> ArraySlice<Element>
}

extension ContiguousArray : ArrayLiteralConvertible {

    /// Create an instance containing `elements`.
    public init(arrayLiteral elements: Element...)
}

extension ContiguousArray : RangeReplaceableCollection {

    /// Construct an empty ContiguousArray.
    public init()

    /// Construct from an arbitrary sequence of `Element`s.
    public init<S : Sequence where S.Iterator.Element == Element>(_ s: S)

    /// Construct a ContiguousArray of `count` elements, each initialized to
    /// `repeatedValue`.
    public init(repeating repeatedValue: Element, count: Int)

    /// The number of elements the ContiguousArray stores.
    public var count: Int { get }

    /// The number of elements the `ContiguousArray` can store without reallocation.
    public var capacity: Int { get }

    /// Reserve enough space to store `minimumCapacity` elements.
    ///
    /// - Postcondition: `capacity >= minimumCapacity` and the array has
    ///   contiguous storage whose elements can be replaced in O(1).
    ///
    /// - Complexity: O(`self.count`).
    public mutating func reserveCapacity(minimumCapacity: Int)

    /// Append `newElement` to the ContiguousArray.
    ///
    /// - Complexity: Amortized O(1) unless `self`'s storage is shared with another live array; O(`count`) otherwise..
    public mutating func append(newElement: Element)

    /// Append the elements of `newElements` to `self`.
    ///
    /// - Complexity: O(*length of result*).
    public mutating func append<S : Sequence where S.Iterator.Element == Element>(contentsOf newElements: S)

    /// Append the elements of `newElements` to `self`.
    ///
    /// - Complexity: O(*length of result*).
    public mutating func append<C : Collection where C.Iterator.Element == Element>(contentsOf newElements: C)

    /// Remove and return the last element in O(1).
    ///
    /// - Precondition: `!isEmpty`.
    public mutating func removeLast() -> Element

    /// Insert `newElement` at index `i`.
    ///
    /// - Precondition: `i <= count`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func insert(newElement: Element, at i: Int)

    /// Remove and return the element at index `i`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func remove(at index: Int) -> Element

    /// Remove all elements.
    ///
    /// - Postcondition: `capacity == 0` iff `keepCapacity` is `false`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func removeAll(keepingCapacity keepCapacity: Bool = default)
}

extension ContiguousArray : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension ContiguousArray : CustomStringConvertible, CustomDebugStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension ContiguousArray {

    /// Call `body(p)`, where `p` is a pointer to the `ContiguousArray`'s
    /// contiguous storage.
    ///
    /// Often, the optimizer can eliminate bounds checks within an
    /// array algorithm, but when that fails, invoking the
    /// same algorithm on `body`'s argument lets you trade safety for
    /// speed.
    public func withUnsafeBufferPointer<R>(@noescape body: (UnsafeBufferPointer<Element>) throws -> R) rethrows -> R

    /// Call `body(p)`, where `p` is a pointer to the `ContiguousArray`'s
    /// mutable contiguous storage.
    ///
    /// Often, the optimizer can eliminate bounds- and uniqueness-checks
    /// within an array algorithm, but when that fails, invoking the
    /// same algorithm on `body`'s argument lets you trade safety for
    /// speed.
    ///
    /// - Warning: Do not rely on anything about `self` (the `ContiguousArray`
    ///   that is the target of this method) during the execution of
    ///   `body`: it may not appear to have its correct value.  Instead,
    ///   use only the `UnsafeMutableBufferPointer` argument to `body`.
    public mutating func withUnsafeMutableBufferPointer<R>(@noescape body: (inout UnsafeMutableBufferPointer<Element>) throws -> R) rethrows -> R
}

extension ContiguousArray {

    /// Replace the elements within `bounds` with `newElements`.
    ///
    /// - Complexity: O(`subRange.count`) if `subRange.endIndex
    ///   == self.endIndex` and `newElements.isEmpty`, O(`count`) otherwise.
    public mutating func replaceSubrange<C : Collection where C.Iterator.Element == _Buffer.Element>(subRange: Range<Int>, with newElements: C)
}

extension ContiguousArray {

    /// If `!self.isEmpty`, remove the last element and return it, otherwise
    /// return `nil`.
    ///
    /// - Complexity: O(1)
    public mutating func popLast() -> Element?
}

/// A type with a customized textual representation suitable for
/// debugging purposes.
///
/// This textual representation is used when values are written to an
/// *output stream* by `debugPrint`, and is
/// typically more verbose than the text provided by a
/// `CustomStringConvertible`'s `description` property.
///
/// - Note: `String(reflecting: instance)` will work for an `instance`
///   of *any* type, returning its `debugDescription` if the `instance`
///   happens to be `CustomDebugStringConvertible`.  Using
/// `CustomDebugStringConvertible` as a generic constraint, or
/// accessing a conforming type's `debugDescription` directly, is
/// therefore discouraged.
///
/// - SeeAlso: `String.init<T>(reflecting: T)`,
///   `CustomStringConvertible`
public protocol CustomDebugStringConvertible {

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

/// A type that explicitly supplies its own Mirror but whose
/// descendant classes are not represented in the Mirror unless they
/// also override `customMirror`.
public protocol CustomLeafReflectable : CustomReflectable {
}

/// A type that explicitly supplies its own PlaygroundQuickLook.
///
/// Instances of any type can be `PlaygroundQuickLook(reflect:)`'ed
/// upon, but if you are not satisfied with the `PlaygroundQuickLook`
/// supplied for your type by default, you can make it conform to
/// `CustomPlaygroundQuickLookable` and return a custom
/// `PlaygroundQuickLook`.
public protocol CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

/// A type that explicitly supplies its own Mirror.
///
/// Instances of any type can be `Mirror(reflect:)`'ed upon, but if you are
/// not satisfied with the `Mirror` supplied for your type by default,
/// you can make it conform to `CustomReflectable` and return a custom
/// `Mirror`.
public protocol CustomReflectable {

    /// The `Mirror` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `Mirror` should be
    ///   unaffected by subsequent mutations of `self`.
    public var customMirror: Mirror { get }
}

/// A type with a customized textual representation.
///
/// This textual representation is used when values are written to an
/// *output stream*, for example, by `print`.
///
/// - Note: `String(instance)` will work for an `instance` of *any*
///   type, returning its `description` if the `instance` happens to be
///   `CustomStringConvertible`.  Using `CustomStringConvertible` as a
///   generic constraint, or accessing a conforming type's `description`
///   directly, is therefore discouraged.
///
/// - SeeAlso: `String.init<T>(T)`, `CustomDebugStringConvertible`
public protocol CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

/// A mapping from `Key` to `Value`.
///
/// The order of elements in a dictionary is stable between mutations
/// but otherwise unpredictable.
public struct Dictionary<Key : Hashable, Value> : Collection, DictionaryLiteralConvertible {

    public typealias Element = (key: Key, value: Value)

    /// A type that represents a valid position in the collection.
    ///
    /// Valid indices consist of the position of every element and a
    /// "past the end" position that's not valid for use as a subscript.
    public typealias Index = DictionaryIndex<Key, Value>

    /// Create an empty dictionary.
    public init()

    /// Create a dictionary with at least the given number of
    /// elements worth of storage.  The actual capacity will be the
    /// smallest power of 2 that is >= `minimumCapacity`.
    public init(minimumCapacity: Int)

    /// The position of the first element in a non-empty dictionary.
    ///
    /// Identical to `endIndex` in an empty dictionary.
    ///
    /// - Complexity: Amortized O(1) if `self` does not wrap a bridged
    ///   `NSDictionary`, O(N) otherwise.
    public var startIndex: DictionaryIndex<Key, Value> { get }

    /// The collection's "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    ///
    /// - Complexity: Amortized O(1) if `self` does not wrap a bridged
    ///   `NSDictionary`, O(N) otherwise.
    public var endIndex: DictionaryIndex<Key, Value> { get }

    /// Returns the `Index` for the given key, or `nil` if the key is not
    /// present in the dictionary.
    public func index(forKey key: Key) -> DictionaryIndex<Key, Value>?

    /// Returns the key-value pair at `position`.
    ///
    /// - Complexity: O(1).
    public subscript(position: DictionaryIndex<Key, Value>) -> (key: Key, value: Value) { get }

    /// Access the value associated with the given key.
    ///
    /// Reading a key that is not present in `self` yields `nil`.
    /// Writing `nil` as the value for a given key erases that key from
    /// `self`.
    public subscript(key: Key) -> Value?

    /// Update the value stored in the dictionary for the given key, or, if the
    /// key does not exist, add a new key-value pair to the dictionary.
    ///
    /// Returns the value that was replaced, or `nil` if a new key-value pair
    /// was added.
    public mutating func updateValue(value: Value, forKey key: Key) -> Value?

    /// Remove and return the key-value pair at `index`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func remove(at index: DictionaryIndex<Key, Value>) -> (key: Key, value: Value)

    /// Remove a given key and the associated value from the dictionary.
    /// Returns the value that was removed, or `nil` if the key was not present
    /// in the dictionary.
    public mutating func removeValue(forKey key: Key) -> Value?

    /// Removes all elements.
    ///
    /// - Postcondition: `capacity == 0` if `keepingCapacity` is
    /// `false`, otherwise the capacity will not be decreased.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - parameter keepCapacity: If `true`, the operation preserves the
    ///   storage capacity that the collection has, otherwise the underlying
    ///   storage is released.  The default is `false`.
    ///
    /// Complexity: O(`self.count`).
    public mutating func removeAll(keepingCapacity keepCapacity: Bool = default)

    /// The number of entries in the dictionary.
    ///
    /// - Complexity: O(1).
    public var count: Int { get }

    /// Returns an iterator over the `(Key, Value)` pairs.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> DictionaryIterator<Key, Value>

    /// Create an instance initialized with `elements`.
    public init(dictionaryLiteral elements: (Key, Value)...)

    /// A collection containing just the keys of `self`.
    ///
    /// Keys appear in the same order as they occur as the `.key` member
    /// of key-value pairs in `self`.  Each key in the result has a
    /// unique value.
    public var keys: LazyMapCollection<[Key : Value], Key> { get }

    /// A collection containing just the values of `self`.
    ///
    /// Values appear in the same order as they occur as the `.value` member
    /// of key-value pairs in `self`.
    public var values: LazyMapCollection<[Key : Value], Value> { get }

    /// `true` iff `count == 0`.
    public var isEmpty: Bool { get }
}

extension Dictionary : CustomStringConvertible, CustomDebugStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension Dictionary : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension Dictionary {

    /// If `!self.isEmpty`, return the first key-value pair in the sequence of
    /// elements, otherwise return `nil`.
    ///
    /// - Complexity: Amortized O(1)
    public mutating func popFirst() -> (key: Key, value: Value)?
}

/// Used to access the key-value pairs in an instance of
/// `Dictionary<Key, Value>`.
///
/// Dictionary has two subscripting interfaces:
///
/// 1. Subscripting with a key, yielding an optional value:
///
///        v = d[k]!
///
/// 2. Subscripting with an index, yielding a key-value pair:
///
///        (k,v) = d[i]
public struct DictionaryIndex<Key : Hashable, Value> : ForwardIndex, Comparable {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> DictionaryIndex<Key, Value>
}

/// An iterator over the members of a `Dictionary<Key, Value>`.
public struct DictionaryIterator<Key : Hashable, Value> : IteratorProtocol {

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    ///
    /// - Precondition: No preceding call to `self.next()` has returned `nil`.
    public mutating func next() -> (key: Key, value: Value)?
}

extension DictionaryIterator : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

/// Represent the ability to pass a dictionary literal in function
/// signatures.
///
/// A function with a `DictionaryLiteral` parameter can be passed a
/// Swift dictionary literal without causing a `Dictionary` to be
/// created.  This capability can be especially important when the
/// order of elements in the literal is significant.
///
/// For example:
///
///     struct IntPairs {
///       var elements: [(Int, Int)]
///       init(_ pairs: DictionaryLiteral<Int,Int>) {
///         elements = Array(pairs)
///       }
///     }
///
///     let x = IntPairs([1:2, 1:1, 3:4, 2:1])
///     print(x.elements)  // [(1, 2), (1, 1), (3, 4), (2, 1)]
public struct DictionaryLiteral<Key, Value> : DictionaryLiteralConvertible {

    /// Store `elements`.
    public init(dictionaryLiteral elements: (Key, Value)...)
}

/// `Collection` conformance that allows `DictionaryLiteral` to
/// interoperate with the rest of the standard library.
extension DictionaryLiteral : Collection {

    /// The position of the first element in a non-empty `DictionaryLiteral`.
    ///
    /// Identical to `endIndex` in an empty `DictionaryLiteral`.
    ///
    /// - Complexity: O(1).
    public var startIndex: Int { get }

    /// The `DictionaryLiteral`'s "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    ///
    /// - Complexity: O(1).
    public var endIndex: Int { get }

    public typealias Element = (key: Key, value: Value)

    /// Access the element indicated by `position`.
    ///
    /// - Precondition: `position >= 0 && position < endIndex`.
    ///
    /// - complexity: O(1).
    public subscript(position: Int) -> (key: Key, value: Value) { get }
}

/// Conforming types can be initialized with dictionary literals.
public protocol DictionaryLiteralConvertible {

    associatedtype Key

    associatedtype Value

    /// Create an instance initialized with `elements`.
    public init(dictionaryLiteral elements: (Self.Key, Self.Value)...)
}

/// A double-precision floating-point value type.
public struct Double {

    /// Create an instance initialized to zero.
    public init()

    public init(_bits v: Builtin.FPIEEE64)

    /// Create an instance initialized to `value`.
    public init(_ value: Double)
}

extension Double : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension Double : CustomDebugStringConvertible {

    /// A textual representation of `self`.
    public var debugDescription: String { get }
}

extension Double : FloatingPoint {

    /// The positive infinity.
    public static var infinity: Double { get }

    /// A quiet NaN.
    public static var nan: Double { get }

    /// A quiet NaN.
    public static var quietNaN: Double { get }

    /// `true` iff `self` is negative.
    public var isSignMinus: Bool { get }

    /// `true` iff `self` is normal (not zero, subnormal, infinity, or
    /// NaN).
    public var isNormal: Bool { get }

    /// `true` iff `self` is zero, subnormal, or normal (not infinity
    /// or NaN).
    public var isFinite: Bool { get }

    /// `true` iff `self` is +0.0 or -0.0.
    public var isZero: Bool { get }

    /// `true` iff `self` is subnormal.
    public var isSubnormal: Bool { get }

    /// `true` iff `self` is infinity.
    public var isInfinite: Bool { get }

    /// `true` iff `self` is NaN.
    public var isNaN: Bool { get }

    /// `true` iff `self` is a signaling NaN.
    public var isSignaling: Bool { get }
}

extension Double {

    /// The IEEE 754 "class" of this type.
    public var floatingPointClass: FloatingPointClassification { get }
}

extension Double : IntegerLiteralConvertible {

    public init(_builtinIntegerLiteral value: Builtin.Int2048)

    /// Create an instance initialized to `value`.
    public init(integerLiteral value: Int64)
}

extension Double {

    public init(_builtinFloatLiteral value: Builtin.FPIEEE80)
}

extension Double : FloatLiteralConvertible {

    /// Create an instance initialized to `value`.
    public init(floatLiteral value: Double)
}

extension Double : Comparable, Equatable {
}

extension Double : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension Double : AbsoluteValuable {

    /// Returns the absolute value of `x`.
    public static func abs(x: Double) -> Double
}

extension Double {

    /// Create an instance initialized to `value`.
    public init(_ v: UInt8)

    /// Create an instance initialized to `value`.
    public init(_ v: Int8)

    /// Create an instance initialized to `value`.
    public init(_ v: UInt16)

    /// Create an instance initialized to `value`.
    public init(_ v: Int16)

    /// Create an instance initialized to `value`.
    public init(_ v: UInt32)

    /// Create an instance initialized to `value`.
    public init(_ v: Int32)

    /// Create an instance initialized to `value`.
    public init(_ v: UInt64)

    /// Create an instance initialized to `value`.
    public init(_ v: Int64)

    /// Create an instance initialized to `value`.
    public init(_ v: UInt)

    /// Create an instance initialized to `value`.
    public init(_ v: Int)
}

extension Double {

    /// Construct an instance that approximates `other`.
    public init(_ other: Float)

    /// Construct an instance that approximates `other`.
    public init(_ other: Float80)
}

extension Double : Strideable {

    /// Returns a stride `x` such that `self.advanced(by: x)` approximates
    /// `other`.
    ///
    /// - Complexity: O(1).
    public func distance(to other: Double) -> Double

    /// Returns a `Self` `x` such that `self.distance(to: x)` approximates
    /// `n`.
    ///
    /// - Complexity: O(1).
    public func advanced(by amount: Double) -> Double
}

extension Double {

    /// Construct from an ASCII representation.
    ///
    /// Returns the result of calling the POSIX function
    /// `strtod_l` using the "C" locale, unless
    /// `text` contains non-ASCII text or whitespace, or is not
    /// completely consumed by the call. Otherwise, returns `nil`.
    ///
    /// See the `strtod (3)` man page for details of
    /// the exact format accepted.
    public init?(_ text: String)
}

extension Double : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension Double : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension Double {
}

/// A collection whose element type is `Element` but that is always empty.
public struct EmptyCollection<Element> : Collection {

    /// A type that represents a valid position in the collection.
    ///
    /// Valid indices consist of the position of every element and a
    /// "past the end" position that's not valid for use as a subscript.
    public typealias Index = Int

    /// Construct an instance.
    public init()

    /// Always zero, just like `endIndex`.
    public var startIndex: Index { get }

    /// Always zero, just like `startIndex`.
    public var endIndex: Index { get }

    /// Returns an empty iterator.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> EmptyIterator<Element>

    /// Access the element at `position`.
    ///
    /// Should never be called, since this collection is always empty.
    public subscript(position: Index) -> Element { get }

    /// The number of elements (always zero).
    public var count: Int { get }
}

/// An iterator that never produces an element.
///
/// - SeeAlso: `EmptyCollection<Element>`.
public struct EmptyIterator<Element> : IteratorProtocol, Sequence {

    /// Construct an instance.
    public init()

    /// Returns `nil`, indicating that there are no more elements.
    public mutating func next() -> Element?
}

/// The iterator for `EnumeratedSequence`.  `EnumeratedIterator`
/// wraps a `Base` iterator and yields successive `Int` values,
/// starting at zero, along with the elements of the underlying
/// `Base`:
///
///     var iterator = ["foo", "bar"].enumerated().makeIterator()
///     iterator.next() // (0, "foo")
///     iterator.next() // (1, "bar")
///     iterator.next() // nil
///
/// - Note: Idiomatic usage is to call `enumerate` instead of
///   constructing an `EnumerateIterator` directly.
public struct EnumeratedIterator<Base : IteratorProtocol> : IteratorProtocol, Sequence {

    /// The type of element returned by `next()`.
    public typealias Element = (offset: Int, element: Base.Element)

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    ///
    /// - Requires: No preceding call to `self.next()` has returned `nil`.
    public mutating func next() -> (offset: Int, element: Base.Element)?
}

/// The type of the `enumerated()` property.
///
/// `EnumeratedSequence` is a sequence of pairs (*n*, *x*), where *n*s
/// are consecutive `Int`s starting at zero, and *x*s are the elements
/// of a `Base` `Sequence`:
///
///     var s = ["foo", "bar"].enumerated()
///     Array(s) // [(0, "foo"), (1, "bar")]
public struct EnumeratedSequence<Base : Sequence> : Sequence {

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> EnumeratedIterator<Base.Iterator>
}

/// Instances of conforming types can be compared for value equality
/// using operators `==` and `!=`.
///
/// When adopting `Equatable`, only the `==` operator is required to be
/// implemented.  The standard library provides an implementation for `!=`.
public protocol Equatable {

    /// Returns `true` if `lhs` is equal to `rhs`.
    ///
    /// **Equality implies substitutability**.  When `x == y`, `x` and
    /// `y` are interchangeable in any code that only depends on their
    /// values.
    ///
    /// Class instance identity as distinguished by triple-equals `===`
    /// is notably not part of an instance's value.  Exposing other
    /// non-value aspects of `Equatable` types is discouraged, and any
    /// that *are* exposed should be explicitly pointed out in
    /// documentation.
    ///
    /// **Equality is an equivalence relation**
    ///
    /// - `x == x` is `true`
    /// - `x == y` implies `y == x`
    /// - `x == y` and `y == z` implies `x == z`
    ///
    /// **Inequality is the inverse of equality**, i.e. `!(x == y)` iff
    /// `x != y`.
    public func ==(lhs: Self, rhs: Self) -> Bool
}

/// A type representing an error value that can be thrown.
public protocol ErrorProtocol {
}

extension ErrorProtocol {
}

/// Conforming types can be initialized with string literals
/// containing a single [Unicode extended grapheme cluster](http://www.unicode.org/glossary/#extended_grapheme_cluster).
public protocol ExtendedGraphemeClusterLiteralConvertible : UnicodeScalarLiteralConvertible {

    associatedtype ExtendedGraphemeClusterLiteralType

    /// Create an instance initialized to `value`.
    public init(extendedGraphemeClusterLiteral value: Self.ExtendedGraphemeClusterLiteralType)
}

/// The default type for an otherwise-unconstrained Unicode extended
/// grapheme cluster literal.
public typealias ExtendedGraphemeClusterType = String

/// A flattened view of a base collection-of-collections.
///
/// The elements of this view are a concatenation of the elements of
/// each collection in the base.
///
/// The `flatten` property is always lazy, but does not implicitly
/// confer laziness on algorithms applied to its result.  In other
/// words, for ordinary collections `c`:
///
/// * `c.flatten()` does not create new storage
/// * `c.flatten().map(f)` maps eagerly and returns a new array
/// * `c.lazy.flatten().map(f)` maps lazily and returns a `LazyMapCollection`
///
/// - Note: The performance of accessing `startIndex`, `first`, any methods
///   that depend on `startIndex`, or of advancing a `FlattenBidirectionalCollectionIndex`
///   depends on how many empty subcollections are found in the base
///   collection, and may not offer the usual performance given by
///   `CollectionType` or `BidirectionalIndexType`. Be aware, therefore, that
///   general operations on `FlattenBidirectionalCollection` instances may not have the
///   documented complexity.
///
/// - See also: `FlattenSequence`
public struct FlattenBidirectionalCollection<Base : Collection where Base.Iterator.Element : Collection, Base.Index : BidirectionalIndex, Base.Iterator.Element.Index : BidirectionalIndex> : Collection {

    /// A type that represents a valid position in the collection.
    ///
    /// Valid indices consist of the position of every element and a
    /// "past the end" position that's not valid for use as a subscript.
    public typealias Index = FlattenBidirectionalCollectionIndex<Base>

    /// Creates a flattened view of `base`.
    public init(_ base: Base)

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> FlattenIterator<Base.Iterator>

    /// The position of the first element in a non-empty collection.
    ///
    /// In an empty collection, `startIndex == endIndex`.
    public var startIndex: FlattenBidirectionalCollectionIndex<Base> { get }

    /// The collection's "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    public var endIndex: FlattenBidirectionalCollectionIndex<Base> { get }

    /// Access the element at `position`.
    ///
    /// - Precondition: `position` is a valid position in `self` and
    ///   `position != endIndex`.
    public subscript(position: FlattenBidirectionalCollectionIndex<Base>) -> Base.Iterator.Element.Iterator.Element { get }

    /// Returns a value less than or equal to the number of elements in
    /// `self`, **nondestructively**.
    ///
    /// - Complexity: O(N).
    public var underestimatedCount: Int { get }
}

/// A position in a `FlattenBidirectionalCollection`.
public struct FlattenBidirectionalCollectionIndex<BaseElements : Collection where BaseElements.Iterator.Element : Collection, BaseElements.Index : BidirectionalIndex, BaseElements.Iterator.Element.Index : BidirectionalIndex> : BidirectionalIndex {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> FlattenBidirectionalCollectionIndex<BaseElements>

    /// Returns the previous consecutive value before `self`.
    ///
    /// - Precondition: The previous value is representable.
    public func predecessor() -> FlattenBidirectionalCollectionIndex<BaseElements>
}

/// A flattened view of a base collection-of-collections.
///
/// The elements of this view are a concatenation of the elements of
/// each collection in the base.
///
/// The `flatten` property is always lazy, but does not implicitly
/// confer laziness on algorithms applied to its result.  In other
/// words, for ordinary collections `c`:
///
/// * `c.flatten()` does not create new storage
/// * `c.flatten().map(f)` maps eagerly and returns a new array
/// * `c.lazy.flatten().map(f)` maps lazily and returns a `LazyMapCollection`
///
/// - Note: The performance of accessing `startIndex`, `first`, any methods
///   that depend on `startIndex`, or of advancing a `FlattenCollectionIndex`
///   depends on how many empty subcollections are found in the base
///   collection, and may not offer the usual performance given by
///   `CollectionType` or `ForwardIndexType`. Be aware, therefore, that
///   general operations on `FlattenCollection` instances may not have the
///   documented complexity.
///
/// - See also: `FlattenSequence`
public struct FlattenCollection<Base : Collection where Base.Iterator.Element : Collection> : Collection {

    /// A type that represents a valid position in the collection.
    ///
    /// Valid indices consist of the position of every element and a
    /// "past the end" position that's not valid for use as a subscript.
    public typealias Index = FlattenCollectionIndex<Base>

    /// Creates a flattened view of `base`.
    public init(_ base: Base)

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> FlattenIterator<Base.Iterator>

    /// The position of the first element in a non-empty collection.
    ///
    /// In an empty collection, `startIndex == endIndex`.
    public var startIndex: FlattenCollectionIndex<Base> { get }

    /// The collection's "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    public var endIndex: FlattenCollectionIndex<Base> { get }

    /// Access the element at `position`.
    ///
    /// - Precondition: `position` is a valid position in `self` and
    ///   `position != endIndex`.
    public subscript(position: FlattenCollectionIndex<Base>) -> Base.Iterator.Element.Iterator.Element { get }

    /// Returns a value less than or equal to the number of elements in
    /// `self`, **nondestructively**.
    ///
    /// - Complexity: O(N).
    public var underestimatedCount: Int { get }
}

/// A position in a `FlattenCollection`.
public struct FlattenCollectionIndex<BaseElements : Collection where BaseElements.Iterator.Element : Collection> : ForwardIndex {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> FlattenCollectionIndex<BaseElements>
}

/// An iterator that produces the elements contained in each segment
/// produced by some `Base` Iterator.
///
/// The elements traversed are the concatenation of those in each
/// segment produced by the base iterator.
///
/// - Note: This is the `IteratorProtocol` used by `FlattenSequence`,
///   `FlattenCollection`, and `BidirectionalFlattenCollection`.
public struct FlattenIterator<Base : IteratorProtocol where Base.Element : Sequence> : IteratorProtocol, Sequence {

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    ///
    /// - Precondition: `next()` has not been applied to a copy of `self`
    ///   since the copy was made, and no preceding call to `self.next()`
    ///   has returned `nil`.
    public mutating func next() -> Base.Element.Iterator.Element?
}

/// A sequence consisting of all the elements contained in each segment
/// contained in some `Base` sequence.
///
/// The elements of this view are a concatenation of the elements of
/// each sequence in the base.
///
/// The `flatten` property is always lazy, but does not implicitly
/// confer laziness on algorithms applied to its result.  In other
/// words, for ordinary sequences `s`:
///
/// * `s.flatten()` does not create new storage
/// * `s.flatten().map(f)` maps eagerly and returns a new array
/// * `s.lazy.flatten().map(f)` maps lazily and returns a `LazyMapSequence`
///
/// - See also: `FlattenCollection`
public struct FlattenSequence<Base : Sequence where Base.Iterator.Element : Sequence> : Sequence {

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> FlattenIterator<Base.Iterator>
}

/// A single-precision floating-point value type.
public struct Float {

    /// Create an instance initialized to zero.
    public init()

    public init(_bits v: Builtin.FPIEEE32)

    /// Create an instance initialized to `value`.
    public init(_ value: Float)
}

extension Float : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension Float : CustomDebugStringConvertible {

    /// A textual representation of `self`.
    public var debugDescription: String { get }
}

extension Float : FloatingPoint {

    /// The positive infinity.
    public static var infinity: Float { get }

    /// A quiet NaN.
    public static var nan: Float { get }

    /// A quiet NaN.
    public static var quietNaN: Float { get }

    /// `true` iff `self` is negative.
    public var isSignMinus: Bool { get }

    /// `true` iff `self` is normal (not zero, subnormal, infinity, or
    /// NaN).
    public var isNormal: Bool { get }

    /// `true` iff `self` is zero, subnormal, or normal (not infinity
    /// or NaN).
    public var isFinite: Bool { get }

    /// `true` iff `self` is +0.0 or -0.0.
    public var isZero: Bool { get }

    /// `true` iff `self` is subnormal.
    public var isSubnormal: Bool { get }

    /// `true` iff `self` is infinity.
    public var isInfinite: Bool { get }

    /// `true` iff `self` is NaN.
    public var isNaN: Bool { get }

    /// `true` iff `self` is a signaling NaN.
    public var isSignaling: Bool { get }
}

extension Float {

    /// The IEEE 754 "class" of this type.
    public var floatingPointClass: FloatingPointClassification { get }
}

extension Float : IntegerLiteralConvertible {

    public init(_builtinIntegerLiteral value: Builtin.Int2048)

    /// Create an instance initialized to `value`.
    public init(integerLiteral value: Int64)
}

extension Float {

    public init(_builtinFloatLiteral value: Builtin.FPIEEE80)
}

extension Float : FloatLiteralConvertible {

    /// Create an instance initialized to `value`.
    public init(floatLiteral value: Float)
}

extension Float : Comparable, Equatable {
}

extension Float : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension Float : AbsoluteValuable {

    /// Returns the absolute value of `x`.
    public static func abs(x: Float) -> Float
}

extension Float {

    /// Create an instance initialized to `value`.
    public init(_ v: UInt8)

    /// Create an instance initialized to `value`.
    public init(_ v: Int8)

    /// Create an instance initialized to `value`.
    public init(_ v: UInt16)

    /// Create an instance initialized to `value`.
    public init(_ v: Int16)

    /// Create an instance initialized to `value`.
    public init(_ v: UInt32)

    /// Create an instance initialized to `value`.
    public init(_ v: Int32)

    /// Create an instance initialized to `value`.
    public init(_ v: UInt64)

    /// Create an instance initialized to `value`.
    public init(_ v: Int64)

    /// Create an instance initialized to `value`.
    public init(_ v: UInt)

    /// Create an instance initialized to `value`.
    public init(_ v: Int)
}

extension Float {

    /// Construct an instance that approximates `other`.
    public init(_ other: Double)

    /// Construct an instance that approximates `other`.
    public init(_ other: Float80)
}

extension Float : Strideable {

    /// Returns a stride `x` such that `self.advanced(by: x)` approximates
    /// `other`.
    ///
    /// - Complexity: O(1).
    public func distance(to other: Float) -> Float

    /// Returns a `Self` `x` such that `self.distance(to: x)` approximates
    /// `n`.
    ///
    /// - Complexity: O(1).
    public func advanced(by amount: Float) -> Float
}

extension Float {

    /// Construct from an ASCII representation.
    ///
    /// Returns the result of calling the POSIX function
    /// `strtof_l` using the "C" locale, unless
    /// `text` contains non-ASCII text or whitespace, or is not
    /// completely consumed by the call. Otherwise, returns `nil`.
    ///
    /// See the `strtof (3)` man page for details of
    /// the exact format accepted.
    public init?(_ text: String)
}

extension Float : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension Float : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension Float {
}

/// A 32-bit floating point type.
public typealias Float32 = Float

/// A 64-bit floating point type.
public typealias Float64 = Double

/// An extended-precision floating-point value type.
public struct Float80 {

    /// Create an instance initialized to zero.
    public init()

    public init(_bits v: Builtin.FPIEEE80)

    /// Create an instance initialized to `value`.
    public init(_ value: Float80)
}

extension Float80 : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension Float80 : CustomDebugStringConvertible {

    /// A textual representation of `self`.
    public var debugDescription: String { get }
}

extension Float80 : IntegerLiteralConvertible {

    public init(_builtinIntegerLiteral value: Builtin.Int2048)

    /// Create an instance initialized to `value`.
    public init(integerLiteral value: Int64)
}

extension Float80 {

    public init(_builtinFloatLiteral value: Builtin.FPIEEE80)
}

extension Float80 : FloatLiteralConvertible {

    /// Create an instance initialized to `value`.
    public init(floatLiteral value: Float80)
}

extension Float80 : Comparable, Equatable {
}

extension Float80 : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension Float80 : AbsoluteValuable {

    /// Returns the absolute value of `x`.
    public static func abs(x: Float80) -> Float80
}

extension Float80 {

    public init(_ v: UInt8)

    public init(_ v: Int8)

    public init(_ v: UInt16)

    public init(_ v: Int16)

    public init(_ v: UInt32)

    public init(_ v: Int32)

    public init(_ v: UInt64)

    public init(_ v: Int64)

    public init(_ v: UInt)

    public init(_ v: Int)
}

extension Float80 {

    /// Construct an instance that approximates `other`.
    public init(_ other: Float)

    /// Construct an instance that approximates `other`.
    public init(_ other: Double)
}

extension Float80 : Strideable {

    /// Returns a stride `x` such that `self.advanced(by: x)` approximates
    /// `other`.
    ///
    /// - Complexity: O(1).
    public func distance(to other: Float80) -> Float80

    /// Returns a `Self` `x` such that `self.distance(to: x)` approximates
    /// `n`.
    ///
    /// - Complexity: O(1).
    public func advanced(by amount: Float80) -> Float80
}

extension Float80 {

    /// Construct from an ASCII representation.
    ///
    /// Returns the result of calling the POSIX function
    /// `strtold_l` using the "C" locale, unless
    /// `text` contains non-ASCII text or whitespace, or is not
    /// completely consumed by the call. Otherwise, returns `nil`.
    ///
    /// See the `strtold (3)` man page for details of
    /// the exact format accepted.
    public init?(_ text: String)
}

/// Conforming types can be initialized with floating point literals.
public protocol FloatLiteralConvertible {

    associatedtype FloatLiteralType

    /// Create an instance initialized to `value`.
    public init(floatLiteral value: Self.FloatLiteralType)
}

/// The default type for an otherwise-unconstrained floating point literal.
public typealias FloatLiteralType = Double

/// A set of common requirements for Swift's floating point types.
public protocol FloatingPoint : Strideable {

    /// Create an instance initialized to `value`.
    public init(_ value: UInt8)

    /// Create an instance initialized to `value`.
    public init(_ value: Int8)

    /// Create an instance initialized to `value`.
    public init(_ value: UInt16)

    /// Create an instance initialized to `value`.
    public init(_ value: Int16)

    /// Create an instance initialized to `value`.
    public init(_ value: UInt32)

    /// Create an instance initialized to `value`.
    public init(_ value: Int32)

    /// Create an instance initialized to `value`.
    public init(_ value: UInt64)

    /// Create an instance initialized to `value`.
    public init(_ value: Int64)

    /// Create an instance initialized to `value`.
    public init(_ value: UInt)

    /// Create an instance initialized to `value`.
    public init(_ value: Int)

    /// The positive infinity.
    public static var infinity: Self { get }

    /// A quiet NaN.
    public static var nan: Self { get }

    /// A quiet NaN.
    public static var quietNaN: Self { get }

    /// The IEEE 754 "class" of this type.
    public var floatingPointClass: FloatingPointClassification { get }

    /// `true` iff `self` is negative.
    public var isSignMinus: Bool { get }

    /// `true` iff `self` is normal (not zero, subnormal, infinity, or
    /// NaN).
    public var isNormal: Bool { get }

    /// `true` iff `self` is zero, subnormal, or normal (not infinity
    /// or NaN).
    public var isFinite: Bool { get }

    /// `true` iff `self` is +0.0 or -0.0.
    public var isZero: Bool { get }

    /// `true` iff `self` is subnormal.
    public var isSubnormal: Bool { get }

    /// `true` iff `self` is infinity.
    public var isInfinite: Bool { get }

    /// `true` iff `self` is NaN.
    public var isNaN: Bool { get }

    /// `true` iff `self` is a signaling NaN.
    public var isSignaling: Bool { get }
}

/// The set of possible IEEE 754 "classes"
public enum FloatingPointClassification {

    case signalingNaN

    case quietNaN

    case negativeInfinity

    case negativeNormal

    case negativeSubnormal

    case negativeZero

    case positiveZero

    case positiveSubnormal

    case positiveNormal

    case positiveInfinity
}

/// Represents a discrete value in a series, where a value's
/// successor, if any, is reachable by applying the value's
/// `successor()` method.
public protocol ForwardIndex : _Incrementable {

    /// A type that can represent the number of steps between pairs of
    /// `Self` values where one value is reachable from the other.
    ///
    /// Reachability is defined by the ability to produce one value from
    /// the other via zero or more applications of `successor`.
    associatedtype Distance : _SignedInteger = Int

    /// Returns the result of advancing `self` by `n` positions.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Self.Distance) -> Self

    /// Returns the result of advancing `self` by `n` positions, or until it
    /// equals `limit`.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times
    ///     but not past `limit`.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times
    ///     but not past `limit`.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Self.Distance, limit: Self) -> Self

    /// Measure the distance between `self` and `end`.
    ///
    /// - Precondition:
    ///   - `start` and `end` are part of the same sequence when conforming to
    ///     `RandomAccessIndex`.
    ///   - `end` is reachable from `self` by incrementation otherwise.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`n`) otherwise, where `n` is the function's result.
    public func distance(to end: Self) -> Self.Distance
}

extension ForwardIndex {

    public func advanced(by n: Self.Distance) -> Self

    public func advanced(by n: Self.Distance, limit: Self) -> Self

    public func distance(to end: Self) -> Self.Distance
}

/// A half-open `Interval`, which contains its `start` but not its
/// `end`.  Can represent an empty interval.
///
/// - parameter Bound: The type of the endpoints.
public struct HalfOpenInterval<Bound : Comparable> : Interval, Equatable, CustomStringConvertible, CustomDebugStringConvertible, CustomReflectable, CustomPlaygroundQuickLookable {

    /// Construct a copy of `x`.
    public init(_ x: HalfOpenInterval<Bound>)

    /// The `Interval`'s lower bound.
    ///
    /// Invariant: `start` <= `end`.
    public var start: Bound { get }

    /// The `Interval`'s upper bound.
    ///
    /// Invariant: `start` <= `end`.
    public var end: Bound { get }

    /// A textual representation of `self`.
    public var description: String { get }

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }

    /// Returns `true` iff the `Interval` contains `x`.
    public func contains(x: Bound) -> Bool

    /// Returns `intervalToClamp` clamped to `self`.
    ///
    /// The bounds of the result, even if it is empty, are always limited to the bounds of
    /// `self`.
    public func clamp(intervalToClamp: HalfOpenInterval<Bound>) -> HalfOpenInterval<Bound>

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension HalfOpenInterval {

    /// `true` iff the `Interval` is empty.
    public var isEmpty: Bool { get }
}

/// Instances of conforming types provide an integer `hashValue` and
/// can be used as `Dictionary` keys.
public protocol Hashable : Equatable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

/// An optional type that allows implicit member access.
public enum ImplicitlyUnwrappedOptional<Wrapped> : NilLiteralConvertible {

    case none

    case some(Wrapped)

    /// Construct a non-`nil` instance that stores `some`.
    public init(_ some: Wrapped)

    /// Create an instance initialized with `nil`.
    public init(nilLiteral: ())
}

extension ImplicitlyUnwrappedOptional : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

/// Directly conform to CustomDebugStringConvertible to support
/// optional printing. Implementation of that feature relies on
/// _isOptional thus cannot distinguish ImplicitlyUnwrappedOptional
/// from Optional. When conditional conformance is available, this
/// outright conformance can be removed.
extension ImplicitlyUnwrappedOptional : CustomDebugStringConvertible {

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension ImplicitlyUnwrappedOptional {
}

/// A type that provides subscript access to its elements.
///
/// - Important: In most cases, it's best to ignore this protocol and use
///   `CollectionType` instead, as it has a more complete interface.
public protocol Indexable {

    /// A type that represents a valid position in the collection.
    ///
    /// Valid indices consist of the position of every element and a
    /// "past the end" position that's not valid for use as a subscript.
    associatedtype Index : ForwardIndex

    /// The position of the first element in a non-empty collection.
    ///
    /// In an empty collection, `startIndex == endIndex`.
    ///
    /// - Complexity: O(1)
    public var startIndex: Self.Index { get }

    /// The collection's "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    ///
    /// - Complexity: O(1)
    public var endIndex: Self.Index { get }

    /// Returns the element at the given `position`.
    ///
    /// - Complexity: O(1)
    public subscript(position: Self.Index) -> Self._Element { get }
}

/// The iterator used for collections that don't specify one.
public struct IndexingIterator<Elements : Indexable> : IteratorProtocol, Sequence {

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    ///
    /// - Precondition: No preceding call to `self.next()` has returned `nil`.
    public mutating func next() -> Elements._Element?
}

/// A 64-bit signed integer value
/// type.
public struct Int : SignedInteger, Comparable, Equatable {

    /// A type that can represent the number of steps between pairs of
    /// values.
    public typealias Distance = Int

    /// Create an instance initialized to zero.
    public init()

    public init(_ v: Builtin.Word)

    /// Create an instance initialized to `value`.
    public init(_ value: Int)

    /// Creates an integer from its big-endian representation, changing the
    /// byte order if necessary.
    public init(bigEndian value: Int)

    /// Creates an integer from its little-endian representation, changing the
    /// byte order if necessary.
    public init(littleEndian value: Int)

    public init(_builtinIntegerLiteral value: Builtin.Int2048)

    /// Create an instance initialized to `value`.
    public init(integerLiteral value: Int)

    /// Returns the big-endian representation of the integer, changing the
    /// byte order if necessary.
    public var bigEndian: Int { get }

    /// Returns the little-endian representation of the integer, changing the
    /// byte order if necessary.
    public var littleEndian: Int { get }

    /// Returns the current integer with the byte order swapped.
    public var byteSwapped: Int { get }

    public static var max: Int { get }

    public static var min: Int { get }
}

extension Int : RandomAccessIndex {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> Int

    /// Returns the previous consecutive value before `self`.
    ///
    /// - Precondition: The previous value is representable.
    public func predecessor() -> Int

    /// Measure the distance between `self` and `end`.
    ///
    /// - Precondition:
    ///   - `start` and `end` are part of the same sequence when conforming to
    ///     `RandomAccessIndex`.
    ///   - `end` is reachable from `self` by incrementation otherwise.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`n`) otherwise, where `n` is the function's result.
    public func distance(to other: Int) -> Distance

    /// Returns the result of advancing `self` by `n` positions.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Distance) -> Int
}

extension Int : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension Int : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension Int {

    /// Add `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func addWithOverflow(lhs: Int, _ rhs: Int) -> (Int, overflow: Bool)

    /// Subtract `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func subtractWithOverflow(lhs: Int, _ rhs: Int) -> (Int, overflow: Bool)

    /// Multiply `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func multiplyWithOverflow(lhs: Int, _ rhs: Int) -> (Int, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// a result and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func divideWithOverflow(lhs: Int, _ rhs: Int) -> (Int, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// the remainder and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func remainderWithOverflow(lhs: Int, _ rhs: Int) -> (Int, overflow: Bool)

    /// Represent this number using Swift's widest native signed
    /// integer type.
    public func toIntMax() -> IntMax
}

extension Int : SignedNumber {
}

extension Int {

    public init(_ v: UInt8)

    public init(_ v: Int8)

    public init(_ v: UInt16)

    public init(_ v: Int16)

    public init(_ v: UInt32)

    public init(_ v: Int32)

    public init(_ v: UInt64)

    /// Construct a `Int` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt64)

    /// Convert from Swift's widest signed integer type, trapping on
    /// overflow.
    public init(_ v: Int64)

    /// Construct a `Int` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int64)

    public init(_ v: UInt)

    /// Construct a `Int` having the same memory representation as
    /// the `UInt` `bitPattern`.  No range or overflow checking
    /// occurs, and the resulting `Int` may not have the same numeric
    /// value as `bitPattern`--it is only guaranteed to use the same
    /// pattern of bits.
    public init(bitPattern: UInt)
}

extension Int : BitwiseOperations {

    /// The empty bitset of type Int.
    public static var allZeros: Int { get }
}

extension Int {

    /// Construct an instance that approximates `other`.
    public init(_ other: Float)

    /// Construct an instance that approximates `other`.
    public init(_ other: Double)

    /// Construct an instance that approximates `other`.
    public init(_ other: Float80)
}

extension Int {

    /// Construct from an ASCII representation in the given `radix`.
    ///
    /// If `text` does not match the regular expression
    /// "[+-]?[0-9a-zA-Z]+", or the value it denotes in the given `radix`
    /// is not representable, the result is `nil`.
    public init?(_ text: String, radix: Int = default)
}

extension Int : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension Int : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension Int {

    /// Create an `Int` that captures the full value of `objectID`.
    public init(_ objectID: ObjectIdentifier)
}

extension Int : MirrorPath {
}

extension Int : CVarArg {
}

/// A 16-bit signed integer value
/// type.
public struct Int16 : SignedInteger, Comparable, Equatable {

    /// A type that can represent the number of steps between pairs of
    /// values.
    public typealias Distance = Int

    /// Create an instance initialized to zero.
    public init()

    /// Create an instance initialized to `value`.
    public init(_ value: Int16)

    /// Creates an integer from its big-endian representation, changing the
    /// byte order if necessary.
    public init(bigEndian value: Int16)

    /// Creates an integer from its little-endian representation, changing the
    /// byte order if necessary.
    public init(littleEndian value: Int16)

    public init(_builtinIntegerLiteral value: Builtin.Int2048)

    /// Create an instance initialized to `value`.
    public init(integerLiteral value: Int16)

    /// Returns the big-endian representation of the integer, changing the
    /// byte order if necessary.
    public var bigEndian: Int16 { get }

    /// Returns the little-endian representation of the integer, changing the
    /// byte order if necessary.
    public var littleEndian: Int16 { get }

    /// Returns the current integer with the byte order swapped.
    public var byteSwapped: Int16 { get }

    public static var max: Int16 { get }

    public static var min: Int16 { get }
}

extension Int16 : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension Int16 : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension Int16 : RandomAccessIndex {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> Int16

    /// Returns the previous consecutive value before `self`.
    ///
    /// - Precondition: The previous value is representable.
    public func predecessor() -> Int16

    /// Measure the distance between `self` and `end`.
    ///
    /// - Precondition:
    ///   - `start` and `end` are part of the same sequence when conforming to
    ///     `RandomAccessIndex`.
    ///   - `end` is reachable from `self` by incrementation otherwise.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`n`) otherwise, where `n` is the function's result.
    public func distance(to other: Int16) -> Distance

    /// Returns the result of advancing `self` by `n` positions.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Distance) -> Int16
}

extension Int16 {

    /// Add `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func addWithOverflow(lhs: Int16, _ rhs: Int16) -> (Int16, overflow: Bool)

    /// Subtract `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func subtractWithOverflow(lhs: Int16, _ rhs: Int16) -> (Int16, overflow: Bool)

    /// Multiply `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func multiplyWithOverflow(lhs: Int16, _ rhs: Int16) -> (Int16, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// a result and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func divideWithOverflow(lhs: Int16, _ rhs: Int16) -> (Int16, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// the remainder and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func remainderWithOverflow(lhs: Int16, _ rhs: Int16) -> (Int16, overflow: Bool)

    /// Represent this number using Swift's widest native signed
    /// integer type.
    public func toIntMax() -> IntMax
}

extension Int16 : SignedNumber {
}

extension Int16 {

    public init(_ v: UInt8)

    public init(_ v: Int8)

    public init(_ v: UInt16)

    public init(_ v: UInt32)

    /// Construct a `Int16` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt32)

    public init(_ v: Int32)

    /// Construct a `Int16` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int32)

    public init(_ v: UInt64)

    /// Construct a `Int16` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt64)

    /// Convert from Swift's widest signed integer type, trapping on
    /// overflow.
    public init(_ v: Int64)

    /// Construct a `Int16` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int64)

    public init(_ v: UInt)

    /// Construct a `Int16` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt)

    public init(_ v: Int)

    /// Construct a `Int16` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int)

    /// Construct a `Int16` having the same memory representation as
    /// the `UInt16` `bitPattern`.  No range or overflow checking
    /// occurs, and the resulting `Int16` may not have the same numeric
    /// value as `bitPattern`--it is only guaranteed to use the same
    /// pattern of bits.
    public init(bitPattern: UInt16)
}

extension Int16 : BitwiseOperations {

    /// The empty bitset of type Int16.
    public static var allZeros: Int16 { get }
}

extension Int16 {

    /// Construct an instance that approximates `other`.
    public init(_ other: Float)

    /// Construct an instance that approximates `other`.
    public init(_ other: Double)

    /// Construct an instance that approximates `other`.
    public init(_ other: Float80)
}

extension Int16 {

    /// Construct from an ASCII representation in the given `radix`.
    ///
    /// If `text` does not match the regular expression
    /// "[+-]?[0-9a-zA-Z]+", or the value it denotes in the given `radix`
    /// is not representable, the result is `nil`.
    public init?(_ text: String, radix: Int = default)
}

extension Int16 : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension Int16 : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension Int16 : CVarArg {
}

/// A 32-bit signed integer value
/// type.
public struct Int32 : SignedInteger, Comparable, Equatable {

    /// A type that can represent the number of steps between pairs of
    /// values.
    public typealias Distance = Int

    /// Create an instance initialized to zero.
    public init()

    /// Create an instance initialized to `value`.
    public init(_ value: Int32)

    /// Creates an integer from its big-endian representation, changing the
    /// byte order if necessary.
    public init(bigEndian value: Int32)

    /// Creates an integer from its little-endian representation, changing the
    /// byte order if necessary.
    public init(littleEndian value: Int32)

    public init(_builtinIntegerLiteral value: Builtin.Int2048)

    /// Create an instance initialized to `value`.
    public init(integerLiteral value: Int32)

    /// Returns the big-endian representation of the integer, changing the
    /// byte order if necessary.
    public var bigEndian: Int32 { get }

    /// Returns the little-endian representation of the integer, changing the
    /// byte order if necessary.
    public var littleEndian: Int32 { get }

    /// Returns the current integer with the byte order swapped.
    public var byteSwapped: Int32 { get }

    public static var max: Int32 { get }

    public static var min: Int32 { get }
}

extension Int32 : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension Int32 : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension Int32 : RandomAccessIndex {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> Int32

    /// Returns the previous consecutive value before `self`.
    ///
    /// - Precondition: The previous value is representable.
    public func predecessor() -> Int32

    /// Measure the distance between `self` and `end`.
    ///
    /// - Precondition:
    ///   - `start` and `end` are part of the same sequence when conforming to
    ///     `RandomAccessIndex`.
    ///   - `end` is reachable from `self` by incrementation otherwise.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`n`) otherwise, where `n` is the function's result.
    public func distance(to other: Int32) -> Distance

    /// Returns the result of advancing `self` by `n` positions.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Distance) -> Int32
}

extension Int32 {

    /// Add `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func addWithOverflow(lhs: Int32, _ rhs: Int32) -> (Int32, overflow: Bool)

    /// Subtract `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func subtractWithOverflow(lhs: Int32, _ rhs: Int32) -> (Int32, overflow: Bool)

    /// Multiply `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func multiplyWithOverflow(lhs: Int32, _ rhs: Int32) -> (Int32, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// a result and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func divideWithOverflow(lhs: Int32, _ rhs: Int32) -> (Int32, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// the remainder and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func remainderWithOverflow(lhs: Int32, _ rhs: Int32) -> (Int32, overflow: Bool)

    /// Represent this number using Swift's widest native signed
    /// integer type.
    public func toIntMax() -> IntMax
}

extension Int32 : SignedNumber {
}

extension Int32 {

    public init(_ v: UInt8)

    public init(_ v: Int8)

    public init(_ v: UInt16)

    public init(_ v: Int16)

    public init(_ v: UInt32)

    public init(_ v: UInt64)

    /// Construct a `Int32` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt64)

    /// Convert from Swift's widest signed integer type, trapping on
    /// overflow.
    public init(_ v: Int64)

    /// Construct a `Int32` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int64)

    public init(_ v: UInt)

    /// Construct a `Int32` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt)

    public init(_ v: Int)

    /// Construct a `Int32` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int)

    /// Construct a `Int32` having the same memory representation as
    /// the `UInt32` `bitPattern`.  No range or overflow checking
    /// occurs, and the resulting `Int32` may not have the same numeric
    /// value as `bitPattern`--it is only guaranteed to use the same
    /// pattern of bits.
    public init(bitPattern: UInt32)
}

extension Int32 : BitwiseOperations {

    /// The empty bitset of type Int32.
    public static var allZeros: Int32 { get }
}

extension Int32 {

    /// Construct an instance that approximates `other`.
    public init(_ other: Float)

    /// Construct an instance that approximates `other`.
    public init(_ other: Double)

    /// Construct an instance that approximates `other`.
    public init(_ other: Float80)
}

extension Int32 {

    /// Construct from an ASCII representation in the given `radix`.
    ///
    /// If `text` does not match the regular expression
    /// "[+-]?[0-9a-zA-Z]+", or the value it denotes in the given `radix`
    /// is not representable, the result is `nil`.
    public init?(_ text: String, radix: Int = default)
}

extension Int32 : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension Int32 : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension Int32 : CVarArg {
}

/// A 64-bit signed integer value
/// type.
public struct Int64 : SignedInteger, Comparable, Equatable {

    /// A type that can represent the number of steps between pairs of
    /// values.
    public typealias Distance = Int

    /// Create an instance initialized to zero.
    public init()

    /// Create an instance initialized to `value`.
    public init(_ value: Int64)

    /// Creates an integer from its big-endian representation, changing the
    /// byte order if necessary.
    public init(bigEndian value: Int64)

    /// Creates an integer from its little-endian representation, changing the
    /// byte order if necessary.
    public init(littleEndian value: Int64)

    public init(_builtinIntegerLiteral value: Builtin.Int2048)

    /// Create an instance initialized to `value`.
    public init(integerLiteral value: Int64)

    /// Returns the big-endian representation of the integer, changing the
    /// byte order if necessary.
    public var bigEndian: Int64 { get }

    /// Returns the little-endian representation of the integer, changing the
    /// byte order if necessary.
    public var littleEndian: Int64 { get }

    /// Returns the current integer with the byte order swapped.
    public var byteSwapped: Int64 { get }

    public static var max: Int64 { get }

    public static var min: Int64 { get }
}

extension Int64 : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension Int64 : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension Int64 : RandomAccessIndex {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> Int64

    /// Returns the previous consecutive value before `self`.
    ///
    /// - Precondition: The previous value is representable.
    public func predecessor() -> Int64

    /// Measure the distance between `self` and `end`.
    ///
    /// - Precondition:
    ///   - `start` and `end` are part of the same sequence when conforming to
    ///     `RandomAccessIndex`.
    ///   - `end` is reachable from `self` by incrementation otherwise.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`n`) otherwise, where `n` is the function's result.
    public func distance(to other: Int64) -> Distance

    /// Returns the result of advancing `self` by `n` positions.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Distance) -> Int64
}

extension Int64 {

    /// Add `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func addWithOverflow(lhs: Int64, _ rhs: Int64) -> (Int64, overflow: Bool)

    /// Subtract `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func subtractWithOverflow(lhs: Int64, _ rhs: Int64) -> (Int64, overflow: Bool)

    /// Multiply `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func multiplyWithOverflow(lhs: Int64, _ rhs: Int64) -> (Int64, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// a result and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func divideWithOverflow(lhs: Int64, _ rhs: Int64) -> (Int64, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// the remainder and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func remainderWithOverflow(lhs: Int64, _ rhs: Int64) -> (Int64, overflow: Bool)

    /// Represent this number using Swift's widest native signed
    /// integer type.
    public func toIntMax() -> IntMax
}

extension Int64 : SignedNumber {
}

extension Int64 {

    public init(_ v: UInt8)

    public init(_ v: Int8)

    public init(_ v: UInt16)

    public init(_ v: Int16)

    public init(_ v: UInt32)

    public init(_ v: Int32)

    public init(_ v: UInt64)

    public init(_ v: UInt)

    public init(_ v: Int)

    /// Construct a `Int64` having the same memory representation as
    /// the `UInt64` `bitPattern`.  No range or overflow checking
    /// occurs, and the resulting `Int64` may not have the same numeric
    /// value as `bitPattern`--it is only guaranteed to use the same
    /// pattern of bits.
    public init(bitPattern: UInt64)
}

extension Int64 : BitwiseOperations {

    /// The empty bitset of type Int64.
    public static var allZeros: Int64 { get }
}

extension Int64 {

    /// Construct an instance that approximates `other`.
    public init(_ other: Float)

    /// Construct an instance that approximates `other`.
    public init(_ other: Double)

    /// Construct an instance that approximates `other`.
    public init(_ other: Float80)
}

extension Int64 {

    /// Construct from an ASCII representation in the given `radix`.
    ///
    /// If `text` does not match the regular expression
    /// "[+-]?[0-9a-zA-Z]+", or the value it denotes in the given `radix`
    /// is not representable, the result is `nil`.
    public init?(_ text: String, radix: Int = default)
}

extension Int64 : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension Int64 : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension IntMax : MirrorPath {
}

extension Int64 : CVarArg {
}

/// An 8-bit signed integer value
/// type.
public struct Int8 : SignedInteger, Comparable, Equatable {

    /// A type that can represent the number of steps between pairs of
    /// values.
    public typealias Distance = Int

    /// Create an instance initialized to zero.
    public init()

    /// Create an instance initialized to `value`.
    public init(_ value: Int8)

    public init(_builtinIntegerLiteral value: Builtin.Int2048)

    /// Create an instance initialized to `value`.
    public init(integerLiteral value: Int8)

    public static var max: Int8 { get }

    public static var min: Int8 { get }
}

extension Int8 : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension Int8 : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension Int8 : RandomAccessIndex {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> Int8

    /// Returns the previous consecutive value before `self`.
    ///
    /// - Precondition: The previous value is representable.
    public func predecessor() -> Int8

    /// Measure the distance between `self` and `end`.
    ///
    /// - Precondition:
    ///   - `start` and `end` are part of the same sequence when conforming to
    ///     `RandomAccessIndex`.
    ///   - `end` is reachable from `self` by incrementation otherwise.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`n`) otherwise, where `n` is the function's result.
    public func distance(to other: Int8) -> Distance

    /// Returns the result of advancing `self` by `n` positions.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Distance) -> Int8
}

extension Int8 {

    /// Add `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func addWithOverflow(lhs: Int8, _ rhs: Int8) -> (Int8, overflow: Bool)

    /// Subtract `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func subtractWithOverflow(lhs: Int8, _ rhs: Int8) -> (Int8, overflow: Bool)

    /// Multiply `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func multiplyWithOverflow(lhs: Int8, _ rhs: Int8) -> (Int8, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// a result and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func divideWithOverflow(lhs: Int8, _ rhs: Int8) -> (Int8, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// the remainder and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func remainderWithOverflow(lhs: Int8, _ rhs: Int8) -> (Int8, overflow: Bool)

    /// Represent this number using Swift's widest native signed
    /// integer type.
    public func toIntMax() -> IntMax
}

extension Int8 : SignedNumber {
}

extension Int8 {

    public init(_ v: UInt8)

    public init(_ v: UInt16)

    /// Construct a `Int8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt16)

    public init(_ v: Int16)

    /// Construct a `Int8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int16)

    public init(_ v: UInt32)

    /// Construct a `Int8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt32)

    public init(_ v: Int32)

    /// Construct a `Int8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int32)

    public init(_ v: UInt64)

    /// Construct a `Int8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt64)

    /// Convert from Swift's widest signed integer type, trapping on
    /// overflow.
    public init(_ v: Int64)

    /// Construct a `Int8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int64)

    public init(_ v: UInt)

    /// Construct a `Int8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt)

    public init(_ v: Int)

    /// Construct a `Int8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int)

    /// Construct a `Int8` having the same memory representation as
    /// the `UInt8` `bitPattern`.  No range or overflow checking
    /// occurs, and the resulting `Int8` may not have the same numeric
    /// value as `bitPattern`--it is only guaranteed to use the same
    /// pattern of bits.
    public init(bitPattern: UInt8)
}

extension Int8 : BitwiseOperations {

    /// The empty bitset of type Int8.
    public static var allZeros: Int8 { get }
}

extension Int8 {

    /// Construct an instance that approximates `other`.
    public init(_ other: Float)

    /// Construct an instance that approximates `other`.
    public init(_ other: Double)

    /// Construct an instance that approximates `other`.
    public init(_ other: Float80)
}

extension Int8 {

    /// Construct from an ASCII representation in the given `radix`.
    ///
    /// If `text` does not match the regular expression
    /// "[+-]?[0-9a-zA-Z]+", or the value it denotes in the given `radix`
    /// is not representable, the result is `nil`.
    public init?(_ text: String, radix: Int = default)
}

extension Int8 : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension Int8 : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension Int8 : CVarArg {
}

/// The largest native signed integer type.
public typealias IntMax = Int64

/// A set of common requirements for Swift's integer types.
public protocol Integer : _Integer, RandomAccessIndex {
}

/// The common requirements for types that support integer arithmetic.
public protocol IntegerArithmetic : _IntegerArithmetic, Comparable {

    /// Adds `lhs` and `rhs`, returning the result and trapping in case of
    /// arithmetic overflow (except in -Ounchecked builds).
    public func +(lhs: Self, rhs: Self) -> Self

    /// Subtracts `lhs` and `rhs`, returning the result and trapping in case of
    /// arithmetic overflow (except in -Ounchecked builds).
    public func -(lhs: Self, rhs: Self) -> Self

    /// Multiplies `lhs` and `rhs`, returning the result and trapping in case of
    /// arithmetic overflow (except in -Ounchecked builds).
    public func *(lhs: Self, rhs: Self) -> Self

    /// Divides `lhs` and `rhs`, returning the result and trapping in case of
    /// arithmetic overflow (except in -Ounchecked builds).
    public func /(lhs: Self, rhs: Self) -> Self

    /// Divides `lhs` and `rhs`, returning the remainder and trapping in case of
    /// arithmetic overflow (except in -Ounchecked builds).
    public func %(lhs: Self, rhs: Self) -> Self

    /// Explicitly convert to `IntMax`, trapping on overflow (except in
    /// -Ounchecked builds).
    public func toIntMax() -> IntMax
}

/// Conforming types can be initialized with integer literals.
public protocol IntegerLiteralConvertible {

    associatedtype IntegerLiteralType

    /// Create an instance initialized to `value`.
    public init(integerLiteral value: Self.IntegerLiteralType)
}

/// The default type for an otherwise-unconstrained integer literal.
public typealias IntegerLiteralType = Int

/// An interval over a `Comparable` type.
public protocol Interval {

    /// The type of the `Interval`'s endpoints.
    associatedtype Bound : Comparable

    /// Returns `true` iff the interval contains `value`.
    public func contains(value: Self.Bound) -> Bool

    /// Returns `rhs` clamped to `self`.  The bounds of the result, even
    /// if it is empty, are always within the bounds of `self`.
    public func clamp(intervalToClamp: Self) -> Self

    /// `true` iff `self` is empty.
    public var isEmpty: Bool { get }

    /// The `Interval`'s lower bound.
    ///
    /// Invariant: `start` <= `end`.
    public var start: Self.Bound { get }

    /// The `Interval`'s upper bound.
    ///
    /// Invariant: `start` <= `end`.
    public var end: Self.Bound { get }
}

extension Interval {

    /// Returns `true` iff `lhs` and `rhs` have a non-empty intersection.
    public func overlaps<I : Interval where I.Bound == Bound>(other: I) -> Bool
}

/// An iterator that produces one or fewer instances of `Element`.
public struct IteratorOverOne<Element> : IteratorProtocol, Sequence {

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    ///
    /// - Precondition: `next()` has not been applied to a copy of `self`
    ///   since the copy was made, and no preceding call to `self.next()`
    ///   has returned `nil`.
    public mutating func next() -> Element?
}

/// Encapsulates iteration state and interface for iteration over a
/// sequence.
///
/// - Note: While it is safe to copy an iterator, advancing one
///   copy may invalidate the others.
///
/// Any code that uses multiple iterators (or `for`...`in` loops)
/// over a single sequence should have static knowledge that the
/// specific sequence is multi-pass, either because its concrete
/// type is known or because it is constrained to `CollectionType`.
/// Also, the iterators must be obtained by distinct calls to the
/// sequence's `makeIterator()` method, rather than by copying.
public protocol IteratorProtocol {

    /// The type of element traversed by `self`.
    associatedtype Element

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    ///
    /// - Precondition: `next()` has not been applied to a copy of `self`
    ///   since the copy was made, and no preceding call to `self.next()`
    ///   has returned `nil`.  Specific implementations of this protocol
    ///   are encouraged to respond to violations of this requirement by
    ///   calling `preconditionFailure("...")`.
    public mutating func next() -> Self.Element?
}

/// A sequence built around an iterator of type `Base`.
///
/// Useful mostly to recover the ability to use `for`...`in`,
/// given just an iterator `i`:
///
///     for x in IteratorSequence(i) { ... }
public struct IteratorSequence<Base : IteratorProtocol> : IteratorProtocol, Sequence {

    /// Construct an instance whose iterator is a copy of `base`.
    public init(_ base: Base)

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    ///
    /// - Precondition: `next()` has not been applied to a copy of `self`
    ///   since the copy was made, and no preceding call to `self.next()`
    ///   has returned `nil`.
    public mutating func next() -> Base.Element?
}

/// An iterator that presents the elements of the sequences traversed
/// by `Base`, concatenated using a given separator.
public struct JoinedIterator<Base : IteratorProtocol where Base.Element : Sequence> : IteratorProtocol {

    /// Creates an iterator that presents the elements of the sequences
    /// traversed by `base`, concatenated using `separator`.
    ///
    /// - Complexity: O(`separator.count`).
    public init<Separator : Sequence where Separator.Iterator.Element == Base.Element.Iterator.Element>(base: Base, separator: Separator)

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    public mutating func next() -> Base.Element.Iterator.Element?
}

/// A sequence that presents the elements of the `Base` sequences
/// concatenated using a given separator.
public struct JoinedSequence<Base : Sequence where Base.Iterator.Element : Sequence> : Sequence {

    /// Creates a sequence that presents the elements of `base` sequences
    /// concatenated using `separator`.
    ///
    /// - Complexity: O(`separator.count`).
    public init<Separator : Sequence where Separator.Iterator.Element == Base.Iterator.Element.Iterator.Element>(base: Base, separator: Separator)

    /// Return an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> JoinedIterator<Base.Iterator>
}

/// A collection containing the same elements as a `Base` collection,
/// but on which some operations such as `map` and `filter` are
/// implemented lazily.
///
/// - See also: `LazySequenceProtocol`, `LazyCollection`
public struct LazyCollection<Base : Collection> : LazyCollectionProtocol {

    /// The type of the underlying collection
    public typealias Elements = Base

    /// The underlying collection
    public var elements: Base { get }

    /// A type that represents a valid position in the collection.
    ///
    /// Valid indices consist of the position of every element and a
    /// "past the end" position that's not valid for use as a subscript.
    public typealias Index = Base.Index
}

/// Forward implementations to the base collection, to pick up any
/// optimizations it might implement.
extension LazyCollection : Sequence {

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> Base.Iterator

    /// Returns a value less than or equal to the number of elements in
    /// `self`, **nondestructively**.
    ///
    /// - Complexity: O(N).
    public var underestimatedCount: Int { get }
}

extension LazyCollection : Collection {

    /// The position of the first element in a non-empty collection.
    ///
    /// In an empty collection, `startIndex == endIndex`.
    public var startIndex: Base.Index { get }

    /// The collection's "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    public var endIndex: Base.Index { get }

    /// Access the element at `position`.
    ///
    /// - Precondition: `position` is a valid position in `self` and
    ///   `position != endIndex`.
    public subscript(position: Base.Index) -> Base.Iterator.Element { get }

    /// Returns a collection representing a contiguous sub-range of
    /// `self`'s elements.
    ///
    /// - Complexity: O(1)
    public subscript(bounds: Range<Base.Index>) -> LazyCollection<Slice<Base>> { get }

    /// Returns `true` iff `self` is empty.
    public var isEmpty: Bool { get }

    /// Returns the number of elements.
    ///
    /// - Complexity: O(1) if `Index` conforms to `RandomAccessIndex`;
    ///   O(N) otherwise.
    public var count: Base.Index.Distance { get }

    /// Returns the first element of `self`, or `nil` if `self` is empty.
    public var first: Base.Iterator.Element? { get }
}

/// A collection on which normally-eager operations such as `map` and
/// `filter` are implemented lazily.
///
/// Please see `LazySequenceProtocol` for background; `LazyCollectionProtocol`
/// is an analogous component, but for collections.
///
/// To add new lazy collection operations, extend this protocol with
/// methods that return lazy wrappers that are themselves
/// `LazyCollectionProtocol`s.
///
/// - See Also: `LazySequenceProtocol`, `LazyCollection`
public protocol LazyCollectionProtocol : Collection, LazySequenceProtocol {

    /// A `Collection` that can contain the same elements as this one,
    /// possibly with a simpler type.
    ///
    /// - See also: `elements`
    associatedtype Elements : Collection = Self
}

extension LazyCollectionProtocol {

    /// Returns the elements of `self` that satisfy `predicate`.
    ///
    /// - Note: The elements of the result are computed on-demand, as
    ///   the result is used. No buffering storage is allocated and each
    ///   traversal step invokes `predicate` on one or more underlying
    ///   elements.
    public func filter(predicate: (Self.Elements.Iterator.Element) -> Bool) -> LazyFilterCollection<Self.Elements>
}

extension LazyCollectionProtocol {

    /// Returns the concatenated results of mapping `transform` over
    /// `self`.  Equivalent to 
    ///
    ///     self.map(transform).flatten()
    ///
    /// - Complexity: O(1)
    public func flatMap<SegmentOfResult : Collection>(transform: (Self.Elements.Iterator.Element) -> SegmentOfResult) -> LazyCollection<FlattenCollection<LazyMapCollection<Self.Elements, SegmentOfResult>>>
}

extension LazyCollectionProtocol where Elements.Index : BidirectionalIndex {

    /// Returns the concatenated results of mapping `transform` over
    /// `self`.  Equivalent to 
    ///
    ///     self.map(transform).flatten()
    ///
    /// - Complexity: O(1)
    public func flatMap<SegmentOfResult : Collection where SegmentOfResult.Index : BidirectionalIndex>(transform: (Self.Elements.Iterator.Element) -> SegmentOfResult) -> LazyCollection<FlattenBidirectionalCollection<LazyMapCollection<Self.Elements, SegmentOfResult>>>
}

extension LazyCollectionProtocol where Iterator.Element : Collection, Elements.Iterator.Element : Collection, Iterator.Element == Elements.Iterator.Element {

    /// A concatenation of the elements of `self`.
    public func flatten() -> LazyCollection<FlattenCollection<Self.Elements>>
}

extension LazyCollectionProtocol where Iterator.Element : Collection, Index : BidirectionalIndex, Iterator.Element.Index : BidirectionalIndex, Elements.Iterator.Element : Collection, Elements.Index : BidirectionalIndex, Elements.Iterator.Element.Index : BidirectionalIndex, Iterator.Element == Elements.Iterator.Element {

    /// A concatenation of the elements of `self`.
    public func flatten() -> LazyCollection<FlattenBidirectionalCollection<Self.Elements>>
}

/// When there's no special associated `Elements` type, the `elements`
/// property is provided.
extension LazyCollectionProtocol where Elements == Self {

    /// Identical to `self`.
    public var elements: Self { get }
}

extension LazyCollectionProtocol {

    /// Identical to `self`.
    public var lazy: Self { get }
}

extension LazyCollectionProtocol {

    /// Returns a `LazyMapCollection` over this `Collection`.  The elements of
    /// the result are computed lazily, each time they are read, by
    /// calling `transform` function on a base element.
    public func map<U>(transform: (Self.Elements.Iterator.Element) -> U) -> LazyMapCollection<Self.Elements, U>
}

extension LazyCollectionProtocol where Index : BidirectionalIndex, Elements.Index : BidirectionalIndex {

    /// Returns the elements of `self` in reverse order.
    ///
    /// - Complexity: O(1)
    public func reversed() -> LazyCollection<ReverseCollection<Self.Elements>>
}

extension LazyCollectionProtocol where Index : RandomAccessIndex, Elements.Index : RandomAccessIndex {

    /// Returns the elements of `self` in reverse order.
    ///
    /// - Complexity: O(1)
    public func reversed() -> LazyCollection<ReverseRandomAccessCollection<Self.Elements>>
}

/// A lazy `Collection` wrapper that includes the elements of an
/// underlying collection that satisfy a predicate.
///
/// - Note: The performance of accessing `startIndex`, `first`, any methods
///   that depend on `startIndex`, or of advancing a `LazyFilterIndex` depends
///   on how sparsely the filtering predicate is satisfied, and may not offer
///   the usual performance given by `Collection` or `ForwardIndex`. Be
///   aware, therefore, that general operations on `LazyFilterCollection`
///   instances may not have the documented complexity.
public struct LazyFilterCollection<Base : Collection> : LazyCollectionProtocol {

    /// A type that represents a valid position in the collection.
    ///
    /// Valid indices consist of the position of every element and a
    /// "past the end" position that's not valid for use as a subscript.
    public typealias Index = LazyFilterIndex<Base>

    /// The position of the first element in a non-empty collection.
    ///
    /// In an empty collection, `startIndex == endIndex`.
    ///
    /// - Complexity: O(N), where N is the ratio between unfiltered and
    ///   filtered collection counts.
    public var startIndex: LazyFilterIndex<Base> { get }

    /// The collection's "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    ///
    /// - Complexity: O(1).
    public var endIndex: LazyFilterIndex<Base> { get }

    /// Access the element at `position`.
    ///
    /// - Precondition: `position` is a valid position in `self` and
    /// `position != endIndex`.
    public subscript(position: LazyFilterIndex<Base>) -> Base.Iterator.Element { get }

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> LazyFilterIterator<Base.Iterator>
}

/// The `Index` used for subscripting a `LazyFilterCollection`.
///
/// The positions of a `LazyFilterIndex` correspond to those positions
/// `p` in its underlying collection `c` such that `c[p]`
/// satisfies the predicate with which the `LazyFilterIndex` was
/// initialized.
/// 
/// - Note: The performance of advancing a `LazyFilterIndex`
///   depends on how sparsely the filtering predicate is satisfied,
///   and may not offer the usual performance given by models of
///   `ForwardIndex`.
public struct LazyFilterIndex<BaseElements : Collection> : ForwardIndex {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    ///
    /// - Complexity: Amortized O(M), where M is the average distance in
    ///   the base collection between elements that satisfy the
    ///   predicate.
    ///
    /// - Note: This operation may not satisfy the expected complexity
    ///   for models of `ForwardIndex`.
    public func successor() -> LazyFilterIndex<BaseElements>

    /// The position corresponding to `self` in the underlying collection.
    public let base: BaseElements.Index
}

/// An iterator over the elements traversed by some base iterator that also
/// satisfy a given predicate.
///
/// - Note: This is the associated `Iterator` of `LazyFilterSequence`
/// and `LazyFilterCollection`.
public struct LazyFilterIterator<Base : IteratorProtocol> : IteratorProtocol, Sequence {

    /// Advances to the next element and returns it, or `nil` if no next
    /// element exists.
    ///
    /// - Precondition: `next()` has not been applied to a copy of `self`
    ///   since the copy was made, and no preceding call to `self.next()`
    ///   has returned `nil`.
    public mutating func next() -> Base.Element?

    /// The underlying iterator whose elements are being filtered.
    public var base: Base { get }
}

/// A sequence whose elements consist of the elements of some base
/// sequence that also satisfy a given predicate.
///
/// - Note: `s.lazy.filter { ... }`, for an arbitrary sequence `s`,
///   is a `LazyFilterSequence`.
public struct LazyFilterSequence<Base : Sequence> : LazySequenceProtocol {

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> LazyFilterIterator<Base.Iterator>

    /// Creates an instance consisting of the elements `x` of `base` for
    /// which `predicate(x) == true`.
    public init(_base base: Base, whereElementsSatisfy predicate: (Base.Iterator.Element) -> Bool)

    /// The underlying sequence whose elements are being filtered
    public let base: Base
}

/// A `Collection` whose elements consist of those in a `Base`
/// `Collection` passed through a transform function returning `Element`.
/// These elements are computed lazily, each time they're read, by
/// calling the transform function on a base element.
public struct LazyMapCollection<Base : Collection, Element> : LazyCollectionProtocol {

    /// A type that represents a valid position in the collection.
    ///
    /// Valid indices consist of the position of every element and a
    /// "past the end" position that's not valid for use as a subscript.
    public typealias Index = Base.Index

    /// The position of the first element in a non-empty collection.
    ///
    /// In an empty collection, `startIndex == endIndex`.
    ///
    /// - Complexity: O(1)
    public var startIndex: Base.Index { get }

    /// The collection's "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    ///
    /// - Complexity: O(1)
    public var endIndex: Base.Index { get }

    /// Access the element at `position`.
    ///
    /// - Precondition: `position` is a valid position in `self` and
    ///   `position != endIndex`.
    public subscript(position: Base.Index) -> Element { get }

    /// Returns `true` iff `self` is empty.
    public var isEmpty: Bool { get }

    /// Returns the first element of `self`, or `nil` if `self` is empty.
    public var first: Element? { get }

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> LazyMapIterator<Base.Iterator, Element>

    /// Returns a value less than or equal to the number of elements in
    /// `self`, **nondestructively**.
    ///
    /// - Complexity: O(N).
    public var underestimatedCount: Int { get }

    /// Returns the number of elements.
    ///
    /// - Complexity: O(1) if `Index` conforms to `RandomAccessIndex`;
    ///   O(N) otherwise.
    public var count: Base.Index.Distance { get }
}

/// The `IteratorProtocol` used by `MapSequence` and `MapCollection`.
/// Produces each element by passing the output of the `Base`
/// `IteratorProtocol` through a transform function returning `Element`.
public struct LazyMapIterator<Base : IteratorProtocol, Element> : IteratorProtocol, Sequence {

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    ///
    /// - Precondition: `next()` has not been applied to a copy of `self`
    ///   since the copy was made, and no preceding call to `self.next()`
    ///   has returned `nil`.
    public mutating func next() -> Element?

    public var base: Base { get }
}

/// A `Sequence` whose elements consist of those in a `Base`
/// `Sequence` passed through a transform function returning `Element`.
/// These elements are computed lazily, each time they're read, by
/// calling the transform function on a base element.
public struct LazyMapSequence<Base : Sequence, Element> : LazySequenceProtocol {

    /// A `Sequence` that can contain the same elements as this one,
    /// possibly with a simpler type.
    ///
    /// - See also: `elements`
    public typealias Elements = LazyMapSequence<Base, Element>

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> LazyMapIterator<Base.Iterator, Element>

    /// Returns a value less than or equal to the number of elements in
    /// `self`, **nondestructively**.
    ///
    /// - Complexity: O(N).
    public var underestimatedCount: Int { get }
}

/// A sequence containing the same elements as a `Base` sequence, but
/// on which some operations such as `map` and `filter` are
/// implemented lazily.
///
/// - See also: `LazySequenceProtocol`
public struct LazySequence<Base : Sequence> : LazySequenceProtocol, _SequenceWrapper {

    /// The `Base` (presumably non-lazy) sequence from which `self` was created.
    public var elements: Base { get }
}

/// A sequence on which normally-eager operations such as `map` and
/// `filter` are implemented lazily.
///
/// Lazy sequences can be used to avoid needless storage allocation
/// and computation, because they use an underlying sequence for
/// storage and compute their elements on demand.  For example,
///
///     [1, 2, 3].lazy.map { $0 * 2 }
///
/// is a sequence containing { `2`, `4`, `6` }.  Each time an element
/// of the lazy sequence is accessed, an element of the underlying
/// array is accessed and transformed by the closure.
///
/// Sequence operations taking closure arguments, such as `map` and
/// `filter`, are normally eager: they use the closure immediately and
/// return a new array.  Using the `lazy` property gives the standard
/// library explicit permission to store the closure and the sequence
/// in the result, and defer computation until it is needed.
///
/// To add new lazy sequence operations, extend this protocol with
/// methods that return lazy wrappers that are themselves
/// `LazySequenceProtocol`s.  For example, given an eager `scan`
/// method defined as follows
///
///     extension Sequence {
///       /// Returns an array containing the results of
///       ///
///       ///   p.reduce(initial, combine: combine)
///       ///
///       /// for each prefix `p` of `self`, in order from shortest to
///       /// longest.  For example:
///       ///
///       ///     (1..<6).scan(0, combine: +) // [0, 1, 3, 6, 10, 15]
///       ///
///       /// - Complexity: O(N)
///       func scan<ResultElement>(
///         initial: ResultElement,
///         @noescape combine: (ResultElement, Iterator.Element) -> ResultElement
///       ) -> [ResultElement] {
///         var result = [initial]
///         for x in self {
///           result.append(combine(result.last!, x))
///         }
///         return result
///       }
///     }
///
/// we can build a sequence that lazily computes the elements in the
/// result of `scan`:
///
///     struct LazyScanIterator<Base : IteratorProtocol, ResultElement>
///       : IteratorProtocol {
///       mutating func next() -> ResultElement? {
///         return nextElement.map { result in
///           nextElement = base.next().map { combine(result, $0) }
///           return result
///         }
///       }
///       private var nextElement: ResultElement? // The next result of next().
///       private var base: Base                  // The underlying iterator.
///       private let combine: (ResultElement, Base.Element) -> ResultElement
///     }
///     
///     struct LazyScanSequence<Base: Sequence, ResultElement>
///       : LazySequenceProtocol // Chained operations on self are lazy, too
///     {
///       func makeIterator() -> LazyScanIterator<Base.Iterator, ResultElement> {
///         return LazyScanIterator(
///           nextElement: initial, base: base.makeIterator(), combine: combine)
///       }
///       private let initial: ResultElement
///       private let base: Base
///       private let combine:
///         (ResultElement, Base.Iterator.Element) -> ResultElement
///     }
///
/// and finally, we can give all lazy sequences a lazy `scan` method:
///     
///     extension LazySequenceProtocol {
///       /// Returns a sequence containing the results of
///       ///
///       ///   p.reduce(initial, combine: combine)
///       ///
///       /// for each prefix `p` of `self`, in order from shortest to
///       /// longest.  For example:
///       ///
///       ///     Array((1..<6).lazy.scan(0, combine: +)) // [0, 1, 3, 6, 10, 15]
///       ///
///       /// - Complexity: O(1)
///       func scan<ResultElement>(
///         initial: ResultElement,
///         combine: (ResultElement, Iterator.Element) -> ResultElement
///       ) -> LazyScanSequence<Self, ResultElement> {
///         return LazyScanSequence(
///           initial: initial, base: self, combine: combine)
///       }
///     }
///
/// - See also: `LazySequence`, `LazyCollectionProtocol`, `LazyCollection`
///
/// - Note: The explicit permission to implement further operations
///   lazily applies only in contexts where the sequence is statically
///   known to conform to `LazySequenceProtocol`.  Thus, side-effects such
///   as the accumulation of `result` below are never unexpectedly
///   dropped or deferred:
///
///       extension Sequence where Iterator.Element == Int {
///         func sum() -> Int {
///           var result = 0
///           _ = self.map { result += $0 }
///           return result
///         }
///       }
///
///   [We don't recommend that you use `map` this way, because it
///   creates and discards an array. `sum` would be better implemented
///   using `reduce`].
public protocol LazySequenceProtocol : Sequence {

    /// A `Sequence` that can contain the same elements as this one,
    /// possibly with a simpler type.
    ///
    /// - See also: `elements`
    associatedtype Elements : Sequence = Self

    /// A sequence containing the same elements as this one, possibly with
    /// a simpler type.
    ///
    /// When implementing lazy operations, wrapping `elements` instead
    /// of `self` can prevent result types from growing an extra
    /// `LazySequence` layer.  For example,
    ///
    /// _prext_ example needed
    ///
    /// Note: this property need not be implemented by conforming types,
    /// it has a default implementation in a protocol extension that
    /// just returns `self`.
    public var elements: Self.Elements { get }
}

extension LazySequenceProtocol {

    /// Returns the elements of `self` that satisfy `predicate`.
    ///
    /// - Note: The elements of the result are computed on-demand, as
    ///   the result is used. No buffering storage is allocated and each
    ///   traversal step invokes `predicate` on one or more underlying
    ///   elements.
    public func filter(predicate: (Self.Elements.Iterator.Element) -> Bool) -> LazyFilterSequence<Self.Elements>
}

extension LazySequenceProtocol {

    /// Returns the concatenated results of mapping `transform` over
    /// `self`.  Equivalent to 
    ///
    ///     self.map(transform).flatten()
    ///
    /// - Complexity: O(1)
    public func flatMap<SegmentOfResult : Sequence>(transform: (Self.Elements.Iterator.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>
}

extension LazySequenceProtocol where Elements.Iterator.Element == Iterator.Element, Iterator.Element : Sequence {

    /// A concatenation of the elements of `self`.
    public func flatten() -> LazySequence<FlattenSequence<Self.Elements>>
}

/// When there's no special associated `Elements` type, the `elements`
/// property is provided.
extension LazySequenceProtocol where Elements == Self {

    /// Identical to `self`.
    public var elements: Self { get }
}

/// Avoid creating multiple layers of `LazySequence` wrapper.
/// Anything conforming to `LazySequenceProtocol` is already lazy.
extension LazySequenceProtocol {

    /// Identical to `self`.
    public var lazy: Self { get }
}

extension LazySequenceProtocol {
}

extension LazySequenceProtocol {

    /// Returns a `LazyMapSequence` over this `Sequence`.  The elements of
    /// the result are computed lazily, each time they are read, by
    /// calling `transform` function on a base element.
    public func map<U>(transform: (Self.Elements.Iterator.Element) -> U) -> LazyMapSequence<Self.Elements, U>
}

/// A class whose instances contain a property of type `Value` and raw
/// storage for an array of `Element`, whose size is determined at
/// instance creation.
///
/// Note that the `Element` array is suitably-aligned **raw memory**.
/// You are expected to construct and---if necessary---destroy objects
/// there yourself, using the APIs on `UnsafeMutablePointer<Element>`.
/// Typical usage stores a count and capacity in `Value` and destroys
/// any live elements in the `deinit` of a subclass.
/// - Note: Subclasses must not have any stored properties; any storage
///   needed should be included in `Value`.
public class ManagedBuffer<Value, Element> : ManagedProtoBuffer<Value, Element> {

    /// Create a new instance of the most-derived class, calling
    /// `initializeValue` on the partially-constructed object to
    /// generate an initial `Value`.
    final public class func create(minimumCapacity minimumCapacity: Int, initialValue: (ManagedProtoBuffer<Value, Element>) -> Value) -> ManagedBuffer<Value, Element>

    /// The stored `Value` instance.
    final public var value: Value
}

/// Contains a buffer object, and provides access to an instance of
/// `Value` and contiguous storage for an arbitrary number of
/// `Element` instances stored in that buffer.
///
/// For most purposes, the `ManagedBuffer` class works fine for this
/// purpose, and can simply be used on its own.  However, in cases
/// where objects of various different classes must serve as storage,
/// `ManagedBufferPointer` is needed.
///
/// A valid buffer class is non-`@objc`, with no declared stored
///   properties.  Its `deinit` must destroy its
///   stored `Value` and any constructed `Element`s.
///
/// Example Buffer Class
/// --------------------
///
///      class MyBuffer<Element> { // non-@objc
///        typealias Manager = ManagedBufferPointer<(Int,String), Element>
///        deinit {
///          Manager(unsafeBufferObject: self).withUnsafeMutablePointers {
///            (pointerToValue, pointerToElements) -> Void in
///            pointerToElements.deinitialize(count: self.count)
///            pointerToValue.deinitialize()
///          }
///        }
///
///        // All properties are *computed* based on members of the Value
///        var count: Int {
///          return Manager(unsafeBufferObject: self).value.0
///        }
///        var name: String {
///          return Manager(unsafeBufferObject: self).value.1
///        }
///      }
///
public struct ManagedBufferPointer<Value, Element> : Equatable {

    /// Create with new storage containing an initial `Value` and space
    /// for at least `minimumCapacity` `element`s.
    ///
    /// - parameter bufferClass: The class of the object used for storage.
    /// - parameter minimumCapacity: The minimum number of `Element`s that
    ///   must be able to be stored in the new buffer.
    /// - parameter initialValue: A function that produces the initial
    ///   `Value` instance stored in the buffer, given the `buffer`
    ///   object and a function that can be called on it to get the actual
    ///   number of allocated elements.
    ///
    /// - Precondition: `minimumCapacity >= 0`, and the type indicated by
    ///   `bufferClass` is a non-`@objc` class with no declared stored
    ///   properties.  The `deinit` of `bufferClass` must destroy its
    ///   stored `Value` and any constructed `Element`s.
    public init(bufferClass: Swift.AnyClass, minimumCapacity: Int, initialValue: (buffer: AnyObject, capacity: (AnyObject) -> Int) -> Value)

    /// Manage the given `buffer`.
    ///
    /// - Precondition: `buffer` is an instance of a non-`@objc` class whose
    ///   `deinit` destroys its stored `Value` and any constructed `Element`s.
    public init(unsafeBufferObject buffer: AnyObject)

    /// The stored `Value` instance.
    public var value: Value

    /// Returns the object instance being used for storage.
    public var buffer: AnyObject { get }

    /// The actual number of elements that can be stored in this object.
    ///
    /// This value may be nontrivial to compute; it is usually a good
    /// idea to store this information in the "value" area when
    /// an instance is created.
    public var capacity: Int { get }

    /// Call `body` with an `UnsafeMutablePointer` to the stored
    /// `Value`.
    ///
    /// - Note: This pointer is only valid
    ///   for the duration of the call to `body`.
    public func withUnsafeMutablePointerToValue<R>(@noescape body: (UnsafeMutablePointer<Value>) -> R) -> R

    /// Call `body` with an `UnsafeMutablePointer` to the `Element`
    /// storage.
    ///
    /// - Note: This pointer is only valid for the duration of the
    ///   call to `body`.
    public func withUnsafeMutablePointerToElements<R>(body: (UnsafeMutablePointer<Element>) -> R) -> R

    /// Call `body` with `UnsafeMutablePointer`s to the stored `Value`
    /// and raw `Element` storage.
    ///
    /// - Note: These pointers are only valid for the duration of the
    ///   call to `body`.
    public func withUnsafeMutablePointers<R>(body: (UnsafeMutablePointer<Value>, UnsafeMutablePointer<Element>) -> R) -> R

    /// Returns `true` iff `self` holds the only strong reference to its buffer.
    ///
    /// See `isUniquelyReferenced` for details.
    public mutating func holdsUniqueReference() -> Bool

    /// Returns `true` iff either `self` holds the only strong reference
    /// to its buffer or the pinned has been 'pinned'.
    ///
    /// See `isUniquelyReferenced` for details.
    public mutating func holdsUniqueOrPinnedReference() -> Bool
}

extension ManagedBufferPointer {
}

/// A base class of `ManagedBuffer<Value,Element>`, used during
/// instance creation.
///
/// During instance creation, in particular during
/// `ManagedBuffer.create`'s call to initialize, `ManagedBuffer`'s
/// `value` property is as-yet uninitialized, and therefore
/// `ManagedProtoBuffer` does not offer access to the as-yet
/// uninitialized `value` property of `ManagedBuffer`.
public class ManagedProtoBuffer<Value, Element> : NonObjectiveCBase {

    /// The actual number of elements that can be stored in this object.
    ///
    /// This value may be nontrivial to compute; it is usually a good
    /// idea to store this information in the "value" area when
    /// an instance is created.
    final public var capacity: Int { get }

    /// Call `body` with an `UnsafeMutablePointer` to the stored
    /// `Value`.
    ///
    /// - Note: This pointer is only valid for the duration of the
    ///   call to `body`.
    final public func withUnsafeMutablePointerToValue<R>(body: (UnsafeMutablePointer<Value>) -> R) -> R

    /// Call `body` with an `UnsafeMutablePointer` to the `Element`
    /// storage.
    ///
    /// - Note: This pointer is only valid for the duration of the
    ///   call to `body`.
    final public func withUnsafeMutablePointerToElements<R>(body: (UnsafeMutablePointer<Element>) -> R) -> R

    /// Call `body` with `UnsafeMutablePointer`s to the stored `Value`
    /// and raw `Element` storage.
    ///
    /// - Note: These pointers are only valid for the duration of the
    ///   call to `body`.
    final public func withUnsafeMutablePointers<R>(body: (UnsafeMutablePointer<Value>, UnsafeMutablePointer<Element>) -> R) -> R
}

/// Representation of the sub-structure and optional "display style"
/// of any arbitrary subject instance.
///
/// Describes the parts---such as stored properties, collection
/// elements, tuple elements, or the active enumeration case---that
/// make up a particular instance.  May also supply a "display style"
/// property that suggests how this structure might be rendered.
///
/// Mirrors are used by playgrounds and the debugger.
public struct Mirror {

    /// Representation of ancestor classes.
    ///
    /// A `CustomReflectable` class can control how its mirror will
    /// represent ancestor classes by initializing the mirror with a
    /// `AncestorRepresentation`.  This setting has no effect on mirrors
    /// reflecting value type instances.
    public enum AncestorRepresentation {

        /// Generate a default mirror for all ancestor classes.
        ///
        /// This case is the default.
        ///
        /// - Note: This option generates default mirrors even for
        ///   ancestor classes that may implement `CustomReflectable`'s
        ///   `customMirror` requirement.  To avoid dropping an ancestor class
        ///   customization, an override of `customMirror` should pass
        ///   `ancestorRepresentation: .Customized(super.customMirror)` when
        ///   initializing its `Mirror`.
        case generated

        /// Use the nearest ancestor's implementation of `customMirror` to
        /// create a mirror for that ancestor.  Other classes derived from
        /// such an ancestor are given a default mirror.
        ///
        /// The payload for this option should always be
        /// "`{ super.customMirror }`":
        ///
        ///     var customMirror: Mirror {
        ///       return Mirror(
        ///         self,
        ///         children: ["someProperty": self.someProperty],
        ///         ancestorRepresentation: .Customized({ super.customMirror })) // <==
        ///     }
        case customized(() -> Mirror)

        /// Suppress the representation of all ancestor classes.  The
        /// resulting `Mirror`'s `superclassMirror` is `nil`.
        case suppressed
    }

    /// Reflect upon the given `subject`.
    ///
    /// If the dynamic type of `subject` conforms to `CustomReflectable`,
    /// the resulting mirror is determined by its `customMirror` property.
    /// Otherwise, the result is generated by the language.
    ///
    /// - Note: If the dynamic type of `subject` has value semantics,
    ///   subsequent mutations of `subject` will not observable in
    ///   `Mirror`.  In general, though, the observability of such
    /// mutations is unspecified.
    public init(reflecting subject: Swift.Any)

    /// An element of the reflected instance's structure.  The optional
    /// `label` may be used when appropriate, e.g. to represent the name
    /// of a stored property or of an active `enum` case, and will be
    /// used for lookup when `String`s are passed to the `descendant`
    /// method.
    public typealias Child = (label: String?, value: Swift.Any)

    /// The type used to represent sub-structure.
    ///
    /// Depending on your needs, you may find it useful to "upgrade"
    /// instances of this type to `AnyBidirectionalCollection` or
    /// `AnyRandomAccessCollection`.  For example, to display the last
    /// 20 children of a mirror if they can be accessed efficiently, you
    /// might write:
    ///
    ///     if let b = AnyBidirectionalCollection(someMirror.children) {
    ///       for i in b.endIndex.advanced(by: -20, limit: b.startIndex)..<b.endIndex {
    ///          print(b[i])
    ///       }
    ///     }
    public typealias Children = AnyForwardCollection<Mirror.Type.Child>

    /// A suggestion of how a `Mirror`'s is to be interpreted.
    ///
    /// Playgrounds and the debugger will show a representation similar
    /// to the one used for instances of the kind indicated by the
    /// `DisplayStyle` case name when the `Mirror` is used for display.
    public enum DisplayStyle {

        case `struct`

        case `class`

        case `enum`

        case tuple

        case optional

        case collection

        case dictionary

        case set
    }

    /// Represent `subject` with structure described by `children`,
    /// using an optional `displayStyle`.
    ///
    /// If `subject` is not a class instance, `ancestorRepresentation`
    /// is ignored.  Otherwise, `ancestorRepresentation` determines
    /// whether ancestor classes will be represented and whether their
    /// `customMirror` implementations will be used.  By default, a
    /// representation is automatically generated and any `customMirror`
    /// implementation is bypassed.  To prevent bypassing customized
    /// ancestors, `customMirror` overrides should initialize the
    /// `Mirror` with:
    ///
    ///     ancestorRepresentation: .customized({ super.customMirror })
    ///
    /// - Note: The traversal protocol modeled by `children`'s indices
    ///   (`ForwardIndex`, `BidirectionalIndex`, or
    ///   `RandomAccessIndex`) is captured so that the resulting
    /// `Mirror`'s `children` may be upgraded later.  See the failable
    /// initializers of `AnyBidirectionalCollection` and
    /// `AnyRandomAccessCollection` for details.
    public init<Subject, C : Collection where C.Iterator.Element == Child>(_ subject: Subject, children: C, displayStyle: Mirror.DisplayStyle? = default, ancestorRepresentation: Mirror.AncestorRepresentation = default)

    /// Represent `subject` with child values given by
    /// `unlabeledChildren`, using an optional `displayStyle`.  The
    /// result's child labels will all be `nil`.
    ///
    /// This initializer is especially useful for the mirrors of
    /// collections, e.g.:
    ///
    ///     extension MyArray : CustomReflectable {
    ///       var customMirror: Mirror {
    ///         return Mirror(self, unlabeledChildren: self, displayStyle: .collection)
    ///       }
    ///     }
    ///
    /// If `subject` is not a class instance, `ancestorRepresentation`
    /// is ignored.  Otherwise, `ancestorRepresentation` determines
    /// whether ancestor classes will be represented and whether their
    /// `customMirror` implementations will be used.  By default, a
    /// representation is automatically generated and any `customMirror`
    /// implementation is bypassed.  To prevent bypassing customized
    /// ancestors, `customMirror` overrides should initialize the
    /// `Mirror` with:
    ///
    ///     ancestorRepresentation: .Customized({ super.customMirror })
    ///
    /// - Note: The traversal protocol modeled by `children`'s indices
    ///   (`ForwardIndex`, `BidirectionalIndex`, or
    ///   `RandomAccessIndex`) is captured so that the resulting
    /// `Mirror`'s `children` may be upgraded later.  See the failable
    /// initializers of `AnyBidirectionalCollection` and
    /// `AnyRandomAccessCollection` for details.
    public init<Subject, C : Collection>(_ subject: Subject, unlabeledChildren: C, displayStyle: Mirror.DisplayStyle? = default, ancestorRepresentation: Mirror.AncestorRepresentation = default)

    /// Represent `subject` with labeled structure described by
    /// `children`, using an optional `displayStyle`.
    ///
    /// Pass a dictionary literal with `String` keys as `children`.  Be
    /// aware that although an *actual* `Dictionary` is
    /// arbitrarily-ordered, the ordering of the `Mirror`'s `children`
    /// will exactly match that of the literal you pass.
    ///
    /// If `subject` is not a class instance, `ancestorRepresentation`
    /// is ignored.  Otherwise, `ancestorRepresentation` determines
    /// whether ancestor classes will be represented and whether their
    /// `customMirror` implementations will be used.  By default, a
    /// representation is automatically generated and any `customMirror`
    /// implementation is bypassed.  To prevent bypassing customized
    /// ancestors, `customMirror` overrides should initialize the
    /// `Mirror` with:
    ///
    ///     ancestorRepresentation: .customized({ super.customMirror })
    ///
    /// - Note: The resulting `Mirror`'s `children` may be upgraded to
    ///   `AnyRandomAccessCollection` later.  See the failable
    ///   initializers of `AnyBidirectionalCollection` and
    /// `AnyRandomAccessCollection` for details.
    public init<Subject>(_ subject: Subject, children: DictionaryLiteral<String, Swift.Any>, displayStyle: Mirror.DisplayStyle? = default, ancestorRepresentation: Mirror.AncestorRepresentation = default)

    /// The static type of the subject being reflected.
    ///
    /// This type may differ from the subject's dynamic type when `self`
    /// is the `superclassMirror` of another mirror.
    public let subjectType: Swift.Any.Type

    /// A collection of `Child` elements describing the structure of the
    /// reflected subject.
    public let children: Children

    /// Suggests a display style for the reflected subject.
    public let displayStyle: Mirror.DisplayStyle?

    public var superclassMirror: Mirror? { get }
}

extension Mirror {

    /// Return a specific descendant of the reflected subject, or `nil`
    /// Returns a specific descendant of the reflected subject, or `nil`
    /// if no such descendant exists.
    ///
    /// A `String` argument selects the first `Child` with a matching label.
    /// An integer argument *n* select the *n*th `Child`.  For example:
    ///
    ///   var d = Mirror(reflecting: x).descendant(1, "two", 3)
    ///
    /// is equivalent to:
    ///
    ///     var d = nil
    ///     let children = Mirror(reflecting: x).children
    ///     let p0 = children.startIndex.advanced(by: 1, limit: children.endIndex)
    ///     if p0 != children.endIndex {
    ///       let grandChildren = Mirror(reflecting: children[p0].value).children
    ///       SeekTwo: for g in grandChildren {
    ///         if g.label == "two" {
    ///           let greatGrandChildren = Mirror(reflecting: g.value).children
    ///           let p1 = greatGrandChildren.startIndex.advanced(
    ///             by: 3,
    ///             limit: greatGrandChildren.endIndex)
    ///           if p1 != endIndex { d = greatGrandChildren[p1].value }
    ///           break SeekTwo
    ///         }
    ///       }
    ///
    /// As you can see, complexity for each element of the argument list
    /// depends on the argument type and capabilities of the collection
    /// used to initialize the corresponding subject's parent's mirror.
    /// Each `String` argument results in a linear search.  In short,
    /// this function is suitable for exploring the structure of a
    /// `Mirror` in a REPL or playground, but don't expect it to be
    /// efficient.
    public func descendant(first: MirrorPath, _ rest: MirrorPath...) -> Swift.Any?
}

/// Reflection for `Mirror` itself.
extension Mirror : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension Mirror : CustomReflectable {

    /// The `Mirror` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `Mirror` should be
    ///   unaffected by subsequent mutations of `self`.
    public var customMirror: Mirror { get }
}

/// A protocol for legitimate arguments to `Mirror`'s `descendant`
/// method.
///
/// Do not declare new conformances to this protocol; they will not
/// work as expected.
public protocol MirrorPath {
}

/// A *collection* that supports subscript assignment.
///
/// For any instance `a` of a type conforming to
/// `MutableCollection`, :
///
///     a[i] = x
///     let y = a[i]
///
/// is equivalent to:
///
///     a[i] = x
///     let y = x
///
public protocol MutableCollection : MutableIndexable, Collection {

    associatedtype SubSequence : Collection = MutableSlice<Self>

    /// Access the element at `position`.
    ///
    /// - Precondition: `position` indicates a valid position in `self` and
    ///   `position != endIndex`.
    ///
    /// - Complexity: O(1)
    public subscript(position: Self.Index) -> Self.Iterator.Element { get set }

    /// Returns a collection representing a contiguous sub-range of
    /// `self`'s elements.
    ///
    /// - Complexity: O(1) for the getter, O(`bounds.count`) for the setter.
    public subscript(bounds: Range<Self.Index>) -> Self.SubSequence { get set }
}

extension MutableCollection {

    public subscript(bounds: Range<Self.Index>) -> MutableSlice<Self>
}

extension MutableCollection where Index : RandomAccessIndex {

    /// Re-order the given `range` of elements in `self` and return
    /// a pivot index *p*.
    ///
    /// - Postcondition: For all *i* in `range.startIndex..<`\ *p*, and *j*
    ///   in *p*\ `..<range.endIndex`, `less(self[`\ *i*\ `],
    ///   self[`\ *j*\ `]) && !less(self[`\ *j*\ `], self[`\ *p*\ `])`.
    ///   Only returns `range.endIndex` when `self` is empty.
    ///
    /// - Precondition: `isOrderedBefore` is a
    ///   [strict weak ordering](http://en.wikipedia.org/wiki/Strict_weak_order#Strict_weak_orderings)
    ///   over the elements in `self`.
    public mutating func partition(@noescape isOrderedBefore isOrderedBefore: (Self.Iterator.Element, Self.Iterator.Element) -> Bool) -> Self.Index
}

extension MutableCollection where Index : RandomAccessIndex, Iterator.Element : Comparable {

    /// Re-order the given `range` of elements in `self` and return
    /// a pivot index *p*.
    ///
    /// - Postcondition: For all *i* in `range.startIndex..<`\ *p*, and *j*
    ///   in *p*\ `..<range.endIndex`, `less(self[`\ *i*\ `],
    ///   self[`\ *j*\ `]) && !less(self[`\ *j*\ `], self[`\ *p*\ `])`.
    ///   Only returns `range.endIndex` when `self` is empty.
    ///
    /// - Precondition: The less-than operator (`func <`) defined in
    ///   the `Comparable` conformance is a
    ///   [strict weak ordering](http://en.wikipedia.org/wiki/Strict_weak_order#Strict_weak_orderings)
    ///   over the elements in `self`.
    public mutating func partition() -> Self.Index
}

extension MutableCollection where Self.Iterator.Element : Comparable {

    /// Returns an `Array` containing the sorted elements of `source`.
    ///
    /// The sorting algorithm is not stable (can change the relative order of
    /// elements that compare equal).
    ///
    /// - Precondition: The less-than operator (`func <`) defined in
    ///   the `Comparable` conformance is a
    ///   [strict weak ordering](http://en.wikipedia.org/wiki/Strict_weak_order#Strict_weak_orderings)
    ///   over the elements in `self`.
    public func sorted() -> [Self.Iterator.Element]
}

extension MutableCollection {

    /// Returns an `Array` containing the sorted elements of `source`
    /// according to `isOrderedBefore`.
    ///
    /// The sorting algorithm is not stable (can change the relative order of
    /// elements for which `isOrderedBefore` does not establish an order).
    ///
    /// - Precondition: `isOrderedBefore` is a
    ///   [strict weak ordering](http://en.wikipedia.org/wiki/Strict_weak_order#Strict_weak_orderings)
    ///   over the elements in `self`.
    public func sorted(@noescape isOrderedBefore isOrderedBefore: (Self.Iterator.Element, Self.Iterator.Element) -> Bool) -> [Self.Iterator.Element]
}

extension MutableCollection where Self.Index : RandomAccessIndex, Self.Iterator.Element : Comparable {

    /// Sort `self` in-place.
    ///
    /// The sorting algorithm is not stable (can change the relative order of
    /// elements that compare equal).
    ///
    /// - Precondition: The less-than operator (`func <`) defined in
    ///   the `Comparable` conformance is a
    ///   [strict weak ordering](http://en.wikipedia.org/wiki/Strict_weak_order#Strict_weak_orderings)
    ///   over the elements in `self`.
    public mutating func sort()
}

extension MutableCollection where Self.Index : RandomAccessIndex {

    /// Sort `self` in-place according to `isOrderedBefore`.
    ///
    /// The sorting algorithm is not stable (can change the relative order of
    /// elements for which `isOrderedBefore` does not establish an order).
    ///
    /// - Precondition: `isOrderedBefore` is a
    ///   [strict weak ordering](http://en.wikipedia.org/wiki/Strict_weak_order#Strict_weak_orderings)
    ///   over the elements in `self`.
    public mutating func sort(@noescape isOrderedBefore isOrderedBefore: (Self.Iterator.Element, Self.Iterator.Element) -> Bool)
}

/// A type that supports subscript assignment to a mutable collection.
public protocol MutableIndexable {

    associatedtype Index : ForwardIndex

    public var startIndex: Self.Index { get }

    public var endIndex: Self.Index { get }

    public subscript(position: Self.Index) -> Self._Element { get set }
}

/// A view into a sub-sequence of elements of another collection.
///
/// A `MutableSlice` instance stores the base collection, the start and end indices of
/// the view.  It does not copy the elements from the collection into separate
/// storage. Thus, creating a slice has `O(1)` complexity.
///
/// A `MutableSlice` instance inherits the value or reference semantics of the base
/// collection.  That is, if a `MutableSlice` instance is wrapped around a mutable
/// collection that has value semantics (for example, `Array`), mutating the
/// original collection would not affect the copy stored inside of the slice.
///
/// An element of a slice is located under the same index in the slice and in
/// the base collection, as long as neither the collection or the slice were
/// mutated.  Thus, indices of a slice can be used interchangeably with indices
/// of the base collection.
///
/// - Warning: Long-term storage of `MutableSlice` instances is discouraged.
///
///   Because a `MutableSlice` presents a *view* onto the storage of some larger
///   collection even after the original collection goes out of scope, storing
///   the slice may prolong the lifetime of elements that are no longer
///   accessible, which can manifest as apparent memory and object leakage.  To
///   prevent this effect, use slices only for transient computation.
///
/// - Warning: `MutableSlice` requires the setter of `Base.subscript(_: Index)`
///   to not invalidate indices.  If you are writing a collection and mutations
///   need to invalidate indices, don't use `MutableSlice`, use `Slice` or
///   define your own `Base.SubSequence` type that takes that into account.
public struct MutableSlice<Base : MutableIndexable> : MutableCollection {

    /// A type that represents a valid position in the collection.
    ///
    /// Valid indices consist of the position of every element and a
    /// "past the end" position that's not valid for use as a subscript.
    public typealias Index = Base.Index

    /// The position of the first element in a non-empty collection.
    ///
    /// In an empty collection, `startIndex == endIndex`.
    ///
    /// - Complexity: O(1)
    public var startIndex: Base.Index { get }

    /// The collection's "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    ///
    /// - Complexity: O(1)
    public var endIndex: Base.Index { get }

    /// Access the element at `position`.
    ///
    /// - Precondition: `position` indicates a valid position in `self` and
    ///   `position != endIndex`.
    ///
    /// - Complexity: O(1)
    public subscript(index: Base.Index) -> Base._Element

    /// Returns a collection representing a contiguous sub-range of
    /// `self`'s elements.
    ///
    /// - Complexity: O(1) for the getter, O(`bounds.count`) for the setter.
    public subscript(bounds: Range<Base.Index>) -> MutableSlice<Base>
}

/// Conforming types can be initialized with `nil`.
public protocol NilLiteralConvertible {

    /// Create an instance initialized with `nil`.
    public init(nilLiteral: ())
}

/// A common base class for classes that need to be non-`@objc`,
/// recognizably in the type system.
///
/// - SeeAlso: `isUniquelyReferenced`
public class NonObjectiveCBase {

    public init()
}

/// A unique identifier for a class instance or metatype.
///
/// In Swift, only class instances and metatypes have unique identities. There
/// is no notion of identity for structs, enums, functions, or tuples.
public struct ObjectIdentifier : Hashable, Comparable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }

    /// Construct an instance that uniquely identifies the class instance `x`.
    public init(_ x: AnyObject)

    /// Construct an instance that uniquely identifies the metatype `x`.
    public init(_ x: Swift.Any.Type)
}

extension ObjectIdentifier {
}

/// A wrapper around an opaque C pointer.
///
/// Opaque pointers are used to represent C pointers to types that
/// cannot be represented in Swift, such as incomplete struct types.
public struct OpaquePointer : Equatable, Hashable, NilLiteralConvertible {

    /// Create an instance initialized with `nil`.
    public init(nilLiteral: ())

    /// Construct an `OpaquePointer` from a given address in memory.
    public init(bitPattern: Int)

    /// Construct an `OpaquePointer` from a given address in memory.
    public init(bitPattern: UInt)

    /// Convert a typed `UnsafePointer` to an opaque C pointer.
    public init<T>(_ source: UnsafePointer<T>)

    /// Convert a typed `UnsafeMutablePointer` to an opaque C pointer.
    public init<T>(_ source: UnsafeMutablePointer<T>)

    /// Unsafely convert an unmanaged class reference to an opaque
    /// C pointer.
    ///
    /// This operation does not change reference counts.
    ///
    ///     let str0: CFString = "boxcar"
    ///     let bits = OpaquePointer(bitPattern: Unmanaged(withoutRetaining: str0))
    ///     let str1 = Unmanaged<CFString>(bitPattern: bits).object
    public init<T>(bitPattern bits: Unmanaged<T>)

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension OpaquePointer : CustomDebugStringConvertible {

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension OpaquePointer : CVarArg {
}

/// Supplies convenient conformance to `SetAlgebra` for any type
/// whose `RawValue` is a `BitwiseOperations`.  For example:
///
///     struct PackagingOptions : OptionSet {
///       let rawValue: Int
///       init(rawValue: Int) { self.rawValue = rawValue }
///     
///       static let box = PackagingOptions(rawValue: 1)
///       static let carton = PackagingOptions(rawValue: 2)
///       static let bag = PackagingOptions(rawValue: 4)
///       static let satchel = PackagingOptions(rawValue: 8)
///       static let boxOrBag: PackagingOptions = [box, bag]
///       static let boxOrCartonOrBag: PackagingOptions = [box, carton, bag]
///     }
///
/// In the example above, `PackagingOptions.Element` is the same type
/// as `PackagingOptions`, and instance `a` subsumes instance `b` if
/// and only if `a.rawValue & b.rawValue == b.rawValue`.
public protocol OptionSet : SetAlgebra, RawRepresentable {

    /// An `OptionSet`'s `Element` type is normally `Self`.
    associatedtype Element = Self

    /// Convert from a value of `RawValue`, succeeding unconditionally.
    public init(rawValue: Self.RawValue)
}

/// `OptionSet` requirements for which default implementations
/// are supplied.
///
/// - Note: A type conforming to `OptionSet` can implement any of
///  these initializers or methods, and those implementations will be
///  used in lieu of these defaults.
extension OptionSet {

    /// Returns the set of elements contained in `self`, in `other`, or in
    /// both `self` and `other`.
    public func union(other: Self) -> Self

    /// Returns the set of elements contained in both `self` and `other`.
    public func intersect(other: Self) -> Self

    /// Returns the set of elements contained in `self` or in `other`,
    /// but not in both `self` and `other`.
    public func exclusiveOr(other: Self) -> Self
}

/// `OptionSet` requirements for which default implementations are
/// supplied when `Element == Self`, which is the default.
///
/// - Note: A type conforming to `OptionSet` can implement any of
///   these initializers or methods, and those implementations will be
///   used in lieu of these defaults.
extension OptionSet where Element == Self {

    /// Returns `true` if `self` contains `member`.
    ///
    /// - Equivalent to `self.intersect([member]) == [member]`
    public func contains(member: Self) -> Bool

    /// If `member` is not already contained in `self`, insert it.
    ///
    /// - Equivalent to `self.unionInPlace([member])`
    /// - Postcondition: `self.contains(member)`
    public mutating func insert(member: Self)

    /// If `member` is contained in `self`, remove and return it.
    /// Otherwise, return `nil`.
    ///
    /// - Postcondition: `self.intersect([member]).isEmpty`
    public mutating func remove(member: Self) -> Self?
}

/// `OptionSet` requirements for which default implementations are
/// supplied when `RawValue` conforms to `BitwiseOperations`,
/// which is the usual case.  Each distinct bit of an option set's
/// `.rawValue` corresponds to a disjoint element of the option set.
///
/// - `union` is implemented as a bitwise "or" (`|`) of `rawValue`s
/// - `intersection` is implemented as a bitwise "and" (`|`) of `rawValue`s
/// - `exclusiveOr` is implemented as a bitwise "exclusive or" (`^`) of `rawValue`s
///
/// - Note: A type conforming to `OptionSet` can implement any of
///   these initializers or methods, and those implementations will be
///   used in lieu of these defaults.
extension OptionSet where RawValue : BitwiseOperations {

    /// Create an empty instance.
    ///
    /// - Equivalent to `[] as Self`
    public convenience init()

    /// Insert all elements of `other` into `self`.
    ///
    /// - Equivalent to replacing `self` with `self.union(other)`.
    /// - Postcondition: `self.isSupersetOf(other)`
    public mutating func unionInPlace(other: Self)

    /// Remove all elements of `self` that are not also present in
    /// `other`.
    ///
    /// - Equivalent to replacing `self` with `self.intersect(other)`
    /// - Postcondition: `self.isSubsetOf(other)`
    public mutating func intersectInPlace(other: Self)

    /// Replace `self` with a set containing all elements contained in
    /// either `self` or `other`, but not both.
    ///
    /// - Equivalent to replacing `self` with `self.exclusiveOr(other)`
    public mutating func exclusiveOrInPlace(other: Self)
}

/// A type that can represent either a `Wrapped` value or `nil`, the absence 
/// of a value.
public enum Optional<Wrapped> : NilLiteralConvertible {

    case none

    case some(Wrapped)

    /// Construct a non-`nil` instance that stores `some`.
    public init(_ some: Wrapped)

    /// If `self == nil`, returns `nil`.  Otherwise, returns `f(self!)`.
    public func map<U>(@noescape f: (Wrapped) throws -> U) rethrows -> U?

    /// Returns `nil` if `self` is `nil`, `f(self!)` otherwise.
    public func flatMap<U>(@noescape f: (Wrapped) throws -> U?) rethrows -> U?

    /// Create an instance initialized with `nil`.
    public init(nilLiteral: ())

    /// - Returns: `nonEmpty!`.
    ///
    /// - Precondition: `nonEmpty != nil`.  In particular, in -O builds, no test
    ///   is performed to ensure that `nonEmpty` actually is non-nil.
    ///
    /// - Warning: Trades safety for performance.  Use `unsafelyUnwrapped`
    ///   only when `nonEmpty!` has proven to be a performance problem and
    ///   you are confident that, always, `nonEmpty != nil`.  It is better
    ///   than an `unsafeBitCast` because it's more restrictive, and
    ///   because checking is still performed in debug builds.
    public var unsafelyUnwrapped: Wrapped { get }
}

extension Optional : CustomDebugStringConvertible {

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

/// A target of text streaming operations.
public protocol OutputStream {

    /// Append the given `string` to this stream.
    public mutating func write(string: String)
}

/// The sum of types that can be used as a quick look representation.
public enum PlaygroundQuickLook {

    /// Plain text.
    case text(String)

    /// An integer numeric value.
    case int(Int64)

    /// An unsigned integer numeric value.
    case uInt(UInt64)

    /// A single precision floating-point numeric value.
    case float(Float32)

    /// A double precision floating-point numeric value.
    case double(Float64)

    /// An image.
    case image(Swift.Any)

    /// A sound.
    case sound(Swift.Any)

    /// A color.
    case color(Swift.Any)

    /// A bezier path.
    case bezierPath(Swift.Any)

    /// An attributed string.
    case attributedString(Swift.Any)

    /// A rectangle.
    case rectangle(Float64, Float64, Float64, Float64)

    /// A point.
    case point(Float64, Float64)

    /// A size.
    case size(Float64, Float64)

    /// A boolean value.
    case bool(Bool)

    /// A range.
    case range(Int64, Int64)

    /// A GUI view.
    case view(Swift.Any)

    /// A graphical sprite.
    case sprite(Swift.Any)

    /// A Uniform Resource Locator.
    case url(String)

    /// Raw data that has already been encoded in a format the IDE understands.
    case _raw([UInt8], String)
}

extension PlaygroundQuickLook {

    /// Initialize for the given `subject`.
    ///
    /// If the dynamic type of `subject` conforms to
    /// `CustomPlaygroundQuickLookable`, returns the result of calling
    /// its `customPlaygroundQuickLook` property.  Otherwise, returns
    /// a `PlaygroundQuickLook` synthesized for `subject` by the
    /// language.  Note that in some cases the result may be
    /// `.Text(String(reflecting: subject))`.
    ///
    /// - Note: If the dynamic type of `subject` has value semantics,
    ///   subsequent mutations of `subject` will not observable in
    ///   `Mirror`.  In general, though, the observability of such
    /// mutations is unspecified.
    public init(reflecting subject: Swift.Any)
}

/// Command-line arguments for the current process.
public enum Process {

    /// Access to the raw argc value from C.
    public static var argc: CInt { get }

    /// Access to the raw argv value from C. Accessing the argument vector
    /// through this pointer is unsafe.
    public static var unsafeArgv: UnsafeMutablePointer<UnsafeMutablePointer<Int8>> { get }

    /// Access to the swift arguments, also use lazy initialization of static
    /// properties to safely initialize the swift arguments.
    ///
    /// NOTE: we can not use static lazy let initializer as they can be moved
    /// around by the optimizer which will break the data dependence on argc
    /// and argv.
    public static var arguments: [String] { get }
}

/// An index that can be offset by an arbitrary number of positions,
/// and can measure the distance to any reachable value, in O(1).
public protocol RandomAccessIndex : BidirectionalIndex, Strideable, _RandomAccessAmbiguity {

    public func distance(to other: Self) -> Self.Distance

    public func advanced(by n: Self.Distance) -> Self

    public func advanced(by n: Self.Distance, limit: Self) -> Self
}

extension RandomAccessIndex {

    public func advanced(by n: Self.Distance, limit: Self) -> Self
}

/// A collection of consecutive discrete index values.
///
/// - parameter Element: Is both the element type and the index type of the
///   collection.
///
/// Like other collections, a range containing one element has an
/// `endIndex` that is the successor of its `startIndex`; and an empty
/// range has `startIndex == endIndex`.
///
/// Axiom: for any `Range` `r`, `r[i] == i`.
///
/// Therefore, if `Element` has a maximal value, it can serve as an
/// `endIndex`, but can never be contained in a `Range<Element>`.
///
/// It also follows from the axiom above that `(-99..<100)[0] == 0`.
/// To prevent confusion (because some expect the result to be `-99`),
/// in a context where `Element` is known to be an integer type,
/// subscripting with `Element` is a compile-time error:
///
///     // error: could not find an overload for 'subscript'...
///     print(Range<Int>(start: -99, end: 100)[0])
///
/// However, subscripting that range still works in a generic context:
///
///     func brackets<Element : ForwardIndex>(x: Range<Element>, i: Element) -> Element {
///       return x[i] // Just forward to subscript
///     }
///     print(brackets(Range<Int>(start: -99, end: 100), 0))
///     // Prints "0"
public struct Range<Element : ForwardIndex> : Equatable, Collection, CustomStringConvertible, CustomDebugStringConvertible {

    /// Construct a copy of `x`.
    public init(_ x: Range<Element>)

    /// Access the element at `position`.
    ///
    /// - Precondition: `position` is a valid position in `self` and
    ///   `position != endIndex`.
    public subscript(position: Element) -> Element { get }

    public subscript(_: Element._DisabledRangeIndex) -> Element { get }

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> RangeIterator<Element>

    /// The range's lower bound.
    ///
    /// Identical to `endIndex` in an empty range.
    public var startIndex: Element

    /// The range's upper bound.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    public var endIndex: Element

    /// A textual representation of `self`.
    public var description: String { get }

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension Range : CustomReflectable {

    /// The `Mirror` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `Mirror` should be
    ///   unaffected by subsequent mutations of `self`.
    public var customMirror: Mirror { get }
}

/// O(1) implementation of `contains()` for ranges of comparable elements.
extension Range where Element : Comparable {

    public func contains(element: Element) -> Bool
}

/// An iterator over the elements of `Range<Element>`.
public struct RangeIterator<Element : ForwardIndex> : IteratorProtocol, Sequence {

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    public mutating func next() -> Element?
}

/// A collection that supports replacement of an arbitrary subrange
/// of elements with the elements of another collection.
public protocol RangeReplaceableCollection : Collection {

    /// Create an empty instance.
    public init()

    /// Construct a Collection of `count` elements, each initialized to
    /// `repeatedValue`.
    public init(repeating repeatedValue: Self.Iterator.Element, count: Int)

    /// Replace the given `subRange` of elements with `newElements`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`subRange.count`) if
    ///   `subRange.endIndex == self.endIndex` and `newElements.isEmpty`,
    ///   O(`self.count` + `newElements.count`) otherwise.
    public mutating func replaceSubrange<C : Collection where C.Iterator.Element == Iterator.Element>(subRange: Range<Self.Index>, with newElements: C)

    /// A non-binding request to ensure `n` elements of available storage.
    ///
    /// This works as an optimization to avoid multiple reallocations of
    /// linear data structures like `Array`.  Conforming types may
    /// reserve more than `n`, exactly `n`, less than `n` elements of
    /// storage, or even ignore the request completely.
    public mutating func reserveCapacity(n: Self.Index.Distance)

    /// Creates a collection instance that contains `elements`.
    public init<S : Sequence where S.Iterator.Element == Iterator.Element>(_ elements: S)

    /// Append `x` to `self`.
    ///
    /// Applying `successor()` to the index of the new element yields
    /// `self.endIndex`.
    ///
    /// - Complexity: Amortized O(1).
    public mutating func append(x: Self.Iterator.Element)

    /// Append the elements of `newElements` to `self`.
    ///
    /// - Complexity: O(*length of result*).
    public mutating func append<S : Sequence where S.Iterator.Element == Iterator.Element>(contentsOf newElements: S)

    /// Insert `newElement` at index `i`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func insert(newElement: Self.Iterator.Element, at i: Self.Index)

    /// Insert `newElements` at index `i`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`self.count + newElements.count`).
    public mutating func insert<S : Collection where S.Iterator.Element == Iterator.Element>(contentsOf newElements: S, at i: Self.Index)

    /// Remove the element at index `i`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func remove(at i: Self.Index) -> Self.Iterator.Element

    /// Remove the element at `startIndex` and return it.
    ///
    /// - Complexity: O(`self.count`)
    /// - Precondition: `!self.isEmpty`.
    public mutating func removeFirst() -> Self.Iterator.Element

    /// Remove the first `n` elements.
    ///
    /// - Complexity: O(`self.count`)
    /// - Precondition: `n >= 0 && self.count >= n`.
    public mutating func removeFirst(n: Int)

    /// Remove all elements within `bounds`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func removeSubrange(bounds: Range<Self.Index>)

    /// Remove all elements.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - parameter keepCapacity: If `true`, is a non-binding request to
    ///    avoid releasing storage, which can be a useful optimization
    ///    when `self` is going to be grown again.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func removeAll(keepingCapacity keepCapacity: Bool)
}

extension RangeReplaceableCollection {

    public convenience init(repeating repeatedValue: Self.Iterator.Element, count: Int)

    public convenience init<S : Sequence where S.Iterator.Element == Iterator.Element>(_ elements: S)

    public mutating func append(newElement: Self.Iterator.Element)

    public mutating func append<S : Sequence where S.Iterator.Element == Iterator.Element>(contentsOf newElements: S)

    public mutating func insert(newElement: Self.Iterator.Element, at i: Self.Index)

    public mutating func insert<C : Collection where C.Iterator.Element == Iterator.Element>(contentsOf newElements: C, at i: Self.Index)

    public mutating func remove(at index: Self.Index) -> Self.Iterator.Element

    public mutating func removeSubrange(bounds: Range<Self.Index>)

    public mutating func removeFirst(n: Int)

    public mutating func removeFirst() -> Self.Iterator.Element

    public mutating func removeAll(keepingCapacity keepCapacity: Bool = default)

    public mutating func reserveCapacity(n: Self.Index.Distance)
}

extension RangeReplaceableCollection where SubSequence == Self {

    /// Remove the element at `startIndex` and return it.
    ///
    /// - Complexity: O(1)
    /// - Precondition: `!self.isEmpty`.
    public mutating func removeFirst() -> Self.Iterator.Element

    /// Remove the first `n` elements.
    ///
    /// - Complexity: O(1)
    /// - Precondition: `self.count >= n`.
    public mutating func removeFirst(n: Int)
}

extension RangeReplaceableCollection where Index : BidirectionalIndex {

    /// Remove an element from the end.
    ///
    /// - Complexity: O(1)
    /// - Precondition: `!self.isEmpty`
    public mutating func removeLast() -> Self.Iterator.Element

    /// Remove the last `n` elements.
    ///
    /// - Complexity: O(`self.count`)
    /// - Precondition: `n >= 0 && self.count >= n`.
    public mutating func removeLast(n: Int)
}

/// A type that can be converted to an associated "raw" type, then
/// converted back to produce an instance equivalent to the original.
public protocol RawRepresentable {

    /// The "raw" type that can be used to represent all values of `Self`.
    ///
    /// Every distinct value of `self` has a corresponding unique
    /// value of `RawValue`, but `RawValue` may have representations
    /// that do not correspond to a value of `Self`.
    associatedtype RawValue

    /// Convert from a value of `RawValue`, yielding `nil` iff
    /// `rawValue` does not correspond to a value of `Self`.
    public init?(rawValue: Self.RawValue)

    /// The corresponding value of the "raw" type.
    ///
    /// `Self(rawValue: self.rawValue)!` is equivalent to `self`.
    public var rawValue: Self.RawValue { get }
}

/// A collection whose elements are all identical `Element`s.
public struct Repeated<Element> : Collection {

    /// A type that represents a valid position in the collection.
    /// 
    /// Valid indices consist of the position of every element and a
    /// "past the end" position that's not valid for use as a subscript.
    public typealias Index = Int

    /// Always zero, which is the index of the first element in a
    /// non-empty instance.
    public var startIndex: Index { get }

    /// Always equal to `count`, which is one greater than the index of
    /// the last element in a non-empty instance.
    public var endIndex: Index { get }

    /// Access the element at `position`.
    ///
    /// - Precondition: `position` is a valid position in `self` and
    ///   `position != endIndex`.
    public subscript(position: Int) -> Element { get }

    /// The number of elements in this collection.
    public let count: Int

    /// The value of every element in this collection.
    public let repeatedValue: Element
}

/// A Collection that presents the elements of its `Base` collection
/// in reverse order.
///
/// - Note: This type is the result of `x.reversed()` where `x` is a
///   collection having bidirectional indices.
///
/// The `reversed()` method is always lazy when applied to a collection
/// with bidirectional indices, but does not implicitly confer
/// laziness on algorithms applied to its result.  In other words, for
/// ordinary collections `c` having bidirectional indices:
///
/// * `c.reversed()` does not create new storage
/// * `c.reversed().map(f)` maps eagerly and returns a new array
/// * `c.lazy.reversed().map(f)` maps lazily and returns a `LazyMapCollection`
///
/// - See also: `ReverseRandomAccessCollection`
public struct ReverseCollection<Base : Collection where Base.Index : BidirectionalIndex> : Collection {

    /// A type that represents a valid position in the collection.
    ///
    /// Valid indices consist of the position of every element and a
    /// "past the end" position that's not valid for use as a subscript.
    public typealias Index = ReverseIndex<Base.Index>

    /// A type that provides the sequence's iteration interface and
    /// encapsulates its iteration state.
    public typealias Iterator = IndexingIterator<ReverseCollection<Base>>
}

/// A wrapper for a `BidirectionalIndex` that reverses its
/// direction of traversal.
public struct ReverseIndex<Base : BidirectionalIndex> : BidirectionalIndex, ReverseIndexProtocol {

    /// A type that can represent the number of steps between pairs of
    /// `Self` values where one value is reachable from the other.
    ///
    /// Reachability is defined by the ability to produce one value from
    /// the other via zero or more applications of `successor`.
    public typealias Distance = Base.Distance

    public init(_ base: Base)

    /// The successor position in the underlying (un-reversed)
    /// collection.
    ///
    /// If `self` is `advance(c.reverse.startIndex, n)`, then:
    /// - `self.base` is `advance(c.endIndex, -n)`.
    /// - if `n` != `c.count`, then `c.reverse[self]` is 
    ///   equivalent to `[self.base.predecessor()]`.
    public let base: Base
}

/// An index that traverses the same positions as an underlying index, 
/// with inverted traversal direction.
public protocol ReverseIndexProtocol : BidirectionalIndex {

    associatedtype Base : BidirectionalIndex

    /// A type that can represent the number of steps between pairs of
    /// `ReverseIndex` values where one value is reachable from the other.
    associatedtype Distance : _SignedInteger = Self.Base.Distance

    /// The successor position in the underlying (un-reversed)
    /// collection.
    ///
    /// If `self` is `advance(c.reverse.startIndex, n)`, then:
    /// - `self.base` is `advance(c.endIndex, -n)`.
    /// - if `n` != `c.count`, then `c.reverse[self]` is 
    ///   equivalent to `[self.base.predecessor()]`.
    public var base: Self.Base { get }

    public init(_ base: Self.Base)
}

/// A Collection that presents the elements of its `Base` collection
/// in reverse order.
///
/// - Note: This type is the result of `x.reversed()` where `x` is a
///   collection having random access indices.
/// - See also: `ReverseCollection`
public struct ReverseRandomAccessCollection<Base : Collection where Base.Index : RandomAccessIndex> {

    /// A type that represents a valid position in the collection.
    ///
    /// Valid indices consist of the position of every element and a
    /// "past the end" position that's not valid for use as a subscript.
    public typealias Index = ReverseRandomAccessIndex<Base.Index>

    /// A type that provides the sequence's iteration interface and
    /// encapsulates its iteration state.
    public typealias Iterator = IndexingIterator<ReverseRandomAccessCollection<Base>>
}

/// A wrapper for a `RandomAccessIndex` that reverses its
/// direction of traversal.
public struct ReverseRandomAccessIndex<Base : RandomAccessIndex> : RandomAccessIndex, ReverseIndexProtocol {

    /// A type that can represent the number of steps between pairs of
    /// `ReverseIndex` values where one value is reachable from the other.
    public typealias Distance = Base.Distance

    public init(_ base: Base)

    /// The successor position in the underlying (un-reversed)
    /// collection.
    ///
    /// If `self` is `advance(c.reverse.startIndex, n)`, then:
    /// - `self.base` is `advance(c.endIndex, -n)`.
    /// - if `n` != `c.count`, then `c.reverse[self]` is 
    ///   equivalent to `[self.base.predecessor()]`.
    public let base: Base

    /// Measure the distance between `self` and `end`.
    ///
    /// - Precondition:
    ///   - `start` and `end` are part of the same sequence when conforming to
    ///     `RandomAccessIndex`.
    ///   - `end` is reachable from `self` by incrementation otherwise.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`n`) otherwise, where `n` is the function's result.
    public func distance(to other: ReverseRandomAccessIndex<Base>) -> Base.Distance

    /// Returns the result of advancing `self` by `n` positions.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Base.Distance) -> ReverseRandomAccessIndex<Base>
}

/// A type that can be iterated with a `for`...`in` loop.
///
/// `Sequence` makes no requirement on conforming types regarding
/// whether they will be destructively "consumed" by iteration.  To
/// ensure non-destructive iteration, constrain your sequence to
/// `Collection`.
///
/// As a consequence, it is not possible to run multiple `for` loops
/// on a sequence to "resume" iteration:
///
///     for element in sequence {
///       if ... some condition { break }
///     }
///
///     for element in sequence {
///       // Not guaranteed to continue from the next element.
///     }
///
/// `Sequence` makes no requirement about the behavior in that
/// case.  It is not correct to assume that a sequence will either be
/// "consumable" and will resume iteration, or that a sequence is a
/// collection and will restart iteration from the first element.
/// A conforming sequence that is not a collection is allowed to
/// produce an arbitrary sequence of elements from the second iterator.
public protocol Sequence {

    /// A type that provides the *sequence*'s iteration interface and
    /// A type that provides the sequence's iteration interface and
    /// encapsulates its iteration state.
    associatedtype Iterator : IteratorProtocol

    /// A type that represents a subsequence of some of the elements.
    associatedtype SubSequence

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> Self.Iterator

    /// Returns a value less than or equal to the number of elements in
    /// `self`, **nondestructively**.
    ///
    /// - Complexity: O(N).
    public var underestimatedCount: Int { get }

    /// Returns an `Array` containing the results of mapping `transform`
    /// over `self`.
    ///
    /// - Complexity: O(N).
    public func map<T>(@noescape transform: (Self.Iterator.Element) throws -> T) rethrows -> [T]

    /// Returns an `Array` containing the elements of `self`,
    /// in order, that satisfy the predicate `includeElement`.
    public func filter(@noescape includeElement: (Self.Iterator.Element) throws -> Bool) rethrows -> [Self.Iterator.Element]

    /// Call `body` on each element in `self` in the same order as a
    /// *for-in loop.*
    ///
    ///     sequence.forEach {
    ///       // body code
    ///     }
    ///
    /// is similar to:
    ///
    ///     for element in sequence {
    ///       // body code
    ///     }
    ///
    /// - Note: You cannot use the `break` or `continue` statement to exit the
    ///   current call of the `body` closure or skip subsequent calls.
    /// - Note: Using the `return` statement in the `body` closure will only
    ///   exit from the current call to `body`, not any outer scope, and won't
    ///   skip subsequent calls.
    ///
    /// - Complexity: O(`self.count`)
    public func forEach(@noescape body: (Self.Iterator.Element) throws -> Swift.Void) rethrows

    /// Returns a subsequence containing all but the first `n` elements.
    ///
    /// - Precondition: `n >= 0`
    /// - Complexity: O(`n`)
    public func dropFirst(n: Int) -> Self.SubSequence

    /// Returns a subsequence containing all but the last `n` elements.
    ///
    /// - Precondition: `self` is a finite sequence.
    /// - Precondition: `n >= 0`
    /// - Complexity: O(`self.count`)
    public func dropLast(n: Int) -> Self.SubSequence

    /// Returns a subsequence, up to `maxLength` in length, containing the
    /// initial elements.
    ///
    /// If `maxLength` exceeds `self.count`, the result contains all
    /// the elements of `self`.
    ///
    /// - Precondition: `maxLength >= 0`
    public func prefix(maxLength: Int) -> Self.SubSequence

    /// Returns a slice, up to `maxLength` in length, containing the
    /// final elements of `s`.
    ///
    /// If `maxLength` exceeds `s.count`, the result contains all
    /// the elements of `s`.
    ///
    /// - Precondition: `self` is a finite sequence.
    /// - Precondition: `maxLength >= 0`
    public func suffix(maxLength: Int) -> Self.SubSequence

    /// Returns the maximal `SubSequence`s of `self`, in order, that
    /// don't contain elements satisfying the predicate `isSeparator`.
    ///
    /// - Parameter maxSplits: The maximum number of `SubSequence`s to
    ///   return, minus 1.
    ///   If `maxSplits + 1` `SubSequence`s are returned, the last one is
    ///   a suffix of `self` containing *all* the elements of `self` following the
    ///   last split point.
    ///   The default value is `Int.max`.
    ///
    /// - Parameter omittingEmptySubsequences: If `false`, an empty `SubSequence`
    ///   is produced in the result for each pair of consecutive elements
    ///   satisfying `isSeparator`.
    ///   The default value is `true`.
    ///
    /// - Precondition: `maxSplits >= 0`
    public func split(maxSplits maxSplits: Int, omittingEmptySubsequences: Bool, @noescape isSeparator: (Self.Iterator.Element) throws -> Bool) rethrows -> [Self.SubSequence]
}

extension Sequence where Self.Iterator.Element : Comparable {

    /// Returns an `Array` containing the sorted elements of `source`.
    ///
    /// The sorting algorithm is not stable (can change the relative order of
    /// elements that compare equal).
    ///
    /// - Precondition: The less-than operator (`func <`) defined in
    ///   the `Comparable` conformance is a
    ///   [strict weak ordering](http://en.wikipedia.org/wiki/Strict_weak_order#Strict_weak_orderings)
    ///   over the elements in `self`.
    public func sorted() -> [Self.Iterator.Element]
}

extension Sequence {

    /// Returns an `Array` containing the sorted elements of `source`
    /// according to `isOrderedBefore`.
    ///
    /// The sorting algorithm is not stable (can change the relative order of
    /// elements for which `isOrderedBefore` does not establish an order).
    ///
    /// - Precondition: `isOrderedBefore` is a
    ///   [strict weak ordering](http://en.wikipedia.org/wiki/Strict_weak_order#Strict_weak_orderings)
    ///   over the elements in `self`.
    public func sorted(@noescape isOrderedBefore isOrderedBefore: (Self.Iterator.Element, Self.Iterator.Element) -> Bool) -> [Self.Iterator.Element]
}

extension Sequence where Iterator.Element : Sequence {

    /// A concatenation of the elements of `self`.
    public func flatten() -> FlattenSequence<Self>
}

extension Sequence where Iterator.Element : Sequence {

    /// Returns a view, whose elements are the result of interposing a given
    /// `separator` between the elements of the sequence `self`.
    ///
    /// For example,
    /// `[[1, 2, 3], [4, 5, 6], [7, 8, 9]].joined(separator: [-1, -2])`
    /// yields `[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]`.
    public func joined<Separator : Sequence where Separator.Iterator.Element == Iterator.Element.Iterator.Element>(separator separator: Separator) -> JoinedSequence<Self>
}

extension Sequence {

    /// A sequence containing the same elements as a `Base` sequence,
    /// but on which some operations such as `map` and `filter` are
    /// implemented lazily.
    ///
    /// - See also: `LazySequenceProtocol`, `LazySequence`
    public var lazy: LazySequence<Self> { get }
}

/// A default makeIterator() function for `IteratorProtocol` instances that
/// are declared to conform to `Sequence`
extension Sequence where Self.Iterator == Self, Self : IteratorProtocol {

    public func makeIterator() -> Self
}

extension Sequence {

    /// Returns an `Array` containing the results of mapping `transform`
    /// over `self`.
    ///
    /// - Complexity: O(N).
    public func map<T>(@noescape transform: (Self.Iterator.Element) throws -> T) rethrows -> [T]

    /// Returns an `Array` containing the elements of `self`,
    /// in order, that satisfy the predicate `includeElement`.
    public func filter(@noescape includeElement: (Self.Iterator.Element) throws -> Bool) rethrows -> [Self.Iterator.Element]

    public func suffix(maxLength: Int) -> AnySequence<Self.Iterator.Element>

    /// Returns the maximal `SubSequence`s of `self`, in order, that
    /// don't contain elements satisfying the predicate `isSeparator`.
    ///
    /// - Parameter maxSplits: The maximum number of `SubSequence`s to
    ///   return, minus 1.
    ///   If `maxSplits + 1` `SubSequence`s are returned, the last one is
    ///   a suffix of `self` containing *all* the elements of `self` following the
    ///   last split point.
    ///   The default value is `Int.max`.
    ///
    /// - Parameter omittingEmptySubsequences: If `false`, an empty `SubSequence`
    ///   is produced in the result for each pair of consecutive elements
    ///   satisfying `isSeparator`.
    ///   The default value is `true`.
    ///
    /// - Precondition: `maxSplits >= 0`
    public func split(maxSplits maxSplits: Int = default, omittingEmptySubsequences: Bool = default, @noescape isSeparator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]

    /// Returns a value less than or equal to the number of elements in
    /// `self`, **nondestructively**.
    ///
    /// - Complexity: O(N).
    public var underestimatedCount: Int { get }

    /// Call `body` on each element in `self` in the same order as a
    /// *for-in loop.*
    ///
    ///     sequence.forEach {
    ///       // body code
    ///     }
    ///
    /// is similar to:
    ///
    ///     for element in sequence {
    ///       // body code
    ///     }
    ///
    /// - Note: You cannot use the `break` or `continue` statement to exit the
    ///   current call of the `body` closure or skip subsequent calls.
    /// - Note: Using the `return` statement in the `body` closure will only
    ///   exit from the current call to `body`, not any outer scope, and won't
    ///   skip subsequent calls.
    ///
    /// - Complexity: O(`self.count`)
    public func forEach(@noescape body: (Self.Iterator.Element) throws -> Swift.Void) rethrows
}

extension Sequence where Iterator.Element : Equatable {

    /// Returns the maximal `SubSequence`s of `self`, in order, around a
    /// `separator` element.
    ///
    /// - Parameter maxSplits: The maximum number of `SubSequence`s to
    ///   return, minus 1.
    ///   If `maxSplits + 1` `SubSequence`s are returned, the last one is
    ///   a suffix of `self` containing *all* the elements of `self` following the
    ///   last split point.
    ///   The default value is `Int.max`.
    ///
    /// - Parameter omittingEmptySubsequences: If `false`, an empty `SubSequence`
    ///   is produced in the result for each pair of consecutive elements
    ///   equal to `separator`.
    ///   The default value is `true`.
    ///
    /// - Precondition: `maxSplits >= 0`
    public func split(separator separator: Self.Iterator.Element, maxSplits: Int = default, omittingEmptySubsequences: Bool = default) -> [AnySequence<Self.Iterator.Element>]
}

extension Sequence where SubSequence : Sequence, SubSequence.Iterator.Element == Iterator.Element, SubSequence.SubSequence == SubSequence {

    /// Returns a subsequence containing all but the first `n` elements.
    ///
    /// - Precondition: `n >= 0`
    /// - Complexity: O(`n`)
    public func dropFirst(n: Int) -> AnySequence<Self.Iterator.Element>

    /// Returns a subsequence containing all but the last `n` elements.
    ///
    /// - Precondition: `self` is a finite collection.
    /// - Precondition: `n >= 0`
    /// - Complexity: O(`self.count`)
    public func dropLast(n: Int) -> AnySequence<Self.Iterator.Element>

    public func prefix(maxLength: Int) -> AnySequence<Self.Iterator.Element>
}

extension Sequence {

    /// Returns a subsequence containing all but the first element.
    ///
    /// - Complexity: O(1)
    public func dropFirst() -> Self.SubSequence

    /// Returns a subsequence containing all but the last element.
    ///
    /// - Precondition: `self` is a finite sequence.
    /// - Precondition: `n >= 0`
    /// - Complexity: O(`self.count`)
    public func dropLast() -> Self.SubSequence
}

extension Sequence {

    /// Returns a lazy `Sequence` containing pairs (*n*, *x*), where
    /// *n*s are consecutive `Int`s starting at zero, and *x*s are
    /// the elements of `self`:
    ///
    ///     > for (n, c) in "Swift".characters.enumerated() {
    ///         print("\(n): '\(c)'")
    ///       }
    ///     0: 'S'
    ///     1: 'w'
    ///     2: 'i'
    ///     3: 'f'
    ///     4: 't'
    public func enumerated() -> EnumeratedSequence<Self>
}

extension Sequence {

    /// Returns the minimum element in `self` or `nil` if the sequence is empty.
    ///
    /// - Complexity: O(`elements.count`).
    ///
    /// 
    /// - Precondition: `isOrderedBefore` is a
    ///   [strict weak ordering](http://en.wikipedia.org/wiki/Strict_weak_order#Strict_weak_orderings)
    ///   over `self`.
    public func min(@noescape isOrderedBefore isOrderedBefore: (Self.Iterator.Element, Self.Iterator.Element) throws -> Bool) rethrows -> Self.Iterator.Element?

    /// Returns the maximum element in `self` or `nil` if the sequence is empty.
    ///
    /// - Complexity: O(`elements.count`).
    ///   
    /// - Precondition: `isOrderedBefore` is a
    ///   [strict weak ordering](http://en.wikipedia.org/wiki/Strict_weak_order#Strict_weak_orderings)
    ///   over `self`.
    public func max(@noescape isOrderedBefore isOrderedBefore: (Self.Iterator.Element, Self.Iterator.Element) throws -> Bool) rethrows -> Self.Iterator.Element?
}

extension Sequence where Iterator.Element : Comparable {

    /// Returns the minimum element in `self` or `nil` if the sequence is empty.
    ///
    /// - Complexity: O(`elements.count`).
    ///
    /// 
    public func min() -> Self.Iterator.Element?

    /// Returns the maximum element in `self` or `nil` if the sequence is empty.
    ///
    /// - Complexity: O(`elements.count`).
    ///   
    public func max() -> Self.Iterator.Element?
}

extension Sequence {

    /// Returns `true` iff `self` begins with elements equivalent to those of
    /// `other`, using `isEquivalent` as the equivalence test.  Returns `true` if
    /// `other` is empty.
    ///
    /// - Precondition: `isEquivalent` is an
    ///   [equivalence relation](http://en.wikipedia.org/wiki/Equivalence_relation).
    public func starts<PossiblePrefix : Sequence where PossiblePrefix.Iterator.Element == Iterator.Element>(with possiblePrefix: PossiblePrefix, @noescape isEquivalent: (Self.Iterator.Element, Self.Iterator.Element) throws -> Bool) rethrows -> Bool
}

extension Sequence where Iterator.Element : Equatable {

    /// Returns `true` iff the initial elements of `self` are equal to `prefix`.
    /// Returns `true` if `other` is empty.
    public func starts<PossiblePrefix : Sequence where PossiblePrefix.Iterator.Element == Iterator.Element>(with possiblePrefix: PossiblePrefix) -> Bool
}

extension Sequence {

    /// Returns `true` iff `self` and `other` contain equivalent elements, using
    /// `isEquivalent` as the equivalence test.
    ///
    /// - Precondition: `isEquivalent` is an
    ///   [equivalence relation](http://en.wikipedia.org/wiki/Equivalence_relation).
    public func elementsEqual<OtherSequence : Sequence where OtherSequence.Iterator.Element == Iterator.Element>(other: OtherSequence, @noescape isEquivalent: (Self.Iterator.Element, Self.Iterator.Element) throws -> Bool) rethrows -> Bool
}

extension Sequence where Iterator.Element : Equatable {

    /// Returns `true` iff `self` and `other` contain the same elements in the
    /// same order.
    public func elementsEqual<OtherSequence : Sequence where OtherSequence.Iterator.Element == Iterator.Element>(other: OtherSequence) -> Bool
}

extension Sequence {

    /// Returns `true` iff `self` precedes `other` in a lexicographical 
    /// ("dictionary") ordering, using `isOrderedBefore` as the comparison 
    /// between elements.
    ///
    /// - Note: This method implements the mathematical notion of lexicographical
    ///   ordering, which has no connection to Unicode.  If you are sorting strings
    ///   to present to the end-user, you should use `String` APIs that perform
    /// localized comparison.
    ///
    /// - Precondition: `isOrderedBefore` is a
    ///   [strict weak ordering](http://en.wikipedia.org/wiki/Strict_weak_order#Strict_weak_orderings)
    ///   over the elements of `self` and `other`.
    public func lexicographicallyPrecedes<OtherSequence : Sequence where OtherSequence.Iterator.Element == Iterator.Element>(other: OtherSequence, @noescape isOrderedBefore: (Self.Iterator.Element, Self.Iterator.Element) throws -> Bool) rethrows -> Bool
}

extension Sequence where Iterator.Element : Comparable {

    /// Returns `true` iff `self` precedes `other` in a lexicographical
    /// ("dictionary") ordering, using "<" as the comparison between elements.
    ///
    /// - Note: This method implements the mathematical notion of lexicographical
    ///   ordering, which has no connection to Unicode.  If you are sorting strings
    ///   to present to the end-user, you should use `String` APIs that perform
    /// localized comparison.
    public func lexicographicallyPrecedes<OtherSequence : Sequence where OtherSequence.Iterator.Element == Iterator.Element>(other: OtherSequence) -> Bool
}

extension Sequence where Iterator.Element : Equatable {

    /// Returns `true` iff `element` is in `self`.
    public func contains(element: Self.Iterator.Element) -> Bool
}

extension Sequence {

    /// Returns `true` iff an element in `self` satisfies `predicate`.
    public func contains(@noescape predicate: (Self.Iterator.Element) throws -> Bool) rethrows -> Bool
}

extension Sequence {

    /// Returns the result of repeatedly calling `combine` with an
    /// accumulated value initialized to `initial` and each element of
    /// `self`, in turn, i.e. return
    /// `combine(combine(...combine(combine(initial, self[0]),
    /// self[1]),...self[count-2]), self[count-1])`.
    public func reduce<T>(initial: T, @noescape combine: (T, Self.Iterator.Element) throws -> T) rethrows -> T
}

extension Sequence {

    /// Returns an `Array` containing the elements of `self` in reverse
    /// order.
    ///
    /// Complexity: O(N), where N is the length of `self`.
    public func reversed() -> [Self.Iterator.Element]
}

extension Sequence {

    /// Returns an `Array` containing the concatenated results of mapping
    /// `transform` over `self`.
    ///
    ///     s.flatMap(transform)
    ///
    /// is equivalent to
    ///
    ///     Array(s.map(transform).flatten())
    ///
    /// - Complexity: O(*M* + *N*), where *M* is the length of `self`
    ///   and *N* is the length of the result.
    public func flatMap<S : Sequence>(@noescape transform: (Self.Iterator.Element) throws -> S) rethrows -> [S.Iterator.Element]
}

extension Sequence {

    /// Returns an `Array` containing the non-nil results of mapping
    /// `transform` over `self`.
    ///
    /// - Complexity: O(*M* + *N*), where *M* is the length of `self`
    ///   and *N* is the length of the result.
    public func flatMap<T>(@noescape transform: (Self.Iterator.Element) throws -> T?) rethrows -> [T]
}

extension Sequence where Self : _SequenceWrapper, Self.Iterator == Self.Base.Iterator {

    /// Return an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> Self.Iterator

    public func map<T>(@noescape transform: (Self.Iterator.Element) throws -> T) rethrows -> [T]

    public func filter(@noescape includeElement: (Self.Iterator.Element) throws -> Bool) rethrows -> [Self.Iterator.Element]
}

extension Sequence where Iterator.Element == String {

    /// Interpose the `separator` between elements of `self`, then concatenate
    /// the result.  For example:
    ///
    ///     ["foo", "bar", "baz"].joined(separator: "-|-") // "foo-|-bar-|-baz"
    public func joined(separator separator: String) -> String
}

/// A collection of unique `Element` instances.
///
/// The order of elements in a set is stable between mutations but
/// otherwise unpredictable.
public struct Set<Element : Hashable> : SetAlgebra, Hashable, Collection, ArrayLiteralConvertible {

    /// A type that represents a valid position in the collection.
    ///
    /// Valid indices consist of the position of every element and a
    /// "past the end" position that's not valid for use as a subscript.
    public typealias Index = SetIndex<Element>

    /// Create an empty set with at least the given number of
    /// elements worth of storage.  The actual capacity will be the
    /// smallest power of 2 that is >= `minimumCapacity`.
    public init(minimumCapacity: Int)

    /// The position of the first element in a non-empty set.
    ///
    /// This is identical to `endIndex` in an empty set.
    ///
    /// - Complexity: Amortized O(1) if `self` does not wrap a bridged
    ///   `NSSet`, O(N) otherwise.
    public var startIndex: SetIndex<Element> { get }

    /// The collection's "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    ///
    /// - Complexity: Amortized O(1) if `self` does not wrap a bridged
    ///   `NSSet`, O(N) otherwise.
    public var endIndex: SetIndex<Element> { get }

    /// Returns `true` if the set contains a member.
    public func contains(member: Element) -> Bool

    /// Returns the `Index` of a given member, or `nil` if the member is not
    /// present in the set.
    public func index(of member: Element) -> SetIndex<Element>?

    /// Insert a new member into the set.
    public mutating func insert(newMember: Element)

    /// Remove the member from the set and return it if it was present.
    public mutating func remove(member: Element) -> Element?

    /// Remove the element at the given `position`.
    public mutating func remove(at position: SetIndex<Element>) -> Element

    /// Erase all the elements.  If `keepCapacity` is `true`, existing
    /// element capacity is kept for future insertions.
    public mutating func removeAll(keepingCapacity keepCapacity: Bool = default)

    /// Removes and returns the first element.
    ///
    /// - Precondition: `!isEmpty`.
    public mutating func removeFirst() -> Element

    /// The number of members in the set.
    ///
    /// - Complexity: O(1).
    public var count: Int { get }

    /// Access the member at `position`.
    ///
    /// - Complexity: O(1).
    public subscript(position: SetIndex<Element>) -> Element { get }

    /// Returns an iterator over the members.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> SetIterator<Element>

    /// Create an instance initialized with `elements`.
    public init(arrayLiteral elements: Element...)

    /// Create an empty `Set`.
    public init()

    /// Create a `Set` from a finite sequence of items.
    public init<Source : Sequence where Source.Iterator.Element == Element>(_ sequence: Source)

    /// Returns `true` iff `possibleSuperset` contains every member of `self`.
    public func isSubsetOf<S : Sequence where S.Iterator.Element == Element>(possibleSuperset: S) -> Bool

    /// Returns `true` iff `possibleStrictSuperset` contains every member
    /// of `self`, and at least one other element.
    public func isStrictSubsetOf<S : Sequence where S.Iterator.Element == Element>(possibleStrictSuperset: S) -> Bool

    /// Returns `true` iff `self` contains every element of `possibleSubset`.
    public func isSupersetOf<S : Sequence where S.Iterator.Element == Element>(possibleSubset: S) -> Bool

    /// Returns `true` iff `self` contains every element of
    /// `possibleStrictSubset`, and at least one other element.
    public func isStrictSupersetOf<S : Sequence where S.Iterator.Element == Element>(possibleStrictSubset: S) -> Bool

    /// Returns `true` iff no element of `other` is a member of `self`.
    public func isDisjointWith<S : Sequence where S.Iterator.Element == Element>(other: S) -> Bool

    /// Return a new `Set` containing the members of `self` and the
    /// elements of `other`.
    public func union<S : Sequence where S.Iterator.Element == Element>(other: S) -> Set<Element>

    /// Inserts the elements of `other` into `self`.
    public mutating func unionInPlace<S : Sequence where S.Iterator.Element == Element>(other: S)

    /// Returns the members of `self` not contained in `other`.
    public func subtract<S : Sequence where S.Iterator.Element == Element>(other: S) -> Set<Element>

    /// Removes the elements of `other` from `self`.
    public mutating func subtractInPlace<S : Sequence where S.Iterator.Element == Element>(other: S)

    /// Returns the members of `self` contained in `other`.
    public func intersect<S : Sequence where S.Iterator.Element == Element>(other: S) -> Set<Element>

    /// Removes any members not contained in `other`.
    public mutating func intersectInPlace<S : Sequence where S.Iterator.Element == Element>(other: S)

    /// Returns the elements contained in `self` or `other`, but not both.
    public func exclusiveOr<S : Sequence where S.Iterator.Element == Element>(other: S) -> Set<Element>

    /// Replace `self` with the elements contained in `self` or `other`,
    /// but not both.
    public mutating func exclusiveOrInPlace<S : Sequence where S.Iterator.Element == Element>(other: S)

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }

    /// `true` iff `self` is empty.
    public var isEmpty: Bool { get }

    /// The first element of `self`, or `nil` if `self` is empty.
    public var first: Element? { get }
}

extension Set : CustomStringConvertible, CustomDebugStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension Set : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension Set {

    /// If `!self.isEmpty`, return the first key-value pair in the sequence of
    /// elements, otherwise return `nil`.
    ///
    /// - Complexity: Amortized O(1)
    public mutating func popFirst() -> Element?
}

extension Set {

    /// Removes all elements of `other` from `self`.
    ///
    /// - Equivalent to replacing `self` with `self.subtract(other)`.
    public mutating func subtractInPlace(other: Set<Element>)

    /// Returns true iff every element of `self` is contained in `other`.
    public func isSubsetOf(other: Set<Element>) -> Bool

    /// Returns true iff every element of `other` is contained in `self`.
    public func isSupersetOf(other: Set<Element>) -> Bool

    /// Returns true iff `self.intersect(other).isEmpty`.
    public func isDisjointWith(other: Set<Element>) -> Bool

    /// Returns the set of elements contained in `self` but not in `other`.
    public func subtract(other: Set<Element>) -> Set<Element>

    /// Returns true iff every element of `other` is contained in `self`
    /// and `self` contains an element that is not contained in `other`.
    public func isStrictSupersetOf(other: Set<Element>) -> Bool

    /// Return true iff every element of `self` is contained in `other`
    /// and `other` contains an element that is not contained in `self`.
    public func isStrictSubsetOf(other: Set<Element>) -> Bool

    /// Return the members of `self` contained in `other`.
    public func intersect(other: Set<Element>) -> Set<Element>

    /// Replace `self` with the elements contained in `self` or `other`,
    /// but not both.
    public mutating func exclusiveOrInPlace(other: Set<Element>)
}

/// A generalized set whose distinct elements are not necessarily
/// disjoint.
///
/// In a model of `SetAlgebra`, some elements may subsume other
/// elements, where
///
/// > `a` **subsumes** `b` iff `([a] as Self).isSupersetOf([b])`
///
/// In many models of `SetAlgebra` such as `Set<Element>`, `a`
/// *subsumes* `b` if and only if `a == b`, but that is not always the
/// case.  For example, option sets typically do not satisfy that
/// property.
///
/// Two elements are **disjoint** when neither one *subsumes* the other.
///
/// - SeeAlso: `OptionSet`.
///
/// - Axioms, where `S` conforms to `SetAlgebra`, `x` and `y` are
///   of type `S`, and `e` is of type `S.Element`:
///
///   - `S() == []`
///   - `x.intersect(x) == x`
///   - `x.intersect([]) == []`
///   - `x.union(x) == x`
///   - `x.union([]) == x`
///   - `x.contains(e)` implies `x.union(y).contains(e)`
///   - `x.union(y).contains(e)` implies `x.contains(e) || y.contains(e)`
///   - `x.contains(e) && y.contains(e)` iff `x.intersect(y).contains(e)`
///   - `x.isSubsetOf(y)` iff `y.isSupersetOf(x)`
///   - `x.isStrictSupersetOf(y)` iff `x.isSupersetOf(y) && x != y`
///   - `x.isStrictSubsetOf(y)` iff `x.isSubsetOf(y) && x != y`
public protocol SetAlgebra : Equatable, ArrayLiteralConvertible {

    /// A type for which `Self` provides a containment test.
    associatedtype Element

    /// Creates an empty set.
    ///
    /// - Equivalent to `[] as Self`
    public init()

    /// Returns `true` if `self` contains `member`.
    ///
    /// - Equivalent to `self.intersect([member]) == [member]`
    public func contains(member: Self.Element) -> Bool

    /// Returns the set of elements contained in `self`, in `other`, or in
    /// both `self` and `other`.
    public func union(other: Self) -> Self

    /// Returns the set of elements contained in both `self` and `other`.
    public func intersect(other: Self) -> Self

    /// Returns the set of elements contained in `self` or in `other`,
    /// but not in both `self` and `other`.
    public func exclusiveOr(other: Self) -> Self

    /// If `member` is not already contained in `self`, inserts it.
    ///
    /// - Equivalent to `self.unionInPlace([member])`
    /// - Postcondition: `self.contains(member)`
    public mutating func insert(member: Self.Element)

    /// If `member` is contained in `self`, removes and returns it.
    /// Otherwise, removes all elements subsumed by `member` and returns
    /// `nil`.
    ///
    /// - Postcondition: `self.intersect([member]).isEmpty`
    public mutating func remove(member: Self.Element) -> Self.Element?

    /// Insert all elements of `other` into `self`.
    ///
    /// - Equivalent to replacing `self` with `self.union(other)`.
    /// - Postcondition: `self.isSupersetOf(other)`
    public mutating func unionInPlace(other: Self)

    /// Removes all elements of `self` that are not also present in
    /// `other`.
    ///
    /// - Equivalent to replacing `self` with `self.intersect(other)`
    /// - Postcondition: `self.isSubsetOf(other)`
    public mutating func intersectInPlace(other: Self)

    /// Replaces `self` with a set containing all elements contained in
    /// either `self` or `other`, but not both.
    ///
    /// - Equivalent to replacing `self` with `self.exclusiveOr(other)`
    public mutating func exclusiveOrInPlace(other: Self)

    /// Returns the set of elements contained in `self` but not in `other`.
    public func subtract(other: Self) -> Self

    /// Returns `true` iff every element of `self` is contained in `other`.
    public func isSubsetOf(other: Self) -> Bool

    /// Returns `true` iff `self.intersect(other).isEmpty`.
    public func isDisjointWith(other: Self) -> Bool

    /// Returns `true` iff every element of `other` is contained in `self`.
    public func isSupersetOf(other: Self) -> Bool

    /// Returns `true` iff `self.contains(e)` is `false` for all `e`.
    public var isEmpty: Bool { get }

    /// Creates the set containing all elements of `sequence`.
    public init<S : Sequence where S.Iterator.Element == Element>(_ sequence: S)

    /// Removes all elements of `other` from `self`.
    ///
    /// - Equivalent to replacing `self` with `self.subtract(other)`.
    public mutating func subtractInPlace(other: Self)

    /// Returns `true` iff `a` subsumes `b`.
    ///
    /// - Equivalent to `([a] as Self).isSupersetOf([b])`
    public static func element(a: Self.Element, subsumes b: Self.Element) -> Bool

    /// Returns `true` iff `a` is disjoint with `b`.
    ///
    /// Two elements are disjoint when neither one subsumes the other.
    ///
    /// - SeeAlso: `Self.element(_, subsumes:_)`
    public static func element(a: Self.Element, isDisjointWith b: Self.Element) -> Bool
}

/// `SetAlgebra` requirements for which default implementations
/// are supplied.
///
/// - Note: A type conforming to `SetAlgebra` can implement any of
///   these initializers or methods, and those implementations will be
///   used in lieu of these defaults.
extension SetAlgebra {

    /// Creates the set containing all elements of `sequence`.
    public convenience init<S : Sequence where S.Iterator.Element == Element>(_ sequence: S)

    /// Creates a set containing all elements of the given `arrayLiteral`.
    ///
    /// This initializer allows an array literal containing
    /// `Self.Element` to represent an instance of the set, wherever it
    /// is implied by the type context.
    public convenience init(arrayLiteral: Self.Element...)

    /// Removes all elements of `other` from `self`.
    ///
    /// - Equivalent to replacing `self` with `self.subtract(other)`.
    public mutating func subtractInPlace(other: Self)

    /// Returns `true` iff every element of `self` is contained in `other`.
    public func isSubsetOf(other: Self) -> Bool

    /// Returns `true` iff every element of `other` is contained in `self`.
    public func isSupersetOf(other: Self) -> Bool

    /// Returns `true` iff `self.intersect(other).isEmpty`.
    public func isDisjointWith(other: Self) -> Bool

    /// Returns the set of elements contained in `self` but not in `other`.
    public func subtract(other: Self) -> Self

    /// Returns `true` iff `self.contains(e)` is `false` for all `e`.
    public var isEmpty: Bool { get }

    /// Returns `true` iff every element of `other` is contained in `self`
    /// and `self` contains an element that is not contained in `other`.
    public func isStrictSupersetOf(other: Self) -> Bool

    /// Returns `true` iff every element of `self` is contained in `other`
    /// and `other` contains an element that is not contained in `self`.
    public func isStrictSubsetOf(other: Self) -> Bool

    /// Returns `true` iff `a` subsumes `b`.
    ///
    /// - Equivalent to `([a] as Self).isSupersetOf([b])`
    public static func element(a: Self.Element, subsumes b: Self.Element) -> Bool

    /// Returns `true` iff `a` is disjoint with `b`.
    ///
    /// Two elements are disjoint when neither one subsumes the other.
    ///
    /// - SeeAlso: `Self.element(_, subsumes:_)`
    public static func element(a: Self.Element, isDisjointWith b: Self.Element) -> Bool
}

/// Used to access the members in an instance of `Set<Element>`.
public struct SetIndex<Element : Hashable> : ForwardIndex, Comparable {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> SetIndex<Element>
}

/// An iterator over the members of a `Set<Element>`.
public struct SetIterator<Element : Hashable> : IteratorProtocol {

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    ///
    /// - Precondition: No preceding call to `self.next()` has returned `nil`.
    public mutating func next() -> Element?
}

extension SetIterator : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

/// A set of common requirements for Swift's signed integer types.
public protocol SignedInteger : _SignedInteger, Integer {

    /// Represent this number using Swift's widest native signed integer
    /// type.
    public func toIntMax() -> IntMax

    /// Convert from Swift's widest signed integer type, trapping on
    /// overflow.
    public init(_: IntMax)
}

/// Instances of conforming types can be subtracted, arithmetically
/// negated, and initialized from `0`.
///
/// Axioms:
///
/// - `x - 0 == x`
/// - `-x == 0 - x`
/// - `-(-x) == x`
public protocol SignedNumber : Comparable, IntegerLiteralConvertible {

    /// Returns the result of negating `x`.
    prefix public func -(x: Self) -> Self

    /// Returns the difference between `lhs` and `rhs`.
    public func -(lhs: Self, rhs: Self) -> Self
}

/// A view into a sub-sequence of elements of another collection.
///
/// A `Slice` instance stores the base collection, the start and end indices of
/// the view.  It does not copy the elements from the collection into separate
/// storage. Thus, creating a slice has `O(1)` complexity.
///
/// A `Slice` instance inherits the value or reference semantics of the base
/// collection.  That is, if a `Slice` instance is wrapped around a mutable
/// collection that has value semantics (for example, `Array`), mutating the
/// original collection would not affect the copy stored inside of the slice.
///
/// An element of a slice is located under the same index in the slice and in
/// the base collection, as long as neither the collection or the slice were
/// mutated.  Thus, indices of a slice can be used interchangeably with indices
/// of the base collection.
///
/// - Warning: Long-term storage of `Slice` instances is discouraged.
///
///   Because a `Slice` presents a *view* onto the storage of some larger
///   collection even after the original collection goes out of scope, storing
///   the slice may prolong the lifetime of elements that are no longer
///   accessible, which can manifest as apparent memory and object leakage.  To
///   prevent this effect, use slices only for transient computation.
public struct Slice<Base : Indexable> : Collection {

    /// A type that represents a valid position in the collection.
    ///
    /// Valid indices consist of the position of every element and a
    /// "past the end" position that's not valid for use as a subscript.
    public typealias Index = Base.Index

    /// The position of the first element in a non-empty collection.
    ///
    /// In an empty collection, `startIndex == endIndex`.
    ///
    /// - Complexity: O(1)
    public let startIndex: Base.Index

    /// The collection's "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    ///
    /// - Complexity: O(1)
    public let endIndex: Base.Index

    /// Returns the element at the given `position`.
    public subscript(index: Base.Index) -> Base._Element { get }

    /// Returns a collection representing a contiguous sub-range of
    /// `self`'s elements.
    ///
    /// - Complexity: O(1)
    public subscript(bounds: Range<Base.Index>) -> Slice<Base> { get }
}

/// A simple string designed to represent text that is "knowable at
/// compile-time".
///
/// Logically speaking, each instance looks something like this:
///
///      enum StaticString {
///        case ascii(start: UnsafePointer<UInt8>, count: Int)
///        case utf8(start: UnsafePointer<UInt8>, count: Int)
///        case scalar(UnicodeScalar)
///      }
public struct StaticString : UnicodeScalarLiteralConvertible, ExtendedGraphemeClusterLiteralConvertible, StringLiteralConvertible, CustomStringConvertible, CustomDebugStringConvertible, CustomReflectable {

    /// A pointer to the beginning of UTF-8 code units.
    ///
    /// - Precondition: `self` stores a pointer to either ASCII or UTF-8 code
    ///   units.
    public var utf8Start: UnsafePointer<UInt8> { get }

    /// The stored Unicode scalar value.
    ///
    /// - Precondition: `self` stores a single Unicode scalar value.
    public var unicodeScalar: UnicodeScalar { get }

    /// If `self` stores a pointer to ASCII or UTF-8 code units, the
    /// length in bytes of that data.
    ///
    /// If `self` stores a single Unicode scalar value, the value of
    /// `utf8CodeUnitCount` is unspecified.
    public var utf8CodeUnitCount: Int { get }

    /// `true` iff `self` stores a pointer to ASCII or UTF-8 code units.
    public var hasPointerRepresentation: Bool { get }

    /// `true` if `self` stores a pointer to ASCII code units.
    ///
    /// If `self` stores a single Unicode scalar value, the value of
    /// `isASCII` is unspecified.
    public var isASCII: Bool { get }

    /// Invoke `body` with a buffer containing the UTF-8 code units of
    /// `self`.
    ///
    /// This method works regardless of what `self` stores.
    public func withUTF8Buffer<R>(@noescape invoke body: (UnsafeBufferPointer<UInt8>) -> R) -> R

    /// Create an empty instance.
    public init()

    public init(_builtinUnicodeScalarLiteral value: Builtin.Int32)

    /// Create an instance initialized to `value`.
    public init(unicodeScalarLiteral value: StaticString)

    public init(_builtinExtendedGraphemeClusterLiteral start: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1)

    /// Create an instance initialized to `value`.
    public init(extendedGraphemeClusterLiteral value: StaticString)

    public init(_builtinStringLiteral start: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1)

    /// Create an instance initialized to `value`.
    public init(stringLiteral value: StaticString)

    /// A textual representation of `self`.
    public var description: String { get }

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension StaticString {

    /// The `Mirror` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `Mirror` should be
    ///   unaffected by subsequent mutations of `self`.
    public var customMirror: Mirror { get }
}

extension StaticString {
}

/// A source of text streaming operations.  `Streamable` instances can
/// be written to any *output stream*.
///
/// For example: `String`, `Character`, `UnicodeScalar`.
public protocol Streamable {

    /// Write a textual representation of `self` into `target`.
    public func write<Target : OutputStream>(to target: inout Target)
}

/// A `Sequence` of values formed by striding over a closed interval.
public struct StrideThrough<Element : Strideable> : Sequence, CustomReflectable {

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> StrideThroughIterator<Element>

    /// The `Mirror` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `Mirror` should be
    ///   unaffected by subsequent mutations of `self`.
    public var customMirror: Mirror { get }
}

/// An `IteratorProtocol` for `StrideThrough<Element>`.
public struct StrideThroughIterator<Element : Strideable> : IteratorProtocol {

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    public mutating func next() -> Element?
}

/// A `Sequence` of values formed by striding over a half-open interval.
public struct StrideTo<Element : Strideable> : Sequence, CustomReflectable {

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> StrideToIterator<Element>

    /// The `Mirror` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `Mirror` should be
    ///   unaffected by subsequent mutations of `self`.
    public var customMirror: Mirror { get }
}

/// An iterator for the result of `stride(to:...)`.
public struct StrideToIterator<Element : Strideable> : IteratorProtocol {

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    public mutating func next() -> Element?
}

/// Conforming types are notionally continuous, one-dimensional
/// values that can be offset and measured.
public protocol Strideable : Comparable {

    /// A type that can represent the distance between two values of `Self`.
    associatedtype Stride : SignedNumber

    /// Returns a stride `x` such that `self.advanced(by: x)` approximates
    /// `other`.
    ///
    /// - Complexity: O(1).
    ///
    /// - SeeAlso: `RandomAccessIndex`'s `distance(to:)`, which provides a
    ///   stronger semantic guarantee.
    public func distance(to other: Self) -> Self.Stride

    /// Returns a `Self` `x` such that `self.distance(to: x)` approximates
    /// `n`.
    ///
    /// - Complexity: O(1).
    ///
    /// - SeeAlso: `RandomAccessIndex`'s `advanced(by:)`, which
    ///   provides a stronger semantic guarantee.
    public func advanced(by n: Self.Stride) -> Self
}

/// An arbitrary Unicode string value.
///
/// Unicode-Correct
/// ===============
///
/// Swift strings are designed to be Unicode-correct.  In particular,
/// the APIs make it easy to write code that works correctly, and does
/// not surprise end-users, regardless of where you venture in the
/// Unicode character space.  For example, the `==` operator checks
/// for [Unicode canonical
/// equivalence](http://www.unicode.org/glossary/#deterministic_comparison),
/// so two different representations of the same string will always
/// compare equal.
///
/// Locale-Insensitive
/// ==================
///
/// The fundamental operations on Swift strings are not sensitive to
/// locale settings.  That's because, for example, the validity of a
/// `Dictionary<String, T>` in a running program depends on a given
/// string comparison having a single, stable result.  Therefore,
/// Swift always uses the default,
/// un-[tailored](http://www.unicode.org/glossary/#tailorable) Unicode
/// algorithms for basic string operations.
///
/// Importing `Foundation` endows swift strings with the full power of
/// the `NSString` API, which allows you to choose more complex
/// locale-sensitive operations explicitly.
///
/// Value Semantics
/// ===============
///
/// Each string variable, `let` binding, or stored property has an
/// independent value, so mutations to the string are not observable
/// through its copies:
///
///     var a = "foo"
///     var b = a
///     b.append("bar")
///     print("a=\(a), b=\(b)")     // a=foo, b=foobar
///
/// Strings use Copy-on-Write so that their data is only copied
/// lazily, upon mutation, when more than one string instance is using
/// the same buffer.  Therefore, the first in any sequence of mutating
/// operations may cost `O(N)` time and space, where `N` is the length
/// of the string's (unspecified) underlying representation.
///
/// Views
/// =====
///
/// `String` is not itself a collection of anything.  Instead, it has
/// properties that present the string's contents as meaningful
/// collections:
///
///   - `characters`: a collection of `Character` ([extended grapheme
///     cluster](http://www.unicode.org/glossary/#extended_grapheme_cluster))
///     elements, a unit of text that is meaningful to most humans.
///
///   - `unicodeScalars`: a collection of `UnicodeScalar` ([Unicode
///     scalar
///     values](http://www.unicode.org/glossary/#unicode_scalar_value))
///     the 21-bit codes that are the basic unit of Unicode.  These
///     values are equivalent to UTF-32 code units.
///
///   - `utf16`: a collection of `UTF16.CodeUnit`, the 16-bit
///     elements of the string's UTF-16 encoding.
///
///   - `utf8`: a collection of `UTF8.CodeUnit`, the 8-bit
///     elements of the string's UTF-8 encoding.
///
/// Growth and Capacity
/// ===================
///
/// When a string's contiguous storage fills up, new storage must be
/// allocated and characters must be moved to the new storage.
/// `String` uses an exponential growth strategy that makes `append` a
/// constant time operation *when amortized over many invocations*.
///
/// Objective-C Bridge
/// ==================
///
/// `String` is bridged to Objective-C as `NSString`, and a `String`
/// that originated in Objective-C may store its characters in an
/// `NSString`.  Since any arbitrary subclass of `NSString` can
/// become a `String`, there are no guarantees about representation or
/// efficiency in this case.  Since `NSString` is immutable, it is
/// just as though the storage was shared by some copy: the first in
/// any sequence of mutating operations causes elements to be copied
/// into unique, contiguous storage which may cost `O(N)` time and
/// space, where `N` is the length of the string representation (or
/// more, if the underlying `NSString` has unusual performance
/// characteristics).
public struct String {

    /// An empty `String`.
    public init()
}

extension String {

    public typealias Index = String.CharacterView.Index

    /// The position of the first `Character` in `self.characters` if
    /// `self` is non-empty; identical to `endIndex` otherwise.
    public var startIndex: Index { get }

    /// The "past the end" position in `self.characters`.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    public var endIndex: Index { get }

    /// Access the `Character` at `position`.
    ///
    /// - Precondition: `position` is a valid position in `self.characters`
    ///   and `position != endIndex`.
    public subscript(i: Index) -> Character { get }
}

extension String {

    /// A `String`'s collection of `Character`s ([extended grapheme
    /// clusters](http://www.unicode.org/glossary/#extended_grapheme_cluster))
    /// elements.
    public struct CharacterView {

        /// Create a view of the `Character`s in `text`.
        public init(_ text: String)
    }

    /// A collection of `Characters` representing the `String`'s
    /// [extended grapheme
    /// clusters](http://www.unicode.org/glossary/#extended_grapheme_cluster).
    public var characters: String.CharacterView

    /// Efficiently mutate `self` by applying `body` to its `characters`.
    ///
    /// - Warning: Do not rely on anything about `self` (the `String`
    ///   that is the target of this method) during the execution of
    ///   `body`: it may not appear to have its correct value.  Instead,
    ///   use only the `String.CharacterView` argument to `body`.
    public mutating func withMutableCharacters<R>(body: (inout String.CharacterView) -> R) -> R

    /// Construct the `String` corresponding to the given sequence of
    /// Unicode scalars.
    public init(_ characters: String.CharacterView)
}

extension String {

    /// A collection of [Unicode scalar values](http://www.unicode.org/glossary/#unicode_scalar_value) that
    /// encodes a `String` value.
    public struct UnicodeScalarView : Collection, CustomStringConvertible, CustomDebugStringConvertible {

        /// A position in a `String.UnicodeScalarView`.
        public struct Index : BidirectionalIndex, Comparable {

            /// Returns the next consecutive value after `self`.
            ///
            /// - Precondition: The next value is representable.
            public func successor() -> String.UnicodeScalarView.Index

            /// Returns the previous consecutive value before `self`.
            ///
            /// - Precondition: The previous value is representable.
            public func predecessor() -> String.UnicodeScalarView.Index
        }

        /// The position of the first `UnicodeScalar` if the `String` is
        /// non-empty; identical to `endIndex` otherwise.
        public var startIndex: String.UnicodeScalarView.Index { get }

        /// The "past the end" position.
        ///
        /// `endIndex` is not a valid argument to `subscript`, and is always
        /// reachable from `startIndex` by zero or more applications of
        /// `successor()`.
        public var endIndex: String.UnicodeScalarView.Index { get }

        /// Access the element at `position`.
        ///
        /// - Precondition: `position` is a valid position in `self` and
        ///   `position != endIndex`.
        public subscript(position: String.UnicodeScalarView.Index) -> UnicodeScalar { get }

        /// Access the contiguous subrange of elements enclosed by `bounds`.
        ///
        /// - Complexity: O(1) unless bridging from Objective-C requires an
        ///   O(N) conversion.
        public subscript(r: Range<String.UnicodeScalarView.Index>) -> String.UnicodeScalarView { get }

        /// A type whose instances can produce the elements of this
        /// sequence, in order.
        public struct Iterator : IteratorProtocol {

            /// Advance to the next element and return it, or `nil` if no next
            /// element exists.
            ///
            /// - Precondition: No preceding call to `self.next()` has returned
            ///   `nil`.
            public mutating func next() -> UnicodeScalar?
        }

        /// Returns an iterator over the `UnicodeScalar`s that comprise
        /// this sequence.
        ///
        /// - Complexity: O(1).
        public func makeIterator() -> String.UnicodeScalarView.Iterator

        /// A textual representation of `self`.
        public var description: String { get }

        /// A textual representation of `self`, suitable for debugging.
        public var debugDescription: String { get }
    }

    /// Construct the `String` corresponding to the given sequence of
    /// Unicode scalars.
    public init(_ unicodeScalars: String.UnicodeScalarView)

    /// The index type for subscripting a `String`'s `.unicodeScalars`
    /// view.
    public typealias UnicodeScalarIndex = String.UnicodeScalarView.Index
}

extension String {

    /// A collection of UTF-16 code units that encodes a `String` value.
    public struct UTF16View : Collection, CustomStringConvertible, CustomDebugStringConvertible {

        /// A position in a string's collection of UTF-16 code units.
        public struct Index {
        }

        /// The position of the first code unit if the `String` is
        /// non-empty; identical to `endIndex` otherwise.
        public var startIndex: String.UTF16View.Index { get }

        /// The "past the end" position.
        ///
        /// `endIndex` is not a valid argument to `subscript`, and is always
        /// reachable from `startIndex` by zero or more applications of
        /// `successor()`.
        public var endIndex: String.UTF16View.Index { get }

        /// Access the element at `position`.
        ///
        /// - Precondition: `position` is a valid position in `self` and
        ///   `position != endIndex`.
        public subscript(i: String.UTF16View.Index) -> CodeUnit { get }

        /// Get the contiguous subrange of elements enclosed by `bounds`.
        ///
        /// - Complexity: O(1) unless bridging from Objective-C requires an
        ///   O(N) conversion.
        public subscript(bounds: Range<String.UTF16View.Index>) -> String.UTF16View { get }

        /// A textual representation of `self`.
        public var description: String { get }

        /// A textual representation of `self`, suitable for debugging.
        public var debugDescription: String { get }
    }

    /// A UTF-16 encoding of `self`.
    public var utf16: String.UTF16View

    /// Construct the `String` corresponding to the given sequence of
    /// UTF-16 code units.  If `utf16` contains unpaired surrogates, the
    /// result is `nil`.
    public init?(_ utf16: String.UTF16View)

    /// The index type for subscripting a `String`'s `utf16` view.
    public typealias UTF16Index = String.UTF16View.Index
}

extension String {

    /// A collection of UTF-8 code units that encodes a `String` value.
    public struct UTF8View : Collection, CustomStringConvertible, CustomDebugStringConvertible {

        /// A position in a `String.UTF8View`.
        public struct Index : ForwardIndex {

            /// Returns the next consecutive value after `self`.
            ///
            /// - Precondition: The next value is representable.
            public func successor() -> String.UTF8View.Index
        }

        /// The position of the first code unit if the `String` is
        /// non-empty; identical to `endIndex` otherwise.
        public var startIndex: String.UTF8View.Index { get }

        /// The "past the end" position.
        ///
        /// `endIndex` is not a valid argument to `subscript`, and is always
        /// reachable from `startIndex` by zero or more applications of
        /// `successor()`.
        public var endIndex: String.UTF8View.Index { get }

        /// Access the element at `position`.
        ///
        /// - Precondition: `position` is a valid position in `self` and
        ///   `position != endIndex`.
        public subscript(position: String.UTF8View.Index) -> CodeUnit { get }

        /// Access the contiguous subrange of elements enclosed by `bounds`.
        ///
        /// - Complexity: O(1) unless bridging from Objective-C requires an
        ///   O(N) conversion.
        public subscript(bounds: Range<String.UTF8View.Index>) -> String.UTF8View { get }

        /// A textual representation of `self`.
        public var description: String { get }

        /// A textual representation of `self`, suitable for debugging.
        public var debugDescription: String { get }
    }

    /// A UTF-8 encoding of `self`.
    public var utf8: String.UTF8View

    /// A contiguously-stored nul-terminated UTF-8 representation of
    /// `self`.
    ///
    /// To access the underlying memory, invoke
    /// `withUnsafeBufferPointer` on the `ContiguousArray`.
    public var nulTerminatedUTF8: ContiguousArray<CodeUnit> { get }

    /// Construct the `String` corresponding to the given sequence of
    /// UTF-8 code units.  If `utf8` contains unpaired surrogates, the
    /// result is `nil`.
    public init?(_ utf8: String.UTF8View)

    /// The index type for subscripting a `String`'s `.utf8` view.
    public typealias UTF8Index = String.UTF8View.Index
}

extension String {

    /// Construct an instance containing just the given `Character`.
    public init(_ c: Character)
}

extension String {

    /// Create a new `String` by copying the nul-terminated UTF-8 data
    /// referenced by a `cString`.
    ///
    /// If `cString` contains ill-formed UTF-8 code unit sequences, replaces them
    /// with replacement characters (U+FFFD).
    ///
    /// - Precondition: `cString != nil`
    public init(cString: UnsafePointer<CChar>)

    /// Create a new `String` by copying the nul-terminated UTF-8 data
    /// referenced by a `cString`.
    ///
    /// Does not try to repair ill-formed UTF-8 code unit sequences, fails if any
    /// such sequences are found.
    ///
    /// - Precondition: `cString != nil`
    public init?(validatingUTF8 cString: UnsafePointer<CChar>)

    /// Create a new `String` by copying the nul-terminated data
    /// referenced by a `cString` using `encoding`.
    ///
    /// Returns `nil` if the `cString` is `NULL` or if it contains ill-formed code
    /// units and no repairing has been requested. Otherwise replaces
    /// ill-formed code units with replacement characters (U+FFFD).
    public static func decodeCString<Encoding : UnicodeCodec>(cString: UnsafePointer<Encoding.CodeUnit>, as encoding: Encoding.Type, repairingInvalidCodeUnits isRepairing: Bool = default) -> (result: String, repairsMade: Bool)?
}

extension String {

    /// Invoke `f` on the contents of this string, represented as
    /// a nul-terminated array of char, ensuring that the array's
    /// lifetime extends through the execution of `f`.
    public func withCString<Result>(@noescape f: (UnsafePointer<Int8>) throws -> Result) rethrows -> Result
}

extension String : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension String : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension String : OutputStream {

    /// Append `other` to this stream.
    public mutating func write(other: String)
}

extension String : Streamable {

    /// Write a textual representation of `self` into `target`.
    public func write<Target : OutputStream>(to target: inout Target)
}

extension String {

    public init(_builtinUnicodeScalarLiteral value: Builtin.Int32)
}

extension String : UnicodeScalarLiteralConvertible {

    /// Create an instance initialized to `value`.
    public init(unicodeScalarLiteral value: String)
}

extension String {

    public init(_builtinExtendedGraphemeClusterLiteral start: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1)
}

extension String : ExtendedGraphemeClusterLiteralConvertible {

    /// Create an instance initialized to `value`.
    public init(extendedGraphemeClusterLiteral value: String)
}

extension String {

    public init(_builtinUTF16StringLiteral start: Builtin.RawPointer, utf16CodeUnitCount: Builtin.Word)
}

extension String {

    public init(_builtinStringLiteral start: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1)
}

extension String : StringLiteralConvertible {

    /// Create an instance initialized to `value`.
    public init(stringLiteral value: String)
}

extension String : CustomDebugStringConvertible {

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension String : Equatable {
}

extension String : Comparable {
}

extension String {

    /// Append the elements of `other` to `self`.
    public mutating func append(other: String)

    /// Append `x` to `self`.
    ///
    /// - Complexity: Amortized O(1).
    public mutating func append(x: UnicodeScalar)
}

extension String : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension String {

    /// Return the characters within the given `bounds`.
    ///
    /// - Complexity: O(1) unless bridging from Objective-C requires an
    ///   O(N) conversion.
    public subscript(bounds: Range<Index>) -> String { get }
}

extension String {

    public mutating func reserveCapacity(n: Int)

    public mutating func append(c: Character)

    public mutating func append<S : Sequence where S.Iterator.Element == Character>(contentsOf newElements: S)

    /// Create an instance containing `characters`.
    public init<S : Sequence where S.Iterator.Element == Character>(_ characters: S)
}

extension String {

    /// Replace the characters within `bounds` with the elements of
    /// `replacement`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`bounds.count`) if `bounds.endIndex
    ///   == self.endIndex` and `newElements.isEmpty`, O(N) otherwise.
    public mutating func replaceSubrange<C : Collection where C.Iterator.Element == Character>(bounds: Range<Index>, with newElements: C)

    /// Replace the text in `bounds` with `replacement`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`bounds.count`) if `bounds.endIndex
    ///   == self.endIndex` and `newElements.isEmpty`, O(N) otherwise.
    public mutating func replaceSubrange(bounds: Range<Index>, with newElements: String)

    /// Insert `newElement` at position `i`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func insert(newElement: Character, at i: Index)

    /// Insert `newElements` at position `i`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`self.count + newElements.count`).
    public mutating func insert<S : Collection where S.Iterator.Element == Character>(contentsOf newElements: S, at i: Index)

    /// Remove and return the `Character` at position `i`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func remove(at i: Index) -> Character

    /// Remove the characters in `bounds`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`self.count`).
    public mutating func removeSubrange(bounds: Range<Index>)

    /// Replace `self` with the empty string.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - parameter keepCapacity: If `true`, prevents the release of
    ///   allocated storage, which can be a useful optimization
    ///   when `self` is going to be grown again.
    public mutating func removeAll(keepingCapacity keepCapacity: Bool = default)
}

extension String {

    /// Return `self` converted to lower case.
    ///
    /// - Complexity: O(n)
    public func lowercased() -> String

    /// Return `self` converted to upper case.
    ///
    /// - Complexity: O(n)
    public func uppercased() -> String
}

extension String {
}

extension String : StringInterpolationConvertible {

    /// Create an instance by concatenating the elements of `strings`.
    public init(stringInterpolation strings: String...)

    /// Create an instance containing `expr`'s `print` representation.
    public init<T>(stringInterpolationSegment expr: T)

    public init(stringInterpolationSegment expr: String)

    public init(stringInterpolationSegment expr: Character)

    public init(stringInterpolationSegment expr: UnicodeScalar)

    public init(stringInterpolationSegment expr: Bool)

    public init(stringInterpolationSegment expr: Float32)

    public init(stringInterpolationSegment expr: Float64)

    public init(stringInterpolationSegment expr: UInt8)

    public init(stringInterpolationSegment expr: Int8)

    public init(stringInterpolationSegment expr: UInt16)

    public init(stringInterpolationSegment expr: Int16)

    public init(stringInterpolationSegment expr: UInt32)

    public init(stringInterpolationSegment expr: Int32)

    public init(stringInterpolationSegment expr: UInt64)

    public init(stringInterpolationSegment expr: Int64)

    public init(stringInterpolationSegment expr: UInt)

    public init(stringInterpolationSegment expr: Int)
}

extension String {

    /// Construct an instance that is the concatenation of `count` copies
    /// of `repeatedValue`.
    public init(repeating repeatedValue: Character, count: Int)

    /// Construct an instance that is the concatenation of `count` copies
    /// of `Character(repeatedValue)`.
    public init(repeating repeatedValue: UnicodeScalar, count: Int)

    /// `true` iff `self` contains no characters.
    public var isEmpty: Bool { get }
}

extension String {

    /// Returns `true` iff `self` begins with `prefix`.
    public func hasPrefix(prefix: String) -> Bool

    /// Returns `true` iff `self` ends with `suffix`.
    public func hasSuffix(suffix: String) -> Bool
}

extension String {

    /// Create an instance representing `v` in base 10.
    public init<T : _SignedInteger>(_ v: T)

    /// Create an instance representing `v` in base 10.
    public init<T : UnsignedInteger>(_ v: T)

    /// Create an instance representing `v` in the given `radix` (base).
    ///
    /// Numerals greater than 9 are represented as roman letters,
    /// starting with `a` if `uppercase` is `false` or `A` otherwise.
    public init<T : _SignedInteger>(_ v: T, radix: Int, uppercase: Bool = default)

    /// Create an instance representing `v` in the given `radix` (base).
    ///
    /// Numerals greater than 9 are represented as roman letters,
    /// starting with `a` if `uppercase` is `false` or `A` otherwise.
    public init<T : UnsignedInteger>(_ v: T, radix: Int, uppercase: Bool = default)
}

extension String {

    /// The value of `self` as a collection of [Unicode scalar values](http://www.unicode.org/glossary/#unicode_scalar_value).
    public var unicodeScalars: String.UnicodeScalarView
}

extension String {
}

extension String : MirrorPath {
}

extension String {

    /// Initialize `self` with the textual representation of `instance`.
    ///
    /// * If `Subject` conforms to `Streamable`, the result is obtained by
    ///   calling `instance.write(to: s)` on an empty string `s`.
    /// * Otherwise, if `Subject` conforms to `CustomStringConvertible`, the
    ///   result is `instance`'s `description`
    /// * Otherwise, if `Subject` conforms to `CustomDebugStringConvertible`,
    ///   the result is `instance`'s `debugDescription`
    /// * Otherwise, an unspecified result is supplied automatically by
    ///   the Swift standard library.
    ///
    /// - SeeAlso: `String.init<Subject>(reflecting: Subject)`
    public init<Subject>(_ instance: Subject)

    /// Initialize `self` with a detailed textual representation of
    /// `subject`, suitable for debugging.
    ///
    /// * If `Subject` conforms to `CustomDebugStringConvertible`, the result
    ///   is `subject`'s `debugDescription`.
    ///
    /// * Otherwise, if `Subject` conforms to `CustomStringConvertible`,
    ///   the result is `subject`'s `description`.
    ///
    /// * Otherwise, if `Subject` conforms to `Streamable`, the result is
    ///   obtained by calling `subject.write(to: s)` on an empty string `s`.
    ///
    /// * Otherwise, an unspecified result is supplied automatically by
    ///   the Swift standard library.
    ///
    /// - SeeAlso: `String.init<Subject>(Subject)`
    public init<Subject>(reflecting subject: Subject)
}

/// `String.CharacterView` is a collection of `Character`.
extension String.CharacterView : Collection {

    /// A character position.
    public struct Index : BidirectionalIndex, Comparable, CustomPlaygroundQuickLookable {

        /// Returns the next consecutive value after `self`.
        ///
        /// - Precondition: The next value is representable.
        public func successor() -> String.CharacterView.Index

        /// Returns the previous consecutive value before `self`.
        ///
        /// - Precondition: The previous value is representable.
        public func predecessor() -> String.CharacterView.Index

        /// The `PlaygroundQuickLook` for `self`.
        ///
        /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
        ///   should be unaffected by subsequent mutations of `self`.
        public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
    }

    /// The position of the first `Character` if `self` is
    /// non-empty; identical to `endIndex` otherwise.
    public var startIndex: String.CharacterView.Index { get }

    /// The "past the end" position.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    public var endIndex: String.CharacterView.Index { get }

    /// Access the `Character` at `position`.
    ///
    /// - Precondition: `position` is a valid position in `self` and
    ///   `position != endIndex`.
    public subscript(i: String.CharacterView.Index) -> Character { get }
}

extension String.CharacterView : RangeReplaceableCollection {

    /// Create an empty instance.
    public init()

    /// Replace the characters within `bounds` with `newElements`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`bounds.count`) if `bounds.endIndex
    ///   == self.endIndex` and `newElements.isEmpty`, O(N) otherwise.
    public mutating func replaceSubrange<C : Collection where C.Iterator.Element == Character>(bounds: Range<String.CharacterView.Index>, with newElements: C)

    /// Reserve enough space to store `n` ASCII characters.
    ///
    /// - Complexity: O(`n`).
    public mutating func reserveCapacity(n: Int)

    /// Append `c` to `self`.
    ///
    /// - Complexity: Amortized O(1).
    public mutating func append(c: Character)

    /// Append the elements of `newElements` to `self`.
    public mutating func append<S : Sequence where S.Iterator.Element == Character>(contentsOf newElements: S)

    /// Create an instance containing `characters`.
    public init<S : Sequence where S.Iterator.Element == Character>(_ characters: S)
}

extension String.CharacterView {

    /// Access the characters in `bounds`.
    ///
    /// - Complexity: O(1) unless bridging from Objective-C requires an
    ///   O(N) conversion.
    public subscript(bounds: Range<String.CharacterView.Index>) -> String.CharacterView { get }
}

extension String.UnicodeScalarView : RangeReplaceableCollection {

    /// Construct an empty instance.
    public init()

    /// Reserve enough space to store `n` ASCII characters.
    ///
    /// - Complexity: O(`n`).
    public mutating func reserveCapacity(n: Int)

    /// Append `x` to `self`.
    ///
    /// - Complexity: Amortized O(1).
    public mutating func append(x: UnicodeScalar)

    /// Append the elements of `newElements` to `self`.
    ///
    /// - Complexity: O(*length of result*).
    public mutating func append<S : Sequence where S.Iterator.Element == UnicodeScalar>(contentsOf newElements: S)

    /// Replace the elements within `bounds` with `newElements`.
    ///
    /// Invalidates all indices with respect to `self`.
    ///
    /// - Complexity: O(`bounds.count`) if `bounds.endIndex
    ///   == self.endIndex` and `newElements.isEmpty`, O(N) otherwise.
    public mutating func replaceSubrange<C : Collection where C.Iterator.Element == UnicodeScalar>(bounds: Range<String.UnicodeScalarView.Index>, with newElements: C)
}

extension String.UnicodeScalarView : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension String.UnicodeScalarView : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension String.UTF16View : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension String.UTF16View : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension String.UTF8View : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension String.UTF8View : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension String.CharacterView.Index {

    /// Construct the position in `characters` that corresponds exactly to
    /// `unicodeScalarIndex`. If no such position exists, the result is `nil`.
    ///
    /// - Precondition: `unicodeScalarIndex` is an element of
    ///   `characters.unicodeScalars.indices`.
    public init?(_ unicodeScalarIndex: UnicodeScalarIndex, within characters: String)

    /// Construct the position in `characters` that corresponds exactly to
    /// `utf16Index`. If no such position exists, the result is `nil`.
    ///
    /// - Precondition: `utf16Index` is an element of
    ///   `characters.utf16.indices`.
    public init?(_ utf16Index: UTF16Index, within characters: String)

    /// Construct the position in `characters` that corresponds exactly to
    /// `utf8Index`. If no such position exists, the result is `nil`.
    ///
    /// - Precondition: `utf8Index` is an element of
    ///   `characters.utf8.indices`.
    public init?(_ utf8Index: UTF8Index, within characters: String)

    /// Returns the position in `utf8` that corresponds exactly
    /// to `self`.
    ///
    /// - Precondition: `self` is an element of `String(utf8).indices`.
    public func samePosition(in utf8: String.UTF8View) -> String.UTF8View.Index

    /// Returns the position in `utf16` that corresponds exactly
    /// to `self`.
    ///
    /// - Precondition: `self` is an element of `String(utf16).indices`.
    public func samePosition(in utf16: String.UTF16View) -> String.UTF16View.Index

    /// Returns the position in `unicodeScalars` that corresponds exactly
    /// to `self`.
    ///
    /// - Precondition: `self` is an element of `String(unicodeScalars).indices`.
    public func samePosition(in unicodeScalars: String.UnicodeScalarView) -> String.UnicodeScalarView.Index
}

extension String.UnicodeScalarView.UnicodeScalarIndex {

    /// Construct the position in `unicodeScalars` that corresponds exactly to
    /// `utf16Index`. If no such position exists, the result is `nil`.
    ///
    /// - Precondition: `utf16Index` is an element of
    ///   `String(unicodeScalars).utf16.indices`.
    public init?(_ utf16Index: UTF16Index, within unicodeScalars: String.UnicodeScalarView)

    /// Construct the position in `unicodeScalars` that corresponds exactly to
    /// `utf8Index`. If no such position exists, the result is `nil`.
    ///
    /// - Precondition: `utf8Index` is an element of
    ///   `String(unicodeScalars).utf8.indices`.
    public init?(_ utf8Index: UTF8Index, within unicodeScalars: String.UnicodeScalarView)

    /// Construct the position in `unicodeScalars` that corresponds
    /// exactly to `characterIndex`.
    ///
    /// - Precondition: `characterIndex` is an element of
    ///   `String(unicodeScalars).indices`.
    public init(_ characterIndex: Index, within unicodeScalars: String.UnicodeScalarView)

    /// Returns the position in `utf8` that corresponds exactly
    /// to `self`.
    ///
    /// - Precondition: `self` is an element of `String(utf8)!.indices`.
    public func samePosition(in utf8: String.UTF8View) -> String.UTF8View.Index

    /// Returns the position in `utf16` that corresponds exactly
    /// to `self`.
    ///
    /// - Precondition: `self` is an element of `String(utf16)!.indices`.
    public func samePosition(in utf16: String.UTF16View) -> String.UTF16View.Index

    /// Returns the position in `characters` that corresponds exactly
    /// to `self`, or if no such position exists, `nil`.
    ///
    /// - Precondition: `self` is an element of
    ///   `characters.unicodeScalars.indices`.
    public func samePosition(in characters: String) -> Index?
}

extension String.UTF16View.Index : BidirectionalIndex {

    /// A type that can represent the number of steps between pairs of
    /// `Self` values where one value is reachable from the other.
    ///
    /// Reachability is defined by the ability to produce one value from
    /// the other via zero or more applications of `successor`.
    public typealias Distance = Int

    /// Returns the next consecutive value in a discrete sequence of
    /// `Self` values.
    ///
    /// - Precondition: `self` has a well-defined successor.
    public func successor() -> String.UTF16View.Index

    /// Returns the previous consecutive value in a discrete sequence.
    ///
    /// If `self` has a well-defined successor,
    /// `self.successor().predecessor() == self`.  If `self` has a
    /// well-defined predecessor, `self.predecessor().successor() ==
    /// self`.
    ///
    /// - Precondition: `self` has a well-defined predecessor.
    public func predecessor() -> String.UTF16View.Index
}

extension String.UTF16View.Index : Comparable, Equatable {
}

extension String.UTF16View.Index {

    /// Measure the distance between `self` and `end`.
    ///
    /// - Precondition:
    ///   - `start` and `end` are part of the same sequence when conforming to
    ///     `RandomAccessIndex`.
    ///   - `end` is reachable from `self` by incrementation otherwise.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`n`) otherwise, where `n` is the function's result.
    public func distance(to end: String.UTF16View.Index) -> Distance

    /// Returns the result of advancing `self` by `n` positions.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Distance) -> String.UTF16View.Index

    /// Returns the result of advancing `self` by `n` positions, or until it
    /// equals `limit`.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times
    ///     but not past `limit`.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times
    ///     but not past `limit`.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Distance, limit: String.UTF16View.Index) -> String.UTF16View.Index
}

extension String.UTF16View.Index {

    /// Construct the position in `utf16` that corresponds exactly to
    /// `utf8Index`. If no such position exists, the result is `nil`.
    ///
    /// - Precondition: `utf8Index` is an element of
    ///   `String(utf16)!.utf8.indices`.
    public init?(_ utf8Index: UTF8Index, within utf16: String.UTF16View)

    /// Construct the position in `utf16` that corresponds exactly to
    /// `unicodeScalarIndex`.
    ///
    /// - Precondition: `unicodeScalarIndex` is an element of
    ///   `String(utf16)!.unicodeScalars.indices`.
    public init(_ unicodeScalarIndex: UnicodeScalarIndex, within utf16: String.UTF16View)

    /// Construct the position in `utf16` that corresponds exactly to
    /// `characterIndex`.
    ///
    /// - Precondition: `characterIndex` is an element of
    ///   `String(utf16)!.indices`.
    public init(_ characterIndex: Index, within utf16: String.UTF16View)

    /// Returns the position in `utf8` that corresponds exactly
    /// to `self`, or if no such position exists, `nil`.
    ///
    /// - Precondition: `self` is an element of
    ///   `String(utf8)!.utf16.indices`.
    public func samePosition(in utf8: String.UTF8View) -> String.UTF8View.Index?

    /// Returns the position in `unicodeScalars` that corresponds exactly
    /// to `self`, or if no such position exists, `nil`.
    ///
    /// - Precondition: `self` is an element of
    ///   `String(unicodeScalars).utf16.indices`.
    public func samePosition(in unicodeScalars: String.UnicodeScalarView) -> UnicodeScalarIndex?

    /// Returns the position in `characters` that corresponds exactly
    /// to `self`, or if no such position exists, `nil`.
    ///
    /// - Precondition: `self` is an element of `characters.utf16.indices`.
    public func samePosition(in characters: String) -> Index?
}

extension String.UTF8View.Index {

    /// Construct the position in `utf8` that corresponds exactly to
    /// `utf16Index`. If no such position exists, the result is `nil`.
    ///
    /// - Precondition: `utf8Index` is an element of
    ///   `String(utf16)!.utf8.indices`.
    public init?(_ utf16Index: UTF16Index, within utf8: String.UTF8View)

    /// Construct the position in `utf8` that corresponds exactly to
    /// `unicodeScalarIndex`.
    ///
    /// - Precondition: `unicodeScalarIndex` is an element of
    ///   `String(utf8)!.unicodeScalars.indices`.
    public init(_ unicodeScalarIndex: UnicodeScalarIndex, within utf8: String.UTF8View)

    /// Construct the position in `utf8` that corresponds exactly to
    /// `characterIndex`.
    ///
    /// - Precondition: `characterIndex` is an element of
    ///   `String(utf8)!.indices`.
    public init(_ characterIndex: Index, within utf8: String.UTF8View)

    /// Returns the position in `utf16` that corresponds exactly
    /// to `self`, or if no such position exists, `nil`.
    ///
    /// - Precondition: `self` is an element of `String(utf16)!.utf8.indices`.
    public func samePosition(in utf16: String.UTF16View) -> String.UTF16View.Index?

    /// Returns the position in `unicodeScalars` that corresponds exactly
    /// to `self`, or if no such position exists, `nil`.
    ///
    /// - Precondition: `self` is an element of
    ///   `String(unicodeScalars).utf8.indices`.
    public func samePosition(in unicodeScalars: String.UnicodeScalarView) -> UnicodeScalarIndex?

    /// Returns the position in `characters` that corresponds exactly
    /// to `self`, or if no such position exists, `nil`.
    ///
    /// - Precondition: `self` is an element of `characters.utf8.indices`.
    public func samePosition(in characters: String) -> Index?
}

/// Conforming types can be initialized with string interpolations
/// containing `\(`...`)` clauses.
public protocol StringInterpolationConvertible {

    /// Create an instance by concatenating the elements of `strings`.
    public init(stringInterpolation strings: Self...)

    /// Create an instance containing `expr`'s `print` representation.
    public init<T>(stringInterpolationSegment expr: T)
}

/// Conforming types can be initialized with arbitrary string literals.
public protocol StringLiteralConvertible : ExtendedGraphemeClusterLiteralConvertible {

    associatedtype StringLiteralType

    /// Create an instance initialized to `value`.
    public init(stringLiteral value: Self.StringLiteralType)
}

/// The default type for an otherwise-unconstrained string literal.
public typealias StringLiteralType = String

/// A 64-bit unsigned integer value
/// type.
public struct UInt : UnsignedInteger, Comparable, Equatable {

    /// A type that can represent the number of steps between pairs of
    /// values.
    public typealias Distance = Int

    /// Create an instance initialized to zero.
    public init()

    public init(_ v: Builtin.Word)

    /// Create an instance initialized to `value`.
    public init(_ value: UInt)

    /// Creates an integer from its big-endian representation, changing the
    /// byte order if necessary.
    public init(bigEndian value: UInt)

    /// Creates an integer from its little-endian representation, changing the
    /// byte order if necessary.
    public init(littleEndian value: UInt)

    public init(_builtinIntegerLiteral value: Builtin.Int2048)

    /// Create an instance initialized to `value`.
    public init(integerLiteral value: UInt)

    /// Returns the big-endian representation of the integer, changing the
    /// byte order if necessary.
    public var bigEndian: UInt { get }

    /// Returns the little-endian representation of the integer, changing the
    /// byte order if necessary.
    public var littleEndian: UInt { get }

    /// Returns the current integer with the byte order swapped.
    public var byteSwapped: UInt { get }

    public static var max: UInt { get }

    public static var min: UInt { get }
}

extension UInt : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension UInt : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension UInt : RandomAccessIndex {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> UInt

    /// Returns the previous consecutive value before `self`.
    ///
    /// - Precondition: The previous value is representable.
    public func predecessor() -> UInt

    /// Measure the distance between `self` and `end`.
    ///
    /// - Precondition:
    ///   - `start` and `end` are part of the same sequence when conforming to
    ///     `RandomAccessIndex`.
    ///   - `end` is reachable from `self` by incrementation otherwise.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`n`) otherwise, where `n` is the function's result.
    public func distance(to other: UInt) -> Distance

    /// Returns the result of advancing `self` by `n` positions.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Distance) -> UInt
}

extension UInt {

    /// Add `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func addWithOverflow(lhs: UInt, _ rhs: UInt) -> (UInt, overflow: Bool)

    /// Subtract `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func subtractWithOverflow(lhs: UInt, _ rhs: UInt) -> (UInt, overflow: Bool)

    /// Multiply `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func multiplyWithOverflow(lhs: UInt, _ rhs: UInt) -> (UInt, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// a result and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func divideWithOverflow(lhs: UInt, _ rhs: UInt) -> (UInt, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// the remainder and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func remainderWithOverflow(lhs: UInt, _ rhs: UInt) -> (UInt, overflow: Bool)

    /// Represent this number using Swift's widest native unsigned
    /// integer type.
    public func toUIntMax() -> UIntMax

    /// Explicitly convert to `IntMax`, trapping on overflow (except in -Ounchecked builds).
    public func toIntMax() -> IntMax
}

extension UInt {

    public init(_ v: UInt8)

    public init(_ v: Int8)

    public init(_ v: UInt16)

    public init(_ v: Int16)

    public init(_ v: UInt32)

    public init(_ v: Int32)

    /// Convert from Swift's widest unsigned integer type, trapping on
    /// overflow.
    public init(_ v: UInt64)

    /// Construct a `UInt` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt64)

    public init(_ v: Int64)

    /// Construct a `UInt` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int64)

    public init(_ v: Int)

    /// Construct a `UInt` having the same memory representation as
    /// the `Int` `bitPattern`.  No range or overflow checking
    /// occurs, and the resulting `UInt` may not have the same numeric
    /// value as `bitPattern`--it is only guaranteed to use the same
    /// pattern of bits.
    public init(bitPattern: Int)
}

extension UInt : BitwiseOperations {

    /// The empty bitset of type UInt.
    public static var allZeros: UInt { get }
}

extension UInt {

    /// Construct an instance that approximates `other`.
    public init(_ other: Float)

    /// Construct an instance that approximates `other`.
    public init(_ other: Double)

    /// Construct an instance that approximates `other`.
    public init(_ other: Float80)
}

extension UInt {

    /// Construct from an ASCII representation in the given `radix`.
    ///
    /// If `text` does not match the regular expression
    /// "[+-]?[0-9a-zA-Z]+", or the value it denotes in the given `radix`
    /// is not representable, the result is `nil`.
    public init?(_ text: String, radix: Int = default)
}

extension UInt : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension UInt : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension UInt {

    /// Create a `UInt` that captures the full value of `objectID`.
    public init(_ objectID: ObjectIdentifier)
}

extension UInt : CVarArg {
}

/// A 16-bit unsigned integer value
/// type.
public struct UInt16 : UnsignedInteger, Comparable, Equatable {

    /// A type that can represent the number of steps between pairs of
    /// values.
    public typealias Distance = Int

    /// Create an instance initialized to zero.
    public init()

    /// Create an instance initialized to `value`.
    public init(_ value: UInt16)

    /// Creates an integer from its big-endian representation, changing the
    /// byte order if necessary.
    public init(bigEndian value: UInt16)

    /// Creates an integer from its little-endian representation, changing the
    /// byte order if necessary.
    public init(littleEndian value: UInt16)

    public init(_builtinIntegerLiteral value: Builtin.Int2048)

    /// Create an instance initialized to `value`.
    public init(integerLiteral value: UInt16)

    /// Returns the big-endian representation of the integer, changing the
    /// byte order if necessary.
    public var bigEndian: UInt16 { get }

    /// Returns the little-endian representation of the integer, changing the
    /// byte order if necessary.
    public var littleEndian: UInt16 { get }

    /// Returns the current integer with the byte order swapped.
    public var byteSwapped: UInt16 { get }

    public static var max: UInt16 { get }

    public static var min: UInt16 { get }
}

extension UInt16 : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension UInt16 : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension UInt16 : RandomAccessIndex {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> UInt16

    /// Returns the previous consecutive value before `self`.
    ///
    /// - Precondition: The previous value is representable.
    public func predecessor() -> UInt16

    /// Measure the distance between `self` and `end`.
    ///
    /// - Precondition:
    ///   - `start` and `end` are part of the same sequence when conforming to
    ///     `RandomAccessIndex`.
    ///   - `end` is reachable from `self` by incrementation otherwise.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`n`) otherwise, where `n` is the function's result.
    public func distance(to other: UInt16) -> Distance

    /// Returns the result of advancing `self` by `n` positions.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Distance) -> UInt16
}

extension UInt16 {

    /// Add `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func addWithOverflow(lhs: UInt16, _ rhs: UInt16) -> (UInt16, overflow: Bool)

    /// Subtract `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func subtractWithOverflow(lhs: UInt16, _ rhs: UInt16) -> (UInt16, overflow: Bool)

    /// Multiply `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func multiplyWithOverflow(lhs: UInt16, _ rhs: UInt16) -> (UInt16, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// a result and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func divideWithOverflow(lhs: UInt16, _ rhs: UInt16) -> (UInt16, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// the remainder and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func remainderWithOverflow(lhs: UInt16, _ rhs: UInt16) -> (UInt16, overflow: Bool)

    /// Represent this number using Swift's widest native unsigned
    /// integer type.
    public func toUIntMax() -> UIntMax

    /// Explicitly convert to `IntMax`.
    public func toIntMax() -> IntMax
}

extension UInt16 {

    public init(_ v: UInt8)

    public init(_ v: Int8)

    public init(_ v: Int16)

    public init(_ v: UInt32)

    /// Construct a `UInt16` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt32)

    public init(_ v: Int32)

    /// Construct a `UInt16` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int32)

    /// Convert from Swift's widest unsigned integer type, trapping on
    /// overflow.
    public init(_ v: UInt64)

    /// Construct a `UInt16` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt64)

    public init(_ v: Int64)

    /// Construct a `UInt16` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int64)

    public init(_ v: UInt)

    /// Construct a `UInt16` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt)

    public init(_ v: Int)

    /// Construct a `UInt16` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int)

    /// Construct a `UInt16` having the same memory representation as
    /// the `Int16` `bitPattern`.  No range or overflow checking
    /// occurs, and the resulting `UInt16` may not have the same numeric
    /// value as `bitPattern`--it is only guaranteed to use the same
    /// pattern of bits.
    public init(bitPattern: Int16)
}

extension UInt16 : BitwiseOperations {

    /// The empty bitset of type UInt16.
    public static var allZeros: UInt16 { get }
}

extension UInt16 {

    /// Construct an instance that approximates `other`.
    public init(_ other: Float)

    /// Construct an instance that approximates `other`.
    public init(_ other: Double)

    /// Construct an instance that approximates `other`.
    public init(_ other: Float80)
}

extension UInt16 {

    /// Construct from an ASCII representation in the given `radix`.
    ///
    /// If `text` does not match the regular expression
    /// "[+-]?[0-9a-zA-Z]+", or the value it denotes in the given `radix`
    /// is not representable, the result is `nil`.
    public init?(_ text: String, radix: Int = default)
}

extension UInt16 : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension UInt16 : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension CodeUnit {
}

extension UInt16 : CVarArg {
}

/// A 32-bit unsigned integer value
/// type.
public struct UInt32 : UnsignedInteger, Comparable, Equatable {

    /// A type that can represent the number of steps between pairs of
    /// values.
    public typealias Distance = Int

    /// Create an instance initialized to zero.
    public init()

    /// Create an instance initialized to `value`.
    public init(_ value: UInt32)

    /// Creates an integer from its big-endian representation, changing the
    /// byte order if necessary.
    public init(bigEndian value: UInt32)

    /// Creates an integer from its little-endian representation, changing the
    /// byte order if necessary.
    public init(littleEndian value: UInt32)

    public init(_builtinIntegerLiteral value: Builtin.Int2048)

    /// Create an instance initialized to `value`.
    public init(integerLiteral value: UInt32)

    /// Returns the big-endian representation of the integer, changing the
    /// byte order if necessary.
    public var bigEndian: UInt32 { get }

    /// Returns the little-endian representation of the integer, changing the
    /// byte order if necessary.
    public var littleEndian: UInt32 { get }

    /// Returns the current integer with the byte order swapped.
    public var byteSwapped: UInt32 { get }

    public static var max: UInt32 { get }

    public static var min: UInt32 { get }
}

extension UInt32 : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension UInt32 : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension UInt32 : RandomAccessIndex {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> UInt32

    /// Returns the previous consecutive value before `self`.
    ///
    /// - Precondition: The previous value is representable.
    public func predecessor() -> UInt32

    /// Measure the distance between `self` and `end`.
    ///
    /// - Precondition:
    ///   - `start` and `end` are part of the same sequence when conforming to
    ///     `RandomAccessIndex`.
    ///   - `end` is reachable from `self` by incrementation otherwise.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`n`) otherwise, where `n` is the function's result.
    public func distance(to other: UInt32) -> Distance

    /// Returns the result of advancing `self` by `n` positions.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Distance) -> UInt32
}

extension UInt32 {

    /// Add `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func addWithOverflow(lhs: UInt32, _ rhs: UInt32) -> (UInt32, overflow: Bool)

    /// Subtract `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func subtractWithOverflow(lhs: UInt32, _ rhs: UInt32) -> (UInt32, overflow: Bool)

    /// Multiply `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func multiplyWithOverflow(lhs: UInt32, _ rhs: UInt32) -> (UInt32, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// a result and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func divideWithOverflow(lhs: UInt32, _ rhs: UInt32) -> (UInt32, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// the remainder and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func remainderWithOverflow(lhs: UInt32, _ rhs: UInt32) -> (UInt32, overflow: Bool)

    /// Represent this number using Swift's widest native unsigned
    /// integer type.
    public func toUIntMax() -> UIntMax

    /// Explicitly convert to `IntMax`.
    public func toIntMax() -> IntMax
}

extension UInt32 {

    public init(_ v: UInt8)

    public init(_ v: Int8)

    public init(_ v: UInt16)

    public init(_ v: Int16)

    public init(_ v: Int32)

    /// Convert from Swift's widest unsigned integer type, trapping on
    /// overflow.
    public init(_ v: UInt64)

    /// Construct a `UInt32` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt64)

    public init(_ v: Int64)

    /// Construct a `UInt32` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int64)

    public init(_ v: UInt)

    /// Construct a `UInt32` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt)

    public init(_ v: Int)

    /// Construct a `UInt32` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int)

    /// Construct a `UInt32` having the same memory representation as
    /// the `Int32` `bitPattern`.  No range or overflow checking
    /// occurs, and the resulting `UInt32` may not have the same numeric
    /// value as `bitPattern`--it is only guaranteed to use the same
    /// pattern of bits.
    public init(bitPattern: Int32)
}

extension UInt32 : BitwiseOperations {

    /// The empty bitset of type UInt32.
    public static var allZeros: UInt32 { get }
}

extension UInt32 {

    /// Construct an instance that approximates `other`.
    public init(_ other: Float)

    /// Construct an instance that approximates `other`.
    public init(_ other: Double)

    /// Construct an instance that approximates `other`.
    public init(_ other: Float80)
}

extension UInt32 {

    /// Construct from an ASCII representation in the given `radix`.
    ///
    /// If `text` does not match the regular expression
    /// "[+-]?[0-9a-zA-Z]+", or the value it denotes in the given `radix`
    /// is not representable, the result is `nil`.
    public init?(_ text: String, radix: Int = default)
}

extension UInt32 : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension UInt32 : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension UInt32 {

    /// Construct with value `v.value`.
    ///
    /// - Precondition: `v.value` can be represented as UInt32.
    public init(_ v: UnicodeScalar)
}

extension UInt32 : CVarArg {
}

/// A 64-bit unsigned integer value
/// type.
public struct UInt64 : UnsignedInteger, Comparable, Equatable {

    /// A type that can represent the number of steps between pairs of
    /// values.
    public typealias Distance = Int

    /// Create an instance initialized to zero.
    public init()

    /// Create an instance initialized to `value`.
    public init(_ value: UInt64)

    /// Creates an integer from its big-endian representation, changing the
    /// byte order if necessary.
    public init(bigEndian value: UInt64)

    /// Creates an integer from its little-endian representation, changing the
    /// byte order if necessary.
    public init(littleEndian value: UInt64)

    public init(_builtinIntegerLiteral value: Builtin.Int2048)

    /// Create an instance initialized to `value`.
    public init(integerLiteral value: UInt64)

    /// Returns the big-endian representation of the integer, changing the
    /// byte order if necessary.
    public var bigEndian: UInt64 { get }

    /// Returns the little-endian representation of the integer, changing the
    /// byte order if necessary.
    public var littleEndian: UInt64 { get }

    /// Returns the current integer with the byte order swapped.
    public var byteSwapped: UInt64 { get }

    public static var max: UInt64 { get }

    public static var min: UInt64 { get }
}

extension UInt64 : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension UInt64 : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension UInt64 : RandomAccessIndex {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> UInt64

    /// Returns the previous consecutive value before `self`.
    ///
    /// - Precondition: The previous value is representable.
    public func predecessor() -> UInt64

    /// Measure the distance between `self` and `end`.
    ///
    /// - Precondition:
    ///   - `start` and `end` are part of the same sequence when conforming to
    ///     `RandomAccessIndex`.
    ///   - `end` is reachable from `self` by incrementation otherwise.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`n`) otherwise, where `n` is the function's result.
    public func distance(to other: UInt64) -> Distance

    /// Returns the result of advancing `self` by `n` positions.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Distance) -> UInt64
}

extension UInt64 {

    /// Add `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func addWithOverflow(lhs: UInt64, _ rhs: UInt64) -> (UInt64, overflow: Bool)

    /// Subtract `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func subtractWithOverflow(lhs: UInt64, _ rhs: UInt64) -> (UInt64, overflow: Bool)

    /// Multiply `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func multiplyWithOverflow(lhs: UInt64, _ rhs: UInt64) -> (UInt64, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// a result and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func divideWithOverflow(lhs: UInt64, _ rhs: UInt64) -> (UInt64, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// the remainder and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func remainderWithOverflow(lhs: UInt64, _ rhs: UInt64) -> (UInt64, overflow: Bool)

    /// Represent this number using Swift's widest native unsigned
    /// integer type.
    public func toUIntMax() -> UIntMax

    /// Explicitly convert to `IntMax`, trapping on overflow (except in -Ounchecked builds).
    public func toIntMax() -> IntMax
}

extension UInt64 {

    public init(_ v: UInt8)

    public init(_ v: Int8)

    public init(_ v: UInt16)

    public init(_ v: Int16)

    public init(_ v: UInt32)

    public init(_ v: Int32)

    public init(_ v: Int64)

    public init(_ v: UInt)

    public init(_ v: Int)

    /// Construct a `UInt64` having the same memory representation as
    /// the `Int64` `bitPattern`.  No range or overflow checking
    /// occurs, and the resulting `UInt64` may not have the same numeric
    /// value as `bitPattern`--it is only guaranteed to use the same
    /// pattern of bits.
    public init(bitPattern: Int64)
}

extension UInt64 : BitwiseOperations {

    /// The empty bitset of type UInt64.
    public static var allZeros: UInt64 { get }
}

extension UInt64 {

    /// Construct an instance that approximates `other`.
    public init(_ other: Float)

    /// Construct an instance that approximates `other`.
    public init(_ other: Double)

    /// Construct an instance that approximates `other`.
    public init(_ other: Float80)
}

extension UInt64 {

    /// Construct from an ASCII representation in the given `radix`.
    ///
    /// If `text` does not match the regular expression
    /// "[+-]?[0-9a-zA-Z]+", or the value it denotes in the given `radix`
    /// is not representable, the result is `nil`.
    public init?(_ text: String, radix: Int = default)
}

extension UInt64 : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension UInt64 : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension UInt64 {

    /// Construct with value `v.value`.
    ///
    /// - Precondition: `v.value` can be represented as UInt64.
    public init(_ v: UnicodeScalar)
}

extension UInt64 : CVarArg {
}

/// An 8-bit unsigned integer value
/// type.
public struct UInt8 : UnsignedInteger, Comparable, Equatable {

    /// A type that can represent the number of steps between pairs of
    /// values.
    public typealias Distance = Int

    /// Create an instance initialized to zero.
    public init()

    /// Create an instance initialized to `value`.
    public init(_ value: UInt8)

    public init(_builtinIntegerLiteral value: Builtin.Int2048)

    /// Create an instance initialized to `value`.
    public init(integerLiteral value: UInt8)

    public static var max: UInt8 { get }

    public static var min: UInt8 { get }
}

extension UInt8 : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension UInt8 : CustomStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }
}

extension UInt8 : RandomAccessIndex {

    /// Returns the next consecutive value after `self`.
    ///
    /// - Precondition: The next value is representable.
    public func successor() -> UInt8

    /// Returns the previous consecutive value before `self`.
    ///
    /// - Precondition: The previous value is representable.
    public func predecessor() -> UInt8

    /// Measure the distance between `self` and `end`.
    ///
    /// - Precondition:
    ///   - `start` and `end` are part of the same sequence when conforming to
    ///     `RandomAccessIndex`.
    ///   - `end` is reachable from `self` by incrementation otherwise.
    ///
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`n`) otherwise, where `n` is the function's result.
    public func distance(to other: UInt8) -> Distance

    /// Returns the result of advancing `self` by `n` positions.
    ///
    /// - Returns:
    ///   - If `n > 0`, the result of applying `successor` to `self` `n` times.
    ///   - If `n < 0`, the result of applying `predecessor` to `self` `-n` times.
    ///   - Otherwise, `self`.
    ///
    /// - Precondition: `n >= 0` if only conforming to `ForwardIndex`
    /// - Complexity:
    ///   - O(1) if conforming to `RandomAccessIndex`
    ///   - O(`abs(n)`) otherwise
    public func advanced(by n: Distance) -> UInt8
}

extension UInt8 {

    /// Add `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func addWithOverflow(lhs: UInt8, _ rhs: UInt8) -> (UInt8, overflow: Bool)

    /// Subtract `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func subtractWithOverflow(lhs: UInt8, _ rhs: UInt8) -> (UInt8, overflow: Bool)

    /// Multiply `lhs` and `rhs`, returning a result and a
    /// `Bool` that is `true` iff the operation caused an arithmetic
    /// overflow.
    public static func multiplyWithOverflow(lhs: UInt8, _ rhs: UInt8) -> (UInt8, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// a result and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func divideWithOverflow(lhs: UInt8, _ rhs: UInt8) -> (UInt8, overflow: Bool)

    /// Divide `lhs` and `rhs`, returning
    /// the remainder and a `Bool`
    /// that is `true` iff the operation caused an arithmetic overflow.
    public static func remainderWithOverflow(lhs: UInt8, _ rhs: UInt8) -> (UInt8, overflow: Bool)

    /// Represent this number using Swift's widest native unsigned
    /// integer type.
    public func toUIntMax() -> UIntMax

    /// Explicitly convert to `IntMax`.
    public func toIntMax() -> IntMax
}

extension UInt8 {

    public init(_ v: Int8)

    public init(_ v: UInt16)

    /// Construct a `UInt8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt16)

    public init(_ v: Int16)

    /// Construct a `UInt8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int16)

    public init(_ v: UInt32)

    /// Construct a `UInt8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt32)

    public init(_ v: Int32)

    /// Construct a `UInt8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int32)

    /// Convert from Swift's widest unsigned integer type, trapping on
    /// overflow.
    public init(_ v: UInt64)

    /// Construct a `UInt8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt64)

    public init(_ v: Int64)

    /// Construct a `UInt8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int64)

    public init(_ v: UInt)

    /// Construct a `UInt8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: UInt)

    public init(_ v: Int)

    /// Construct a `UInt8` having the same bitwise representation as
    /// the least significant bits of the provided bit pattern.
    ///
    /// No range or overflow checking occurs.
    public init(truncatingBitPattern: Int)

    /// Construct a `UInt8` having the same memory representation as
    /// the `Int8` `bitPattern`.  No range or overflow checking
    /// occurs, and the resulting `UInt8` may not have the same numeric
    /// value as `bitPattern`--it is only guaranteed to use the same
    /// pattern of bits.
    public init(bitPattern: Int8)
}

extension UInt8 : BitwiseOperations {

    /// The empty bitset of type UInt8.
    public static var allZeros: UInt8 { get }
}

extension UInt8 {

    /// Construct an instance that approximates `other`.
    public init(_ other: Float)

    /// Construct an instance that approximates `other`.
    public init(_ other: Double)

    /// Construct an instance that approximates `other`.
    public init(_ other: Float80)
}

extension UInt8 {

    /// Construct from an ASCII representation in the given `radix`.
    ///
    /// If `text` does not match the regular expression
    /// "[+-]?[0-9a-zA-Z]+", or the value it denotes in the given `radix`
    /// is not representable, the result is `nil`.
    public init?(_ text: String, radix: Int = default)
}

extension UInt8 : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension UInt8 : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension CodeUnit {
}

extension UInt8 {

    /// Construct with value `v.value`.
    ///
    /// - Precondition: `v.value` can be represented as ASCII (0..<128).
    public init(ascii v: UnicodeScalar)
}

extension UInt8 : CVarArg {
}

/// The largest native unsigned integer type.
public typealias UIntMax = UInt64

/// A codec for [UTF-16](http://www.unicode.org/glossary/#UTF_16).
public struct UTF16 : UnicodeCodec {

    /// A type that can hold [code unit](http://www.unicode.org/glossary/#code_unit)
    /// values for this encoding.
    public typealias CodeUnit = UInt16

    public init()

    /// Start or continue decoding a UTF sequence.
    ///
    /// In order to decode a code unit sequence completely, this function should
    /// be called repeatedly until it returns `UnicodeDecodingResult.emptyInput`.
    /// Checking that the iterator was exhausted is not sufficient.  The decoder
    /// can have an internal buffer that is pre-filled with data from the input
    /// iterator.
    ///
    /// Because of buffering, it is impossible to find the corresponding position
    /// in the iterator for a given returned `UnicodeScalar` or an error.
    ///
    /// - Parameter next: An iterator of code units to be decoded.  Repeated
    ///   calls to this method on the same instance should always pass the same
    ///   iterator and the iterator or copies thereof should not be used for
    ///   anything else between calls.  Failing to do so will yield unspecified
    ///   results.
    public mutating func decode<I : IteratorProtocol where I.Element == CodeUnit>(input: inout I) -> UnicodeDecodingResult

    /// Encode a `UnicodeScalar` as a series of `CodeUnit`s by
    /// calling `processCodeUnit` on each `CodeUnit`.
    public static func encode(input: UnicodeScalar, @noescape sendingOutputTo processCodeUnit: (CodeUnit) -> Swift.Void)
}

extension UTF16 {

    /// Returns the number of code units required to encode `x`.
    public static func width(x: UnicodeScalar) -> Int

    /// Returns the high surrogate code unit of a [surrogate pair](http://www.unicode.org/glossary/#surrogate_pair) representing
    /// `x`.
    ///
    /// - Precondition: `width(x) == 2`.
    public static func leadSurrogate(x: UnicodeScalar) -> CodeUnit

    /// Returns the low surrogate code unit of a [surrogate pair](http://www.unicode.org/glossary/#surrogate_pair) representing
    /// `x`.
    ///
    /// - Precondition: `width(x) == 2`.
    public static func trailSurrogate(x: UnicodeScalar) -> CodeUnit

    public static func isLeadSurrogate(x: CodeUnit) -> Bool

    public static func isTrailSurrogate(x: CodeUnit) -> Bool

    /// Returns the number of UTF-16 code units required for the given code unit
    /// sequence when transcoded to UTF-16, and a bit describing if the sequence
    /// was found to contain only ASCII characters.
    ///
    /// If `repairIllFormedSequences` is `true`, the function always succeeds.
    /// If it is `false`, `nil` is returned if an ill-formed code unit sequence is
    /// found in `input`.
    public static func transcodedLength<Encoding : UnicodeCodec, Input : IteratorProtocol where Encoding.CodeUnit == Input.Element>(of input: Input, decodedAs sourceEncoding: Encoding.Type, repairingIllFormedSequences: Bool) -> (count: Int, isASCII: Bool)?
}

/// A codec for [UTF-32](http://www.unicode.org/glossary/#UTF_32).
public struct UTF32 : UnicodeCodec {

    /// A type that can hold [code unit](http://www.unicode.org/glossary/#code_unit)
    /// values for this encoding.
    public typealias CodeUnit = UInt32

    public init()

    /// Start or continue decoding a UTF sequence.
    ///
    /// In order to decode a code unit sequence completely, this function should
    /// be called repeatedly until it returns `UnicodeDecodingResult.emptyInput`.
    /// Checking that the iterator was exhausted is not sufficient.  The decoder
    /// can have an internal buffer that is pre-filled with data from the input
    /// iterator.
    ///
    /// Because of buffering, it is impossible to find the corresponding position
    /// in the iterator for a given returned `UnicodeScalar` or an error.
    ///
    /// - Parameter next: An iterator of code units to be decoded.  Repeated
    ///   calls to this method on the same instance should always pass the same
    ///   iterator and the iterator or copies thereof should not be used for
    ///   anything else between calls.  Failing to do so will yield unspecified
    ///   results.
    public mutating func decode<I : IteratorProtocol where I.Element == CodeUnit>(input: inout I) -> UnicodeDecodingResult

    /// Encode a `UnicodeScalar` as a series of `CodeUnit`s by
    /// calling `processCodeUnit` on each `CodeUnit`.
    public static func encode(input: UnicodeScalar, @noescape sendingOutputTo processCodeUnit: (CodeUnit) -> Swift.Void)
}

/// A codec for [UTF-8](http://www.unicode.org/glossary/#UTF_8).
public struct UTF8 : UnicodeCodec {

    /// A type that can hold [code unit](http://www.unicode.org/glossary/#code_unit)
    /// values for this encoding.
    public typealias CodeUnit = UInt8

    public init()

    /// Start or continue decoding a UTF-8 sequence.
    ///
    /// In order to decode a code unit sequence completely, this function should
    /// be called repeatedly until it returns `UnicodeDecodingResult.emptyInput`.
    /// Checking that the iterator was exhausted is not sufficient.  The decoder
    /// can have an internal buffer that is pre-filled with data from the input
    /// iterator.
    ///
    /// Because of buffering, it is impossible to find the corresponding position
    /// in the iterator for a given returned `UnicodeScalar` or an error.
    ///
    /// - Parameter next: An iterator of code units to be decoded.  Repeated
    ///   calls to this method on the same instance should always pass the same
    ///   iterator and the iterator or copies thereof should not be used for
    ///   anything else between calls.  Failing to do so will yield unspecified
    ///   results.
    public mutating func decode<I : IteratorProtocol where I.Element == CodeUnit>(next: inout I) -> UnicodeDecodingResult

    /// Encode a `UnicodeScalar` as a series of `CodeUnit`s by
    /// calling `processCodeUnit` on each `CodeUnit`.
    public static func encode(input: UnicodeScalar, @noescape sendingOutputTo processCodeUnit: (CodeUnit) -> Swift.Void)

    /// Returns `true` if `byte` is a continuation byte of the form
    /// `0b10xxxxxx`.
    public static func isContinuation(byte: CodeUnit) -> Bool
}

/// A Unicode [encoding scheme](http://www.unicode.org/glossary/#character_encoding_scheme).
///
/// Consists of an underlying [code unit](http://www.unicode.org/glossary/#code_unit)
/// and functions to translate between sequences of these code units and
/// [unicode scalar values](http://www.unicode.org/glossary/#unicode_scalar_value).
public protocol UnicodeCodec {

    /// A type that can hold [code unit](http://www.unicode.org/glossary/#code_unit)
    /// values for this encoding.
    associatedtype CodeUnit

    public init()

    /// Start or continue decoding a UTF sequence.
    ///
    /// In order to decode a code unit sequence completely, this function should
    /// be called repeatedly until it returns `UnicodeDecodingResult.emptyInput`.
    /// Checking that the iterator was exhausted is not sufficient.  The decoder
    /// can have an internal buffer that is pre-filled with data from the input
    /// iterator.
    ///
    /// Because of buffering, it is impossible to find the corresponding position
    /// in the iterator for a given returned `UnicodeScalar` or an error.
    ///
    /// - Parameter next: An iterator of code units to be decoded.  Repeated
    ///   calls to this method on the same instance should always pass the same
    ///   iterator and the iterator or copies thereof should not be used for
    ///   anything else between calls.  Failing to do so will yield unspecified
    ///   results.
    public mutating func decode<I : IteratorProtocol where I.Element == CodeUnit>(next: inout I) -> UnicodeDecodingResult

    /// Encode a `UnicodeScalar` as a series of `CodeUnit`s by
    /// calling `processCodeUnit` on each `CodeUnit`.
    public static func encode(input: UnicodeScalar, @noescape sendingOutputTo processCodeUnit: (Self.CodeUnit) -> Swift.Void)
}

/// The result of one Unicode decoding step.
///
/// A unicode scalar value, an indication that no more unicode scalars
/// are available, or an indication of a decoding error.
public enum UnicodeDecodingResult : Equatable {

    case scalarValue(UnicodeScalar)

    case emptyInput

    case error
}

/// A [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value).
public struct UnicodeScalar : UnicodeScalarLiteralConvertible {

    /// A numeric representation of `self`.
    public var value: UInt32 { get }

    public init(_builtinUnicodeScalarLiteral value: Builtin.Int32)

    /// Create an instance initialized to `value`.
    public init(unicodeScalarLiteral value: UnicodeScalar)

    /// Create an instance with numeric value `v`.
    ///
    /// - Precondition: `v` is a valid Unicode scalar value.
    public init(_ v: UInt32)

    /// Create an instance with numeric value `v`.
    ///
    /// - Precondition: `v` is a valid Unicode scalar value.
    public init(_ v: UInt16)

    /// Create an instance with numeric value `v`.
    public init(_ v: UInt8)

    /// Create a duplicate of `v`.
    public init(_ v: UnicodeScalar)

    /// Returns a String representation of `self` .
    ///
    /// - parameter forceASCII: If `true`, forces most values into a numeric
    ///   representation.
    public func escaped(asASCII forceASCII: Bool) -> String

    /// Returns `true` if this is an ASCII character (code point 0 to 127
    /// inclusive).
    public var isASCII: Bool { get }
}

extension UnicodeScalar : CustomReflectable {

    /// Returns a mirror that reflects `self`.
    public var customMirror: Mirror { get }
}

extension UnicodeScalar : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension UnicodeScalar : Streamable {

    /// Write a textual representation of `self` into `target`.
    public func write<Target : OutputStream>(to target: inout Target)
}

extension UnicodeScalar : CustomStringConvertible, CustomDebugStringConvertible {

    /// A textual representation of `self`.
    public var description: String { get }

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension UnicodeScalar : Hashable {

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }
}

extension UnicodeScalar {

    /// Construct with value `v`.
    ///
    /// - Precondition: `v` is a valid unicode scalar value.
    public init(_ v: Int)
}

extension UnicodeScalar : Comparable, Equatable {
}

/// Conforming types can be initialized with string literals
/// containing a single [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value).
public protocol UnicodeScalarLiteralConvertible {

    associatedtype UnicodeScalarLiteralType

    /// Create an instance initialized to `value`.
    public init(unicodeScalarLiteral value: Self.UnicodeScalarLiteralType)
}

/// The default type for an otherwise-unconstrained unicode scalar literal.
public typealias UnicodeScalarType = String

/// A type for propagating an unmanaged object reference.
///
/// When you use this type, you become partially responsible for
/// keeping the object alive.
public struct Unmanaged<Instance : AnyObject> {

    /// Unsafely turn an opaque C pointer into an unmanaged
    /// class reference.
    ///
    /// This operation does not change reference counts.
    ///
    ///     let str: CFString = Unmanaged.fromOpaque(ptr).takeUnretainedValue()
    public static func fromOpaque(value: OpaquePointer) -> Unmanaged<Instance>

    /// Create an unmanaged reference with an unbalanced retain.
    /// The object will leak if nothing eventually balances the retain.
    ///
    /// This is useful when passing an object to an API which Swift
    /// does not know the ownership rules for, but you know that the
    /// API expects you to pass the object at +1.
    public static func passRetained(value: Instance) -> Unmanaged<Instance>

    /// Create an unmanaged reference without performing an unbalanced
    /// retain.
    ///
    /// This is useful when passing a reference to an API which Swift
    /// does not know the ownership rules for, but you know that the
    /// API expects you to pass the object at +0.
    ///
    ///     CFArraySetValueAtIndex(.passUnretained(array), i,
    ///                            .passUnretained(object))
    public static func passUnretained(value: Instance) -> Unmanaged<Instance>

    /// Get the value of this unmanaged reference as a managed
    /// reference without consuming an unbalanced retain of it.
    ///
    /// This is useful when a function returns an unmanaged reference
    /// and you know that you're not responsible for releasing the result.
    public func takeUnretainedValue() -> Instance

    /// Get the value of this unmanaged reference as a managed
    /// reference and consume an unbalanced retain of it.
    ///
    /// This is useful when a function returns an unmanaged reference
    /// and you know that you're responsible for releasing the result.
    public func takeRetainedValue() -> Instance

    /// Perform an unbalanced retain of the object.
    public func retain() -> Unmanaged<Instance>

    /// Perform an unbalanced release of the object.
    public func release()

    /// Perform an unbalanced autorelease of the object.
    public func autorelease() -> Unmanaged<Instance>
}

/// A non-owning pointer to buffer of  `Element`s stored
/// contiguously in memory, presenting a `Collection` interface to the
/// underlying elements.
///
/// The pointer should be aligned to `alignof(Element.self)`.
public struct UnsafeBufferPointer<Element> : Collection {

    /// Always zero, which is the index of the first element in a
    /// non-empty buffer.
    public var startIndex: Int { get }

    /// The "past the end" position; always identical to `count`.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    public var endIndex: Int { get }

    /// Access the `i`th element in the buffer.
    public subscript(i: Int) -> Element { get }

    /// Construct an UnsafePointer over the `count` contiguous
    /// `Element` instances beginning at `start`.
    public init(start: UnsafePointer<Element>, count: Int)

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> UnsafeBufferPointerIterator<Element>

    /// A pointer to the first element of the buffer.
    public var baseAddress: UnsafePointer<Element> { get }

    /// The number of elements in the buffer.
    public var count: Int { get }
}

extension UnsafeBufferPointer : CustomDebugStringConvertible {

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

/// An iterator for the elements in the buffer referenced by
/// `UnsafeBufferPointer` or `UnsafeMutableBufferPointer`.
public struct UnsafeBufferPointerIterator<Element> : IteratorProtocol, Sequence {

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    public mutating func next() -> Element?
}

/// A non-owning pointer to buffer of mutable `Element`s stored
/// contiguously in memory, presenting a `Collection` interface to the
/// underlying elements.
///
/// The pointer should be aligned to `alignof(Element.self)`.
public struct UnsafeMutableBufferPointer<Element> : MutableCollection {

    /// Always zero, which is the index of the first element in a
    /// non-empty buffer.
    public var startIndex: Int { get }

    /// The "past the end" position; always identical to `count`.
    ///
    /// `endIndex` is not a valid argument to `subscript`, and is always
    /// reachable from `startIndex` by zero or more applications of
    /// `successor()`.
    public var endIndex: Int { get }

    /// Access the `i`th element in the buffer.
    public subscript(i: Int) -> Element { get nonmutating set }

    /// Construct an UnsafeMutablePointer over the `count` contiguous
    /// `Element` instances beginning at `start`.
    public init(start: UnsafeMutablePointer<Element>, count: Int)

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> UnsafeBufferPointerIterator<Element>

    /// A pointer to the first element of the buffer.
    public var baseAddress: UnsafeMutablePointer<Element> { get }

    /// The number of elements in the buffer.
    public var count: Int { get }
}

extension UnsafeMutableBufferPointer : CustomDebugStringConvertible {

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

/// A raw pointer for accessing data of type `Pointee`.  This type
/// provides no automated memory management, and therefore must
/// be handled with great care to ensure safety.
///
/// Instances must be aligned to `alignof(Pointee.self)`, i.e.
/// `(UnsafePointer<Int8>(self) - nil) % alignof(Pointee.self) == 0`
///
/// The memory referenced by an instance can be in one of the following states:
///
/// - Memory is not allocated (for example, pointer is null, or memory has
///   been deallocated previously).
///
/// - Memory is allocated, but value has not been initialized.
///
/// - Memory is allocated and value is initialized.
public struct UnsafeMutablePointer<Pointee> : RandomAccessIndex, Hashable, NilLiteralConvertible {

    /// A type that can represent the number of steps between pairs of
    /// `Self` values where one value is reachable from the other.
    ///
    /// Reachability is defined by the ability to produce one value from
    /// the other via zero or more applications of `successor`.
    public typealias Distance = Int

    /// Convert from an opaque pointer to a typed pointer.
    public init(_ other: OpaquePointer)

    /// Construct an `UnsafeMutablePointer` with a given pattern of bits.
    public init(bitPattern: Int)

    /// Construct an `UnsafeMutablePointer` with a given pattern of bits.
    public init(bitPattern: UInt)

    /// Convert from any `UnsafeMutablePointer`, possibly with a
    /// different `Pointee`.
    ///
    /// - Warning: the behavior of accesses to pointee as a type
    ///   different from that to which it was initialized is undefined.
    public init<U>(_ from: UnsafeMutablePointer<U>)

    /// Convert from any `UnsafePointer`, possibly with a
    /// different `Pointee`.
    ///
    /// - Warning: the behavior of accesses to pointee as a type
    ///   different from that to which it was initialized is undefined.
    public init<U>(_ from: UnsafePointer<U>)

    /// Create an instance initialized with `nil`.
    public init(nilLiteral: ())

    /// Allocate and point at uninitialized aligned memory for `count`
    /// instances of `Pointee`.
    ///
    /// - Postcondition: The pointee is allocated, but not initialized.
    public init(allocatingCapacity count: Int)

    /// Deallocate uninitialized memory allocated for `count` instances
    /// of `Pointee`.
    ///
    /// - Precondition: The memory is not initialized.
    ///
    /// - Postcondition: The memory has been deallocated.
    public func deallocateCapacity(num: Int)

    /// Access the `Pointee` instance referenced by `self`.
    ///
    /// - Precondition: the pointee has been initialized with an instance of
    ///   type `Pointee`.
    public var pointee: Pointee { get nonmutating set }

    public func initialize(with newValue: Pointee, count: Int = default)

    /// Retrieve the `pointee`, returning the referenced memory to an
    /// uninitialized state.
    ///
    /// Equivalent to `{ defer { deinitialize() }; return pointee }()`, but
    /// more efficient.
    ///
    /// - Precondition: The pointee is initialized.
    ///
    /// - Postcondition: The memory is uninitialized.
    public func move() -> Pointee

    /// Replace `count` initialized `Pointee`s starting at `self` with
    /// the `count` `Pointee`s at `source`, proceeding forward from
    /// `self` to `self + count - 1`.
    ///
    /// - Precondition: `count >= 0`
    ///
    /// - Precondition: `self` either precedes `source` or follows
    ///   `source + count - 1`.
    ///
    /// - Precondition: The `Pointee`s at `self..<self + count` and
    ///   `source..<source + count` are initialized.
    public func assignFrom(source: UnsafeMutablePointer<Pointee>, count: Int)

    /// Replace `count` initialized `Pointee`s starting at `self` with
    /// the `count` `Pointee`s at `source`, proceeding backward from
    /// `self + count - 1` to `self`.
    ///
    /// Use `assignBackwardFrom` when copying elements into later memory
    /// that may overlap with the source range.
    ///
    /// - Precondition: `count >= 0`
    ///
    /// - Precondition: `source` either precedes `self` or follows
    ///   `self + count - 1`.
    ///
    /// - Precondition: The `Pointee`s at `self..<self + count` and
    ///   `source..<source + count` are initialized.
    public func assignBackwardFrom(source: UnsafeMutablePointer<Pointee>, count: Int)

    /// Initialize memory starting at `self` with `count` `Pointee`s
    /// beginning at `source`, proceeding forward from `self` to `self +
    /// count - 1`, and returning the source memory to an uninitialized
    /// state.
    ///
    /// - Precondition: `count >= 0`
    ///
    /// - Precondition: `self` either precedes `source` or follows `source +
    ///   count - 1`.
    ///
    /// - Precondition: The memory at `self..<self + count` is uninitialized
    ///   and the `Pointees` at `source..<source + count` are
    ///   initialized.
    ///
    /// - Postcondition: The `Pointee`s at `self..<self + count` are
    ///   initialized and the memory at `source..<source + count` is
    ///   uninitialized.
    public func moveInitializeFrom(source: UnsafeMutablePointer<Pointee>, count: Int)

    /// Initialize memory starting at `self` with `count` `Pointee`s
    /// beginning at `source`, proceeding backward from `self + count - 1`
    /// to `self`, and returning the source memory to an uninitialized
    /// state.
    ///
    /// - Precondition: `count >= 0`
    ///
    /// - Precondition: `source` either precedes `self` or follows
    ///   `self + count - 1`.
    ///
    /// - Precondition: The memory at `self..<self + count` is uninitialized
    ///   and the `Pointees` at `source..<source + count` are
    ///   initialized.
    ///
    /// - Postcondition: The `Pointee`s at `self..<self + count` are
    ///   initialized and the memory at `source..<source + count` is
    ///   uninitialized.
    public func moveInitializeBackwardFrom(source: UnsafeMutablePointer<Pointee>, count: Int)

    /// Initialize memory starting at `self` with `count` `Pointee`s
    /// beginning at `source`, proceeding forward from `self` to `self +
    /// count - 1`.
    ///
    /// - Precondition: `count >= 0`
    ///
    /// - Precondition: `self` either precedes `source` or follows `source +
    ///   count - 1`.
    ///
    /// - Precondition: The memory at `self..<self + count` is uninitialized
    ///   and the `Pointees` at `source..<source + count` are
    ///   initialized.
    ///
    /// - Postcondition: The `Pointee`s at `self..<self + count` and
    ///   `source..<source + count` are initialized.
    public func initializeFrom(source: UnsafeMutablePointer<Pointee>, count: Int)

    /// Initialize memory starting at `self` with the elements of `source`.
    ///
    /// - Precondition: The memory at `self..<self + count` is
    ///   uninitialized.
    ///
    /// - Postcondition: The `Pointee`s at `self..<self + count` are
    ///   initialized.
    public func initializeFrom<C : Collection where C.Iterator.Element == Pointee>(source: C)

    /// Replace `count` initialized `Pointee`s starting at `self` with
    /// the `count` `Pointee`s starting at `source`, returning the
    /// source memory to an uninitialized state.
    ///
    /// - Precondition: `count >= 0`
    ///
    /// - Precondition: The source and destination ranges do not overlap
    ///
    /// - Precondition: The `Pointee`s at `self..<self + count` and
    ///   `source..<source + count` are initialized.
    ///
    /// - Postcondition: The `Pointee`s at `self..<self + count` are
    ///   initialized and the `Pointees` at `source..<source + count`
    ///   are uninitialized.
    public func moveAssignFrom(source: UnsafeMutablePointer<Pointee>, count: Int)

    /// De-initialize the `count` `Pointee`s starting at `self`, returning
    /// their memory to an uninitialized state.
    ///
    /// - Precondition: The `Pointee`s at `self..<self + count` are
    ///   initialized.
    ///
    /// - Postcondition: The memory is uninitialized.
    public func deinitialize(count count: Int = default)

    /// Access the pointee at `self + i`.
    ///
    /// - Precondition: the pointee at `self + i` is initialized.
    public subscript(i: Int) -> Pointee { get nonmutating set }

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }

    /// Returns the next consecutive position.
    public func successor() -> UnsafeMutablePointer<Pointee>

    /// Returns the previous consecutive position.
    public func predecessor() -> UnsafeMutablePointer<Pointee>

    /// Return `end - self`.
    public func distance(to x: UnsafeMutablePointer<Pointee>) -> Int

    /// Return `self + n`.
    public func advanced(by n: Int) -> UnsafeMutablePointer<Pointee>
}

extension UnsafeMutablePointer : CustomDebugStringConvertible {

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension UnsafeMutablePointer : CustomReflectable {

    /// The `Mirror` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `Mirror` should be
    ///   unaffected by subsequent mutations of `self`.
    public var customMirror: Mirror { get }
}

extension UnsafeMutablePointer : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension UnsafeMutablePointer {
}

extension UnsafeMutablePointer : CVarArg {
}

/// A raw pointer for accessing data of type `Pointee`.  This type
/// provides no automated memory management, and therefore must
/// be handled with great care to ensure safety.
///
/// Instances must be aligned to `alignof(Pointee.self)`, i.e.
/// `(UnsafePointer<Int8>(self) - nil) % alignof(Pointee.self) == 0`
///
/// The memory referenced by an instance can be in one of the following states:
///
/// - Memory is not allocated (for example, pointer is null, or memory has
///   been deallocated previously).
///
/// - Memory is allocated, but value has not been initialized.
///
/// - Memory is allocated and value is initialized.
public struct UnsafePointer<Pointee> : RandomAccessIndex, Hashable, NilLiteralConvertible {

    /// A type that can represent the number of steps between pairs of
    /// `Self` values where one value is reachable from the other.
    ///
    /// Reachability is defined by the ability to produce one value from
    /// the other via zero or more applications of `successor`.
    public typealias Distance = Int

    /// Convert from an opaque pointer to a typed pointer.
    public init(_ other: OpaquePointer)

    /// Construct an `UnsafePointer` with a given pattern of bits.
    public init(bitPattern: Int)

    /// Construct an `UnsafePointer` with a given pattern of bits.
    public init(bitPattern: UInt)

    /// Convert from any `UnsafeMutablePointer`, possibly with a
    /// different `Pointee`.
    ///
    /// - Warning: the behavior of accesses to pointee as a type
    ///   different from that to which it was initialized is undefined.
    public init<U>(_ from: UnsafeMutablePointer<U>)

    /// Convert from any `UnsafePointer`, possibly with a
    /// different `Pointee`.
    ///
    /// - Warning: the behavior of accesses to pointee as a type
    ///   different from that to which it was initialized is undefined.
    public init<U>(_ from: UnsafePointer<U>)

    /// Create an instance initialized with `nil`.
    public init(nilLiteral: ())

    /// Access the `Pointee` instance referenced by `self`.
    ///
    /// - Precondition: the pointee has been initialized with an instance of
    ///   type `Pointee`.
    public var pointee: Pointee { get }

    /// Access the pointee at `self + i`.
    ///
    /// - Precondition: the pointee at `self + i` is initialized.
    public subscript(i: Int) -> Pointee { get }

    /// The hash value.
    ///
    /// **Axiom:** `x == y` implies `x.hashValue == y.hashValue`.
    ///
    /// - Note: The hash value is not guaranteed to be stable across
    ///   different invocations of the same program.  Do not persist the
    ///   hash value across program runs.
    public var hashValue: Int { get }

    /// Returns the next consecutive position.
    public func successor() -> UnsafePointer<Pointee>

    /// Returns the previous consecutive position.
    public func predecessor() -> UnsafePointer<Pointee>

    /// Return `end - self`.
    public func distance(to x: UnsafePointer<Pointee>) -> Int

    /// Return `self + n`.
    public func advanced(by n: Int) -> UnsafePointer<Pointee>
}

extension UnsafePointer : CustomDebugStringConvertible {

    /// A textual representation of `self`, suitable for debugging.
    public var debugDescription: String { get }
}

extension UnsafePointer : CustomReflectable {

    /// The `Mirror` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `Mirror` should be
    ///   unaffected by subsequent mutations of `self`.
    public var customMirror: Mirror { get }
}

extension UnsafePointer : CustomPlaygroundQuickLookable {

    /// The `PlaygroundQuickLook` for `self`.
    ///
    /// - Note: If `Self` has value semantics, the `PlaygroundQuickLook`
    ///   should be unaffected by subsequent mutations of `self`.
    public var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension UnsafePointer {
}

extension UnsafePointer : CVarArg {
}

/// A set of common requirements for Swift's unsigned integer types.
public protocol UnsignedInteger : _DisallowMixedSignArithmetic, Integer {

    /// Represent this number using Swift's widest native unsigned
    /// integer type.
    public func toUIntMax() -> UIntMax

    /// Convert from Swift's widest unsigned integer type, trapping on
    /// overflow.
    public init(_: UIntMax)
}

/// The empty tuple type.
///
/// This is the default return type of functions for which no explicit
/// return type is specified.
public typealias Void = ()

/// An iterator for `Zip2Sequence`.
public struct Zip2Iterator<Iterator1 : IteratorProtocol, Iterator2 : IteratorProtocol> : IteratorProtocol {

    /// The type of element returned by `next()`.
    public typealias Element = (Iterator1.Element, Iterator2.Element)

    /// Advance to the next element and return it, or `nil` if no next
    /// element exists.
    ///
    /// - Precondition: `next()` has not been applied to a copy of `self`
    ///   since the copy was made, and no preceding call to `self.next()`
    ///   has returned `nil`.
    public mutating func next() -> (Iterator1.Element, Iterator2.Element)?
}

/// A sequence of pairs built out of two underlying sequences, where
/// the elements of the `i`th pair are the `i`th elements of each
/// underlying sequence.
public struct Zip2Sequence<Sequence1 : Sequence, Sequence2 : Sequence> : Sequence {

    public typealias Stream1 = Sequence1.Iterator

    public typealias Stream2 = Sequence2.Iterator

    /// A type whose instances can produce the elements of this
    /// sequence, in order.
    public typealias Iterator = Zip2Iterator<Sequence1.Iterator, Sequence2.Iterator>

    /// Construct an instance that makes pairs of elements from `sequence1` and
    /// `sequence2`.
    public init(_sequence1 sequence1: Sequence1, _sequence2 sequence2: Sequence2)

    /// Returns an iterator over the elements of this sequence.
    ///
    /// - Complexity: O(1).
    public func makeIterator() -> Zip2Iterator<Sequence1.Iterator, Sequence2.Iterator>
}

public func ^(lhs: Int64, rhs: Int64) -> Int64

public func ^(lhs: Int, rhs: Int) -> Int

public func ^(lhs: UInt, rhs: UInt) -> UInt

public func ^(lhs: UInt8, rhs: UInt8) -> UInt8

public func ^(lhs: Int8, rhs: Int8) -> Int8

public func ^(lhs: UInt64, rhs: UInt64) -> UInt64

public func ^(lhs: UInt16, rhs: UInt16) -> UInt16

public func ^(lhs: Int32, rhs: Int32) -> Int32

public func ^(lhs: UInt32, rhs: UInt32) -> UInt32

public func ^(lhs: Int16, rhs: Int16) -> Int16

public func ^=(lhs: inout Int, rhs: Int)

public func ^=(lhs: inout UInt16, rhs: UInt16)

public func ^=(lhs: inout UInt, rhs: UInt)

public func ^=(lhs: inout Int8, rhs: Int8)

public func ^=(lhs: inout Int16, rhs: Int16)

public func ^=(lhs: inout UInt8, rhs: UInt8)

public func ^=(lhs: inout UInt32, rhs: UInt32)

public func ^=<T : BitwiseOperations>(lhs: inout T, rhs: T)

public func ^=(lhs: inout Int32, rhs: Int32)

public func ^=(lhs: inout Int64, rhs: Int64)

public func ^=(lhs: inout UInt64, rhs: UInt64)

/// This protocol is an implementation detail of `UnsignedInteger`;
/// do not use it directly.
public protocol _DisallowMixedSignArithmetic : _Integer {
}

/// This protocol is an implementation detail of `ForwardIndex`; do
/// not use it directly.
///
/// Its requirements are inherited by `ForwardIndex` and thus must
/// be satisfied by types conforming to that protocol.
public protocol _Incrementable : Equatable {

    /// Returns the next consecutive value in a discrete sequence of
    /// `Self` values.
    ///
    /// - Precondition: `self` has a well-defined successor.
    public func successor() -> Self
}

/// This protocol is an implementation detail of `Integer`; do
/// not use it directly.
public protocol _Integer : IntegerLiteralConvertible, CustomStringConvertible, Hashable, IntegerArithmetic, BitwiseOperations, _Incrementable {
}

/// This protocol is an implementation detail of `IntegerArithmetic`; do
/// not use it directly.
///
/// Its requirements are inherited by `IntegerArithmetic` and thus must
/// be satisfied by types conforming to that protocol.
public protocol _IntegerArithmetic {

    /// Adds `lhs` and `rhs`, returning the result and a `Bool` that is
    /// `true` iff the operation caused an arithmetic overflow.
    public static func addWithOverflow(lhs: Self, _ rhs: Self) -> (Self, overflow: Bool)

    /// Subtracts `lhs` and `rhs`, returning the result and a `Bool` that is
    /// `true` iff the operation caused an arithmetic overflow.
    public static func subtractWithOverflow(lhs: Self, _ rhs: Self) -> (Self, overflow: Bool)

    /// Multiplies `lhs` and `rhs`, returning the result and a `Bool` that is
    /// `true` iff the operation caused an arithmetic overflow.
    public static func multiplyWithOverflow(lhs: Self, _ rhs: Self) -> (Self, overflow: Bool)

    /// Divides `lhs` and `rhs`, returning the result and a `Bool` that is
    /// `true` iff the operation caused an arithmetic overflow.
    public static func divideWithOverflow(lhs: Self, _ rhs: Self) -> (Self, overflow: Bool)

    /// Divides `lhs` and `rhs`, returning the remainder and a `Bool` that is
    /// `true` iff the operation caused an arithmetic overflow.
    public static func remainderWithOverflow(lhs: Self, _ rhs: Self) -> (Self, overflow: Bool)
}

/// Used to force conformers of RandomAccessIndex to implement
/// `advanced(by:)` methods and `distance(to:)`.
public protocol _RandomAccessAmbiguity {

    associatedtype Distance : _SignedInteger = Int
}

extension _RandomAccessAmbiguity {

    public func advanced(by n: Self.Distance) -> Self
}

/// A type that is just a wrapper over some base Sequence
public protocol _SequenceWrapper {

    associatedtype Base : Sequence

    associatedtype Iterator : IteratorProtocol = Self.Base.Iterator
}

extension _SequenceWrapper where Self : Sequence, Self.Iterator == Self.Base.Iterator {

    public var underestimatedCount: Int { get }
}

/// This protocol is an implementation detail of `SignedInteger`;
/// do not use it directly.
public protocol _SignedInteger : _Integer, SignedNumber {

    /// Represent this number using Swift's widest native signed integer
    /// type.
    public func toIntMax() -> IntMax

    /// Convert from Swift's widest signed integer type, trapping on
    /// overflow.
    public init(_: IntMax)
}

/// Returns the absolute value of `x`.
///
/// Concrete instances of `SignedNumber` can specialize this
/// function by conforming to `AbsoluteValuable`.
public func abs<T : SignedNumber>(x: T) -> T

/// Returns the minimum memory alignment of `T`.
public func alignof<T>(_: T.Type) -> Int

/// Returns the minimum memory alignment of `T`.
public func alignofValue<T>(_: T) -> Int

/// Traditional C-style assert with an optional message.
///
/// Use this function for internal sanity checks that are active
/// during testing but do not impact performance of shipping code.
/// To check for invalid usage in Release builds; see `precondition`.
///
/// * In playgrounds and -Onone builds (the default for Xcode's Debug
///   configuration): if `condition` evaluates to false, stop program
///   execution in a debuggable state after printing `message`.
///
/// * In -O builds (the default for Xcode's Release configuration),
///   `condition` is not evaluated, and there are no effects.
///
/// * In -Ounchecked builds, `condition` is not evaluated, but the
///   optimizer may assume that it *would* evaluate to `true`. Failure
///   to satisfy that assumption in -Ounchecked builds is a serious
///   programming error.
public func assert(@autoclosure condition: () -> Bool, @autoclosure _ message: () -> String = default, file: StaticString = #file, line: UInt = #line)

/// Indicate that an internal sanity check failed.
///
/// Use this function to stop the program, without impacting the
/// performance of shipping code, when control flow is not expected to
/// reach the call (e.g. in the `default` case of a `switch` where you
/// have knowledge that one of the other cases must be satisfied). To
/// protect code from invalid usage in Release builds; see
/// `preconditionFailure`.
///
/// * In playgrounds and -Onone builds (the default for Xcode's Debug
///   configuration) stop program execution in a debuggable state
///   after printing `message`.
///
/// * In -O builds, has no effect.
///
/// * In -Ounchecked builds, the optimizer may assume that this
///   function will never be called. Failure to satisfy that assumption
///   is a serious programming error.
public func assertionFailure(@autoclosure message: () -> String = default, file: StaticString = #file, line: UInt = #line)

/// Writes the textual representations of `items` most suitable for
/// debugging, separated by `separator` and terminated by
/// `terminator`, into `output`.
///
/// The textual representations are obtained for each `item` via
/// the expression `String(reflecting: item)`.
///
/// - Note: To print without a trailing newline, pass `terminator: ""`
///
/// - SeeAlso: `print`, `Streamable`, `CustomStringConvertible`,
///   `CustomDebugStringConvertible`
public func debugPrint<Target : OutputStream>(items: Swift.Any..., separator: String = default, terminator: String = default, to output: inout Target)

/// Writes the textual representations of `items` most suitable for
/// debugging, separated by `separator` and terminated by
/// `terminator`, into the standard output.
///
/// The textual representations are obtained for each `item` via
/// the expression `String(reflecting: item)`.
///
/// - Note: To print without a trailing newline, pass `terminator: ""`
///
/// - SeeAlso: `print`, `Streamable`, `CustomStringConvertible`,
///   `CustomDebugStringConvertible`
public func debugPrint(items: Swift.Any..., separator: String = default, terminator: String = default)

/// Dump an object's contents using its mirror to standard output.
public func dump<T>(value: T, name: String? = default, indent: Int = default, maxDepth: Int = default, maxItems: Int = default) -> T

/// Dump an object's contents using its mirror to the specified output stream.
public func dump<T, TargetStream : OutputStream>(value: T, to target: inout TargetStream, name: String? = default, indent: Int = default, maxDepth: Int = default, maxItems: Int = default) -> T

/// Unconditionally print a `message` and stop execution.
@noreturn public func fatalError(@autoclosure message: () -> String = default, file: StaticString = #file, line: UInt = #line)

/// Returns a `CVaListPointer` built from `args` that's backed by
/// autoreleased storage.
///
/// - Warning: This function is best avoided in favor of
///   `withVaList`, but occasionally (i.e. in a `class` initializer) you
///   may find that the language rules don't allow you to use
/// `withVaList` as intended.
public func getVaList(args: [CVarArg]) -> CVaListPointer

/// Returns `true` iff `object` is a non-`@objc` class instance with a single
/// strong reference.
///
/// * Does *not* modify `object`; the use of `inout` is an
///   implementation artifact.
/// * Weak references do not affect the result of this function.
///
/// Useful for implementing the copy-on-write optimization for the
/// deep storage of value types:
///
///     mutating func modifyMe(arg: X) {
///       if isUniquelyReferenced(&myStorage) {
///         myStorage.modifyInPlace(arg)
///       }
///       else {
///         myStorage = myStorage.createModified(arg)
///       }
///     }
///
/// This function is safe to use for `mutating` functions in
/// multithreaded code because a false positive would imply that there
/// is already a user-level data race on the value being mutated.
public func isUniquelyReferenced<T : NonObjectiveCBase>(object: inout T) -> Bool

/// Returns `true` iff `object` is a non-`@objc` class instance with
/// a single strong reference.
///
/// * Does *not* modify `object`; the use of `inout` is an
///   implementation artifact.
/// * If `object` is an Objective-C class instance, returns `false`.
/// * Weak references do not affect the result of this function.
///
/// Useful for implementing the copy-on-write optimization for the
/// deep storage of value types:
///
///     mutating func modifyMe(arg: X) {
///       if isUniquelyReferencedNonObjC(&myStorage) {
///         myStorage.modifyInPlace(arg)
///       }
///       else {
///         myStorage = self.createModified(myStorage, arg)
///       }
///     }
///
/// This function is safe to use for `mutating` functions in
/// multithreaded code because a false positive would imply that there
/// is already a user-level data race on the value being mutated.
public func isUniquelyReferencedNonObjC<T : AnyObject>(object: inout T) -> Bool

/// Returns `true` iff `object` is a non-`@objc` class instance with
/// a single strong reference.
///
/// * Does *not* modify `object`; the use of `inout` is an
///   implementation artifact.
/// * If `object` is an Objective-C class instance, returns `false`.
/// * Weak references do not affect the result of this function.
///
/// Useful for implementing the copy-on-write optimization for the
/// deep storage of value types:
///
///     mutating func modifyMe(arg: X) {
///       if isUniquelyReferencedNonObjC(&myStorage) {
///         myStorage.modifyInPlace(arg)
///       }
///       else {
///         myStorage = self.createModified(myStorage, arg)
///       }
///     }
///
/// This function is safe to use for `mutating` functions in
/// multithreaded code because a false positive would imply that there
/// is already a user-level data race on the value being mutated.
public func isUniquelyReferencedNonObjC<T : AnyObject>(object: inout T?) -> Bool

/// Returns the greatest argument passed.
///
/// If there are multiple equal greatest arguments, returns the last one.
public func max<T : Comparable>(x: T, _ y: T, _ z: T, _ rest: T...) -> T

/// Returns the greater of `x` and `y`.
///
/// If `x == y`, returns `y`.
public func max<T : Comparable>(x: T, _ y: T) -> T

/// Returns the least argument passed.
///
/// If there are multiple equal least arguments, returns the first one.
public func min<T : Comparable>(x: T, _ y: T, _ z: T, _ rest: T...) -> T

/// Returns the lesser of `x` and `y`.
///
/// If `x == y`, returns `x`.
public func min<T : Comparable>(x: T, _ y: T) -> T

/// Convert `x` to type `U`, trapping on overflow in -Onone and -O
/// builds.
///
/// Typically used to do conversion to any contextually-deduced
/// integer type:
///
///     func f(x: Int32) {}
///     func g(x: UInt64) { f(numericCast(x)) }
public func numericCast<T : UnsignedInteger, U : _SignedInteger>(x: T) -> U

/// Convert `x` to type `U`, trapping on overflow in -Onone and -O
/// builds.
///
/// Typically used to do conversion to any contextually-deduced
/// integer type:
///
///     func f(x: UInt32) {}
///     func g(x: Int64) { f(numericCast(x)) }
public func numericCast<T : _SignedInteger, U : UnsignedInteger>(x: T) -> U

/// Convert `x` to type `U`, trapping on overflow in -Onone and -O
/// builds.
///
/// Typically used to do conversion to any contextually-deduced
/// integer type:
///
///     func f(x: UInt32) {}
///     func g(x: UInt64) { f(numericCast(x)) }
public func numericCast<T : UnsignedInteger, U : UnsignedInteger>(x: T) -> U

/// Convert `x` to type `U`, trapping on overflow in -Onone and -O
/// builds.
///
/// Typically used to do conversion to any contextually-deduced
/// integer type:
///
///     func f(x: Int32) {}
///     func g(x: Int64) { f(numericCast(x)) }
public func numericCast<T : _SignedInteger, U : _SignedInteger>(x: T) -> U

/// Check a necessary condition for making forward progress.
///
/// Use this function to detect conditions that must prevent the
/// program from proceeding even in shipping code.
///
/// * In playgrounds and -Onone builds (the default for Xcode's Debug
///   configuration): if `condition` evaluates to false, stop program
///   execution in a debuggable state after printing `message`.
///
/// * In -O builds (the default for Xcode's Release configuration):
///   if `condition` evaluates to false, stop program execution.
///
/// * In -Ounchecked builds, `condition` is not evaluated, but the
///   optimizer may assume that it *would* evaluate to `true`. Failure
///   to satisfy that assumption in -Ounchecked builds is a serious
///   programming error.
public func precondition(@autoclosure condition: () -> Bool, @autoclosure _ message: () -> String = default, file: StaticString = #file, line: UInt = #line)

/// Indicate that a precondition was violated.
///
/// Use this function to stop the program when control flow can only
/// reach the call if your API was improperly used.
///
/// * In playgrounds and -Onone builds (the default for Xcode's Debug
///   configuration), stop program execution in a debuggable state
///   after printing `message`.
///
/// * In -O builds (the default for Xcode's Release configuration),
///   stop program execution.
///
/// * In -Ounchecked builds, the optimizer may assume that this
///   function will never be called. Failure to satisfy that assumption
///   is a serious programming error.
@noreturn public func preconditionFailure(@autoclosure message: () -> String = default, file: StaticString = #file, line: UInt = #line)

/// Writes the textual representations of `items`, separated by
/// `separator` and terminated by `terminator`, into the standard
/// output.
///
/// The textual representations are obtained for each `item` via
/// the expression `String(item)`.
///
/// - Note: To print without a trailing newline, pass `terminator: ""`
///
/// - SeeAlso: `debugPrint`, `Streamable`, `CustomStringConvertible`,
///   `CustomDebugStringConvertible`
public func print(items: Swift.Any..., separator: String = default, terminator: String = default)

/// Writes the textual representations of `items`, separated by
/// `separator` and terminated by `terminator`, into `output`.
///
/// The textual representations are obtained for each `item` via
/// the expression `String(item)`.
///
/// - Note: To print without a trailing newline, pass `terminator: ""`
///
/// - SeeAlso: `debugPrint`, `Streamable`, `CustomStringConvertible`,
///   `CustomDebugStringConvertible`
public func print<Target : OutputStream>(items: Swift.Any..., separator: String = default, terminator: String = default, to output: inout Target)

/// Returns `Character`s read from standard input through the end of the
/// current line or until EOF is reached, or `nil` if EOF has already been
/// reached.
///
/// If `strippingNewline` is `true`, newline characters and character
/// combinations will be stripped from the result.  This is the default.
///
/// Standard input is interpreted as `UTF-8`.  Invalid bytes
/// will be replaced by Unicode [replacement characters](http://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character).
public func readLine(strippingNewline strippingNewline: Bool = default) -> String?

/// Return a collection containing `n` repetitions of `elementInstance`.
public func repeatElement<T>(element: T, count n: Int) -> Repeated<T>

/// Returns the contiguous memory footprint of `T`.
///
/// Does not include any dynamically-allocated or "remote" storage.
/// In particular, `sizeof(X.self)`, when `X` is a class type, is the
/// same regardless of how many stored properties `X` has.
public func sizeof<T>(_: T.Type) -> Int

/// Returns the contiguous memory footprint of  `T`.
///
/// Does not include any dynamically-allocated or "remote" storage.
/// In particular, `sizeof(a)`, when `a` is a class instance, is the
/// same regardless of how many stored properties `a` has.
public func sizeofValue<T>(_: T) -> Int

/// Returns the sequence of values (`self`, `self + stride`, `self +
/// stride + stride`, ... *last*) where *last* is the last value in
/// the progression less than or equal to `end`.
///
/// - Note: There is no guarantee that `end` is an element of the sequence.
public func stride<T : Strideable>(from start: T, through end: T, by stride: T.Stride) -> StrideThrough<T>

/// Returns the sequence of values (`self`, `self + stride`, `self +
/// stride + stride`, ... *last*) where *last* is the last value in
/// the progression that is less than `end`.
public func stride<T : Strideable>(from start: T, to end: T, by stride: T.Stride) -> StrideTo<T>

/// Returns the least possible interval between distinct instances of
/// `T` in memory.  The result is always positive.
public func strideof<T>(_: T.Type) -> Int

/// Returns the least possible interval between distinct instances of
/// `T` in memory.  The result is always positive.
public func strideofValue<T>(_: T) -> Int

/// Exchange the values of `a` and `b`.
///
/// - Precondition: `a` and `b` do not alias each other.
public func swap<T>(a: inout T, _ b: inout T)

/// Translate `input`, in the given `InputEncoding`, into `processCodeUnit`, in
/// the given `OutputEncoding`.
///
/// - Parameter stopOnError: Causes encoding to stop when an encoding
///   error is detected in `input`, if `true`.  Otherwise, U+FFFD
///   replacement characters are inserted for each detected error.
public func transcode<Input : IteratorProtocol, InputEncoding : UnicodeCodec, OutputEncoding : UnicodeCodec where InputEncoding.CodeUnit == Input.Element>(input: Input, from inputEncoding: InputEncoding.Type, to outputEncoding: OutputEncoding.Type, stoppingOnError stopOnError: Bool, @noescape sendingOutputTo processCodeUnit: (OutputEncoding.CodeUnit) -> Swift.Void) -> Bool

/// Returns an `UnsafePointer` to the storage used for `object`.  There's
/// not much you can do with this other than use it to identify the
/// object.
public func unsafeAddress(of object: AnyObject) -> UnsafePointer<Swift.Void>

/// Returns the bits of `x`, interpreted as having type `U`.
///
/// - Warning: Breaks the guarantees of Swift's type system; use
///   with extreme care.  There's almost always a better way to do
///   anything.
///
public func unsafeBitCast<T, U>(x: T, to: U.Type) -> U

/// - returns: `x as T`.
///
/// - Precondition: `x is T`.  In particular, in -O builds, no test is
///   performed to ensure that `x` actually has dynamic type `T`.
///
/// - Warning: Trades safety for performance.  Use `unsafeDowncast`
///   only when `x as T` has proven to be a performance problem and you
///   are confident that, always, `x is T`.  It is better than an
///   `unsafeBitCast` because it's more restrictive, and because
///   checking is still performed in debug builds.
public func unsafeDowncast<T : AnyObject>(x: AnyObject, to: T.Type) -> T

/// Evaluate `f()` and return its result, ensuring that `x` is not
/// destroyed before f returns.
public func withExtendedLifetime<T, Result>(x: T, @noescape _ f: () throws -> Result) rethrows -> Result

/// Evaluate `f(x)` and return its result, ensuring that `x` is not
/// destroyed before f returns.
public func withExtendedLifetime<T, Result>(x: T, @noescape _ f: (T) throws -> Result) rethrows -> Result

/// Invokes `body` with an `UnsafeMutablePointer` to `arg` and returns the
/// result. Useful for calling Objective-C APIs that take "in/out"
/// parameters (and default-constructible "out" parameters) by pointer.
public func withUnsafeMutablePointer<T, Result>(arg: inout T, @noescape _ body: (UnsafeMutablePointer<T>) throws -> Result) rethrows -> Result

/// Like `withUnsafeMutablePointer`, but passes pointers to `arg0`, `arg1`,
/// and `arg2`.
public func withUnsafeMutablePointers<A0, A1, A2, Result>(arg0: inout A0, _ arg1: inout A1, _ arg2: inout A2, @noescape _ body: (UnsafeMutablePointer<A0>, UnsafeMutablePointer<A1>, UnsafeMutablePointer<A2>) throws -> Result) rethrows -> Result

/// Like `withUnsafeMutablePointer`, but passes pointers to `arg0` and `arg1`.
public func withUnsafeMutablePointers<A0, A1, Result>(arg0: inout A0, _ arg1: inout A1, @noescape _ body: (UnsafeMutablePointer<A0>, UnsafeMutablePointer<A1>) throws -> Result) rethrows -> Result

/// Invokes `body` with an `UnsafePointer` to `arg` and returns the
/// result. Useful for calling Objective-C APIs that take "in/out"
/// parameters (and default-constructible "out" parameters) by pointer.
public func withUnsafePointer<T, Result>(arg: inout T, @noescape _ body: (UnsafePointer<T>) throws -> Result) rethrows -> Result

/// Like `withUnsafePointer`, but passes pointers to `arg0` and `arg1`.
public func withUnsafePointers<A0, A1, Result>(arg0: inout A0, _ arg1: inout A1, @noescape _ body: (UnsafePointer<A0>, UnsafePointer<A1>) throws -> Result) rethrows -> Result

/// Like `withUnsafePointer`, but passes pointers to `arg0`, `arg1`,
/// and `arg2`.
public func withUnsafePointers<A0, A1, A2, Result>(arg0: inout A0, _ arg1: inout A1, _ arg2: inout A2, @noescape _ body: (UnsafePointer<A0>, UnsafePointer<A1>, UnsafePointer<A2>) throws -> Result) rethrows -> Result

/// Invoke `body` with a C `va_list` argument derived from `args`.
public func withVaList<R>(args: [CVarArg], @noescape invoke body: CVaListPointer -> R) -> R

/// A sequence of pairs built out of two underlying sequences, where
/// the elements of the `i`th pair are the `i`th elements of each
/// underlying sequence.
public func zip<Sequence1 : Sequence, Sequence2 : Sequence>(sequence1: Sequence1, _ sequence2: Sequence2) -> Zip2Sequence<Sequence1, Sequence2>

public func |(lhs: Int16, rhs: Int16) -> Int16

public func |(lhs: UInt16, rhs: UInt16) -> UInt16

public func |(lhs: UInt8, rhs: UInt8) -> UInt8

public func |(lhs: UInt32, rhs: UInt32) -> UInt32

public func |(lhs: Int32, rhs: Int32) -> Int32

public func |(lhs: Int8, rhs: Int8) -> Int8

public func |(lhs: UInt64, rhs: UInt64) -> UInt64

public func |(lhs: Int64, rhs: Int64) -> Int64

public func |(lhs: UInt, rhs: UInt) -> UInt

public func |(lhs: Int, rhs: Int) -> Int

public func |=(lhs: inout UInt8, rhs: UInt8)

public func |=<T : BitwiseOperations>(lhs: inout T, rhs: T)

public func |=(lhs: inout UInt16, rhs: UInt16)

public func |=(lhs: inout Int16, rhs: Int16)

public func |=(lhs: inout UInt32, rhs: UInt32)

public func |=(lhs: inout Int32, rhs: Int32)

public func |=(lhs: inout UInt64, rhs: UInt64)

public func |=(lhs: inout Int, rhs: Int)

public func |=(lhs: inout Int64, rhs: Int64)

public func |=(lhs: inout UInt, rhs: UInt)

public func |=(lhs: inout Int8, rhs: Int8)

/// If `lhs` is `true`, return it.  Otherwise, evaluate `rhs` and
/// return its `boolValue`.
public func ||<T : Boolean, U : Boolean>(lhs: T, @autoclosure rhs: () throws -> U) rethrows -> Bool

public func ||<T : Boolean>(lhs: T, @autoclosure rhs: () throws -> Bool) rethrows -> Bool

prefix public func ~(rhs: UInt16) -> UInt16

prefix public func ~(rhs: UInt) -> UInt

prefix public func ~(rhs: Int64) -> Int64

prefix public func ~(rhs: UInt64) -> UInt64

prefix public func ~(rhs: Int8) -> Int8

prefix public func ~(rhs: Int32) -> Int32

prefix public func ~(rhs: UInt32) -> UInt32

prefix public func ~(rhs: UInt8) -> UInt8

prefix public func ~(rhs: Int16) -> Int16

prefix public func ~(rhs: Int) -> Int

public func ~=<T>(lhs: _OptionalNilComparisonType, rhs: T?) -> Bool

/// Returns `true` iff `pattern` contains `value`.
public func ~=<I : Interval>(pattern: I, value: I.Bound) -> Bool

public func ~=<T : Equatable>(a: T, b: T) -> Bool

public func ~=<I : ForwardIndex where I : Comparable>(pattern: Range<I>, value: I) -> Bool

